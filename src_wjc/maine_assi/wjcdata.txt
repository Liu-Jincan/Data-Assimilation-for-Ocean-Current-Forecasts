MODULE common_obs_oceanmodel
!=======================================================================
!
!   *** NOTE: this is not used for NEMO, it is assumed that NEMOVAR
!             will be run to generate the OMF innovations instead.
!
! [PURPOSE:] Observational procedures
!
! [HISTORY:]
!   01/23/2009 Takemasa MIYOSHI  created
!   04/26/2011 Steve PENNY converted to OCEAN for use with MOM4. grep '(OCEAN)' for changes.
!   01/18/2015 Steve Penny converted for use with MOM6
!   10/24/2017 Steve Penny set up for ECMWF NEMO ocean model
!
!=======================================================================
  USE common
  USE common_oceanmodel
  USE params_obs
  USE kdtree

  IMPLICIT NONE

  PUBLIC Trans_XtoY, phys2ijk, read_obs, get_nobs, read_obs2, write_obs2, itpl_2d, itpl_3d, monit_dep
  PUBLIC center_obs_coords

  PRIVATE

  TYPE(KD_ROOT), SAVE :: kdtree_root
  INTEGER, SAVE       :: initialized = 0
  REAL(r_size), SAVE  :: prev_lon, prev_lat  !STEVE: for checking if this longitude was last searched
  INTEGER             :: k_sought=1
  INTEGER             :: k_found

  INTEGER, SAVE, ALLOCATABLE      :: idx(:)  !STEVE: index of the observations that are found by kd_search_radius
  REAL(r_size), SAVE, ALLOCATABLE :: dist(:) !STEVE: distance from the center grid point
  INTEGER, SAVE :: nn                        !STEVE: total number of local observations found by kd_search_radius

  ! For setting up kdtree:
  REAL(r_size), ALLOCATABLE, DIMENSION(:) :: lon2ij, lat2ij

CONTAINS


!-----------------------------------------------------------------------
! Transformation from model space to observation space (i.e. H-operator)
!-----------------------------------------------------------------------
! (NEMO) n/a - using NEMOVAR fdbk files instead for OMFs
SUBROUTINE Trans_XtoY(elm,ri,rj,rk,v3d,v2d,yobs)        !(OCEAN)
  USE params_model, ONLY: nlon, nlat, nlev, nv3d, nv2d
  USE params_model, ONLY: iv3d_u, iv3d_v, iv3d_t, iv3d_s, iv2d_eta, iv2d_sst, iv2d_sss

  REAL(r_size),INTENT(IN) :: elm
  REAL(r_size),INTENT(IN) :: ri,rj,rk
  REAL(r_size),INTENT(IN) :: v3d(nlon,nlat,nlev,nv3d)
  REAL(r_size),INTENT(IN) :: v2d(nlon,nlat,nv2d)
  REAL(r_size),INTENT(OUT) :: yobs
  INTEGER :: i,j,k,n
  INTEGER :: intelm

  intelm = NINT(elm)
  SELECT CASE (intelm)
  CASE(id_u_obs)  ! U
    CALL itpl_3d(v3d(:,:,:,iv3d_u),ri,rj,rk,yobs)
  CASE(id_v_obs)  ! V
    CALL itpl_3d(v3d(:,:,:,iv3d_v),ri,rj,rk,yobs)
  CASE(id_t_obs)  ! T
    CALL itpl_3d(v3d(:,:,:,iv3d_t),ri,rj,rk,yobs)
  CASE(id_s_obs)  ! S                             !(OCEAN)
    CALL itpl_3d(v3d(:,:,:,iv3d_s),ri,rj,rk,yobs) !(OCEAN)
  CASE(id_eta_obs) ! SSH                          !(OCEAN)
    !STEVE: use mom6 surface height to form Yb (i.e. hdxf)
    CALL itpl_2d(v2d(:,:,iv2d_eta),ri,rj,yobs)    !(OCEAN)
  CASE(id_sst_obs) ! SST                          !(OCEAN)
    CALL itpl_2d(v2d(:,:,iv2d_sst),ri,rj,yobs)    !(OCEAN)
  CASE(id_sss_obs) ! SSS                          !(OCEAN)
    CALL itpl_2d(v2d(:,:,iv2d_sss),ri,rj,yobs)    !(OCEAN)
  CASE DEFAULT
    print *, "ERROR::Trans_XtoY:: observation type not recognized."
    print *, "element id = ", intelm
    print *, "available id's = ", id_u_obs, id_v_obs, id_t_obs, id_s_obs, id_ssh_obs, id_eta_obs, id_sst_obs, id_sss_obs, id_x_obs, id_y_obs, id_z_obs
    print *, "STEVE: STOPPING ON PURPOSE..."
    STOP 1
  END SELECT

END SUBROUTINE Trans_XtoY


!-----------------------------------------------------------------------
! Coordinate conversion
!-----------------------------------------------------------------------
! (NEMO) n/a - using NEMOVAR fdbk files instead for OMFs
SUBROUTINE phys2ijk(elem,rlon,rlat,rlev,ri,rj,rk)     !(OCEAN)
  USE params_model, ONLY: nlon, nlat, nlev
  USE vars_model,   ONLY: lon2d, lat2d, lev2d, lon, lat, lev
  USE vars_model,   ONLY: lon0, lonf, lat0, latf, wrapgap
  REAL(r_size),INTENT(IN) :: elem
  REAL(r_size),INTENT(IN) :: rlon
  REAL(r_size),INTENT(IN) :: rlat
  REAL(r_size),INTENT(IN) :: rlev ! pressure levels
  REAL(r_size),INTENT(OUT) :: ri
  REAL(r_size),INTENT(OUT) :: rj
  REAL(r_size),INTENT(OUT) :: rk
  REAL(r_size) :: aj,ak,ai, rrlon, glon,glat,xlon,xlat
! REAL(r_size) :: lnps(nlon,nlat)
  REAL(r_size) :: plev(nlev)
  INTEGER :: i,j,k,n, ni,nj, ii,jj
  LOGICAL, PARAMETER :: dodebug = .false.

  !-----------------------------------------------------------------------------
  ! Initialize the KD-tree for the model-grid
  !-----------------------------------------------------------------------------
  !STEVE: NOTE: this is replicated for each process
  if (initialized == 0) then
    ! Allocating this was needed for some machines, possibly due to the cache size
    ! of the machine and how the compiler handles nested function calls in memory.
    ALLOCATE(lon2ij(nlon*nlat),lat2ij(nlon*nlat))
    lon2ij = RESHAPE(lon2d(:,:),(/nlon*nlat/))
    lat2ij = RESHAPE(lat2d(:,:),(/nlon*nlat/))

    WRITE(6,*) "Initializing the obs_local()"
    initialized = 1
    call kd_init( kdtree_root, lon2ij, lat2ij)
    WRITE(6,*) "Done constructing KD search tree."
    WRITE(6,*) "nlon*nlat = ", nlon*nlat
    ALLOCATE(dist(k_sought))
    ALLOCATE( idx(k_sought))
    prev_lon = -1e10
    prev_lat = -1e10

  endif

  !-----------------------------------------------------------------------------
  ! query the KD-tree
  !-----------------------------------------------------------------------------
  if (rlon .ne. prev_lon .or. rlat .ne. prev_lat) then
    CALL kd_search_nnearest(kdtree_root,  (/rlon, rlat/), k_sought, idx, dist, k_found, .false.)
    prev_lon = rlon
    prev_lat = rlat
    if (dodebug) then
      WRITE(6,*) "common_obs_mom6.f90::phys2ijk ---------------------------- "
      WRITE(6,*) "base observation point (lon/lat) :: ", rlon, rlat
      WRITE(6,*) "k_sought = ", k_sought
      WRITE(6,*) "k_found  = ", k_found
      WRITE(6,*) "Grid points found by kd_search_nnearest = "
      WRITE(6,*) "idx,ni,nj,lon,lat,dist"
      do n=1,k_found
        ni = MODULO(idx(n)-1,nlon)+1
        nj = idx(n)/nlon+1 ! Integer division
        WRITE(6,*) idx(n), ni,nj, lon2d(ni,nj), lat2d(ni,nj), dist(n)
      enddo
    endif
  endif

  !-----------------------------------------------------------------------------
  ! rlon -> ri, rlat -> rj
  !-----------------------------------------------------------------------------

  ! Find the appropriate grid box containing this observation

  ! First, find the index of the nearest grid point
  ni = MODULO(idx(1)-1,nlon)+1
  nj = FLOOR(REAL(idx(1))/REAL(nlon))+1 ! Integer division
  glon = lon2d(ni,nj)
  glat = lat2d(ni,nj)

  ! For debugging:
  if (dodebug) then
    if (ALLOCATED(lon2ij)) xlon = lon2ij(idx(1))
    if (ALLOCATED(lat2ij)) xlat = lat2ij(idx(1))
  endif

  !STEVE: initialize to something that will throw errors if it's not changed within
  ri = -1
  rj = -1
  rk = -1

  ! Second, check to see whether the observation is to the left/right, up/down from this point

  !-----------------------------------------------------------------------------
  ! Get longitude scaling
  !-----------------------------------------------------------------------------
  if (glon == rlon) then
    ai = 0.0
  elseif (glon < rlon) then
    ai = (rlon - lon2d(ni,nj)) / (lon2d(ni+1,nj) - lon2d(ni,nj))
  elseif (rlon < glon) then
    ai = (rlon - lon2d(ni,nj)) / (lon2d(ni,nj) - lon2d(ni-1,nj))
  endif
  ri = REAL(ni,r_size) + ai

  !-----------------------------------------------------------------------------
  ! Get latitude scaling
  !-----------------------------------------------------------------------------
  if (glat == rlat) then
    aj = 0.0
  elseif (glat < rlat) then
    aj = (rlat - lat2d(ni,nj)) / (lat2d(ni,nj+1) - lat2d(ni,nj))
  elseif (rlat < glat) then
    aj = (rlat - lat2d(ni,nj)) / (lat2d(ni,nj) - lat2d(ni,nj-1))
    !STEVE: should be negative
  endif
  rj = REAL(nj,r_size) + aj

  ! Set flags to mark rlon outside of map range:
  if (ri < 1) then
    ri = 0
  elseif(ri >= nlon+1) then
    ri = nlon+1
  endif

  if (rj < 1) then
    rj = 0
  elseif (rj >= nlat+1) then
    rj = nlat+1
  endif

  ! if (dodebug .and. (ri > nlon .or. ri < 1)) then
  if (dodebug) then
    WRITE(6,*) "================="
    WRITE(6,*) "In common_obs_mom6.f90::phys2ijk,"
    WRITE(6,*) "-----------------"
    WRITE(6,*) "rlon = ", rlon
    if (dodebug) WRITE(6,*) "xlon = ", xlon
    WRITE(6,*) "glon = ", glon
    WRITE(6,*) "ni = ", ni
    WRITE(6,*) "ai = ", ai
    WRITE(6,*) "ri = ", ri
    WRITE(6,*) "lon0 = ", lon0
    WRITE(6,*) "lonf = ", lonf
    WRITE(6,*) "-----------------"
    WRITE(6,*) "rlat = ", rlat
    if (dodebug) WRITE(6,*) "xlat = ", xlat
    WRITE(6,*) "glat = ", glat
    WRITE(6,*) "nj = ", nj
    WRITE(6,*) "aj = ", aj
    WRITE(6,*) "rj = ", rj
    WRITE(6,*) "lat0 = ", lat0
    WRITE(6,*) "latf = ", latf
    WRITE(6,*) "================="
  endif

  if (CEILING(ri) < 2 .OR. nlon+1 < CEILING(ri)) RETURN
  if (CEILING(rj) < 2 .OR. nlat < CEILING(rj)) RETURN

  !-----------------------------------------------------------------------------
  ! rlev -> rk
  !-----------------------------------------------------------------------------
  if (NINT(elem) == id_ssh_obs) then     ! surface observation !(OCEAN)
    rk = 0.0d0
  elseif(NINT(elem) == id_eta_obs) then ! surface observation !(OCEAN)
    rk = 0.0d0
  elseif(NINT(elem) == id_sst_obs) then ! surface observation !(OCEAN)
    rk = 0.0d0
  elseif(NINT(elem) == id_sss_obs) then ! surface observation !(OCEAN)
    rk = 0.0d0
  else
    !
    ! vertical interpolation
    !
    !
    ! find rk
    !
!   if (dodebug) WRITE(6,*) "rlev = ", rlev
    do k=1,nlev
!     if (dodebug) WRITE(6,*) "lev(",k,") = ", lev(k)
      if (rlev < lev(k)) EXIT
      if (k .eq. nlev .and. rlev .eq. lev(nlev)) EXIT !STEVE: added this case for simulated obs that reach the lowest model levels.
                                                      !       Otherwise, k iterates to nlev+1 before exiting loop.
      if (k>1 .and. lev(k)==0.0) then
        WRITE(6,*) "common_obs_mom4.f90::phys2ijk:: lev(k)==0.0 but k>1. ERROR, EXITING..."
        WRITE(6,*) "(model levels array lev() was not appropriately set)"
        STOP(934)
      endif
    enddo

    if (rk > nlev) then
      WRITE(6,*) "common_obs_mom4.f90::phys2ijk:: rk>nlev. ERROR, EXITING..."
      WRITE(6,*) "(appropriate model leve not found for rlev = ",rlev,")"
      STOP(935)
    endif

    if (k .eq. 1) then
      rk = 1 !ak
    else
      !STEVE: now apply the interpolation at the identified model level:
      ak = (rlev - lev(k-1)) / (lev(k) - lev(k-1))
      rk = REAL(k-1,r_size) + ak
    endif
    if (dodebug) WRITE(6,*) "phys2ijk:: rlon,rlat,rlev,ri,rj,rk = ", rlon,rlat,rlev,ri,rj,rk

  endif

  if (dodebug) then
    WRITE(6,*) "-----------------"
    WRITE(6,*) "rlev = ", rlev
    WRITE(6,*) "k  = ", k
    WRITE(6,*) "lev(k-1) = ", lev(k-1)
    WRITE(6,*) "lev(k)   = ", lev(k)
    WRITE(6,*) "ak = ", ak
    WRITE(6,*) "rk = ", rk
    WRITE(6,*) "lev0 = ", lev(1)
    WRITE(6,*) "levf = ", lev(nlev)
    WRITE(6,*) "================="
  endif 
  
END SUBROUTINE phys2ijk


!-----------------------------------------------------------------------
! Interpolation
!-----------------------------------------------------------------------
SUBROUTINE itpl_2d(var,ri,rj,var5)

  USE params_model, ONLY: nlon, nlat

  REAL(r_size),INTENT(IN) :: var(nlon,nlat)
  REAL(r_size),INTENT(IN) :: ri
  REAL(r_size),INTENT(IN) :: rj
  REAL(r_size),INTENT(OUT) :: var5
  REAL(r_size) :: ai,aj
  INTEGER :: i,j

  i = CEILING(ri)
  ai = ri - REAL(i-1,r_size)
  j = CEILING(rj)
  aj = rj - REAL(j-1,r_size)

  if (i <= nlon) then
    var5 = var(i-1,j-1) * (1-ai) * (1-aj) &
       & + var(i  ,j-1) *    ai  * (1-aj) &
       & + var(i-1,j  ) * (1-ai) *    aj  &
       & + var(i  ,j  ) *    ai  *    aj

!   if (.true.) then
!     print *, "common_obs_mom6.f90::itpl_2d::"
!     print *, "var(i-1,j-1) = ", var(i-1,j-1)
!     print *, "(1-ai) = ", (1-ai)
!     print *, "(1-aj) = ", (1-aj)
!     print *, "var(i  ,j-1) = ", var(i  ,j-1)
!     print *, "ai = ", ai
!     print *, "var(i-1,j  ) = ", var(i-1,j  )
!     print *, "aj = ", aj
!     print *, "var(i  ,j  ) = ", var(i  ,j  )
!     print *, "var5 = ", var5
!   endif

  else
    var5 = var(i-1,j-1) * (1-ai) * (1-aj) &
       & + var(1  ,j-1) *    ai  * (1-aj) &
       & + var(i-1,j  ) * (1-ai) *    aj  &
       & + var(1  ,j  ) *    ai  *    aj
  endif

END SUBROUTINE itpl_2d


SUBROUTINE itpl_3d(var,ri,rj,rk,var5)

  USE params_model, ONLY: nlon, nlat, nlev

  REAL(r_size),INTENT(IN) :: var(nlon,nlat,nlev)
  REAL(r_size),INTENT(IN) :: ri
  REAL(r_size),INTENT(IN) :: rj
  REAL(r_size),INTENT(IN) :: rk
  REAL(r_size),INTENT(OUT) :: var5
  REAL(r_size) :: ai,aj,ak
  INTEGER :: i,j,k
  LOGICAL, PARAMETER :: dodebug = .false.

  i = CEILING(ri)
  ai = ri - REAL(i-1,r_size)
  j = CEILING(rj)
  aj = rj - REAL(j-1,r_size)
  k = CEILING(rk)
  ak = rk - REAL(k-1,r_size)

  if (dodebug) WRITE(6,*) "i,j,k,ai,aj,ak = ", i,j,k,ai,aj,ak

  if (i <= nlon) then
    var5 = var(i-1,j-1,k-1) * (1-ai) * (1-aj) * (1-ak) &
       & + var(i  ,j-1,k-1) *    ai  * (1-aj) * (1-ak) &
       & + var(i-1,j  ,k-1) * (1-ai) *    aj  * (1-ak) &
       & + var(i  ,j  ,k-1) *    ai  *    aj  * (1-ak) &
       & + var(i-1,j-1,k  ) * (1-ai) * (1-aj) *    ak  &
       & + var(i  ,j-1,k  ) *    ai  * (1-aj) *    ak  &
       & + var(i-1,j  ,k  ) * (1-ai) *    aj  *    ak  &
       & + var(i  ,j  ,k  ) *    ai  *    aj  *    ak
  else
    var5 = var(i-1,j-1,k-1) * (1-ai) * (1-aj) * (1-ak) &
       & + var(1  ,j-1,k-1) *    ai  * (1-aj) * (1-ak) &
       & + var(i-1,j  ,k-1) * (1-ai) *    aj  * (1-ak) &
       & + var(1  ,j  ,k-1) *    ai  *    aj  * (1-ak) &
       & + var(i-1,j-1,k  ) * (1-ai) * (1-aj) *    ak  &
       & + var(1  ,j-1,k  ) *    ai  * (1-aj) *    ak  &
       & + var(i-1,j  ,k  ) * (1-ai) *    aj  *    ak  &
       & + var(1  ,j  ,k  ) *    ai  *    aj  *    ak
  endif

  if (dodebug) WRITE(6,*) "var5 = ", var5

END SUBROUTINE itpl_3d


!-----------------------------------------------------------------------
! Monitor departure
!-----------------------------------------------------------------------
SUBROUTINE monit_dep(nn,elm,dep,qc)
  INTEGER,INTENT(IN) :: nn
  REAL(r_size),INTENT(IN) :: elm(nn)
  REAL(r_size),INTENT(IN) :: dep(nn)
  INTEGER,INTENT(IN) :: qc(nn)
  REAL(r_size) :: rmse_u,rmse_v,rmse_t,rmse_s,rmse_ssh,rmse_eta,rmse_sst,rmse_sss !(OCEAN)
  REAL(r_size) :: bias_u,bias_v,bias_t,bias_s,bias_ssh,bias_eta,bias_sst,bias_sss !(OCEAN)
  INTEGER :: n,iu,iv,it,is,issh,ieta,isst,isss                                !(OCEAN)

  rmse_u = 0.0d0
  rmse_v = 0.0d0
  rmse_t = 0.0d0
  rmse_s = 0.0d0    !(OCEAN)
  rmse_ssh = 0.0d0  !(OCEAN)
  rmse_eta = 0.0d0  !(OCEAN)
  rmse_sst = 0.0d0  !(OCEAN)
  rmse_sss = 0.0d0  !(OCEAN)
  bias_u = 0.0d0
  bias_v = 0.0d0
  bias_t = 0.0d0
  bias_s = 0.0d0    !(OCEAN)
  bias_ssh = 0.0d0  !(OCEAN)
  bias_eta = 0.0d0  !(OCEAN)
  bias_sst = 0.0d0  !(OCEAN)
  bias_sss = 0.0d0  !(OCEAN)
  iu = 0
  iv = 0
  it = 0
  is = 0            !(OCEAN)
  issh = 0          !(OCEAN)
  ieta = 0          !(OCEAN)
  isst = 0          !(OCEAN)
  isss = 0          !(OCEAN)
  DO n=1,nn
    if (qc(n) /= 1) CYCLE
    SELECT CASE(NINT(elm(n)))
    CASE(id_u_obs)
      rmse_u = rmse_u + dep(n)**2
      bias_u = bias_u + dep(n)
      iu = iu + 1
    CASE(id_v_obs)
      rmse_v = rmse_v + dep(n)**2
      bias_v = bias_v + dep(n)
      iv = iv + 1
    CASE(id_t_obs)
      rmse_t = rmse_t + dep(n)**2
      bias_t = bias_t + dep(n)
      it = it + 1
    CASE(id_s_obs)                    !(OCEAN)
      rmse_s = rmse_s + dep(n)**2     !(OCEAN)
      bias_s = bias_s + dep(n)        !(OCEAN)
      is = is + 1                     !(OCEAN)
    CASE(id_ssh_obs)                  !(OCEAN)
      rmse_ssh = rmse_ssh + dep(n)**2 !(OCEAN)
      bias_ssh = bias_ssh + dep(n)    !(OCEAN)
      issh = issh + 1                 !(OCEAN)
    CASE(id_eta_obs)                  !(OCEAN)
      rmse_eta = rmse_eta + dep(n)**2 !(OCEAN)
      bias_eta = bias_eta + dep(n)    !(OCEAN)
      ieta = ieta + 1                 !(OCEAN)
    CASE(id_sst_obs)                  !(OCEAN)
      rmse_sst = rmse_sst + dep(n)**2 !(OCEAN)
      bias_sst = bias_sst + dep(n)    !(OCEAN)
      isst = isst + 1                 !(OCEAN)
    CASE(id_sss_obs)                  !(OCEAN)
      rmse_sss = rmse_sss + dep(n)**2 !(OCEAN)
      bias_sss = bias_sss + dep(n)    !(OCEAN)
      isss = isss + 1                 !(OCEAN)
    END SELECT
  enddo
  if (iu == 0) then
    rmse_u = undef
    bias_u = undef
  else
    rmse_u = SQRT(rmse_u / REAL(iu,r_size))
    bias_u = bias_u / REAL(iu,r_size)
  endif
  if (iv == 0) then
    rmse_v = undef
    bias_v = undef
  else
    rmse_v = SQRT(rmse_v / REAL(iv,r_size))
    bias_v = bias_v / REAL(iv,r_size)
  endif
  if (it == 0) then
    rmse_t = undef
    bias_t = undef
  else
    rmse_t = SQRT(rmse_t / REAL(it,r_size))
    bias_t = bias_t / REAL(it,r_size)
  endif
  if (is == 0) then                                   !(OCEAN)
    rmse_s = undef                                   !(OCEAN)
    bias_s = undef                                   !(OCEAN)
  else
    rmse_s = SQRT(rmse_s / REAL(is,r_size))          !(OCEAN)
    bias_s = bias_s / REAL(is,r_size)                !(OCEAN)
  endif
  if (issh == 0) then                                 !(OCEAN)
    rmse_ssh = undef                                 !(OCEAN)
    bias_ssh = undef                                 !(OCEAN)
  else
    rmse_ssh = SQRT(rmse_ssh / REAL(issh,r_size))    !(OCEAN)
    bias_ssh = bias_ssh / REAL(issh,r_size)          !(OCEAN)
  endif
  if (ieta == 0) then                                 !(OCEAN)
    rmse_eta = undef                                 !(OCEAN)
    bias_eta = undef                                 !(OCEAN)
  else
    rmse_eta = SQRT(rmse_eta / REAL(ieta,r_size))    !(OCEAN)
    bias_eta = bias_eta / REAL(ieta,r_size)          !(OCEAN)
  endif
  if (isst == 0) then                                 !(OCEAN)
    rmse_sst = undef                                 !(OCEAN)
    bias_sst = undef                                 !(OCEAN)
  else
    rmse_sst = SQRT(rmse_sst / REAL(isst,r_size))    !(OCEAN)
    bias_sst = bias_sst / REAL(isst,r_size)          !(OCEAN)
  endif
  if (isss == 0) then                                 !(OCEAN)
    rmse_sss = undef                                 !(OCEAN)
    bias_sss = undef                                 !(OCEAN)
  else
    rmse_sss = SQRT(rmse_sss / REAL(isss,r_size))    !(OCEAN)
    bias_sss = bias_sss / REAL(isss,r_size)          !(OCEAN)
  endif

  WRITE(6,'(A)') '== OBSERVATIONAL DEPARTURE ============================================='
  WRITE(6,'(7A12)') 'U','V','T','S','SSH','eta','SST'
  WRITE(6,'(7ES12.3)') bias_u,bias_v,bias_t,bias_s,bias_ssh,bias_eta,bias_sst
  WRITE(6,'(7ES12.3)') rmse_u,rmse_v,rmse_t,rmse_s,rmse_ssh,bias_eta,rmse_sst
  WRITE(6,'(A)') '== NUMBER OF OBSERVATIONS TO BE ASSIMILATED ============================'
  WRITE(6,'(7A12)') 'U','V','T','S','SSH','eta','SST'
  WRITE(6,'(7I12)') iu,iv,it,is,issh,ieta,isst
  WRITE(6,'(A)') '========================================================================'

END SUBROUTINE monit_dep


!-----------------------------------------------------------------------
! Basic modules for observation input
!-----------------------------------------------------------------------
SUBROUTINE get_nobs(cfile,nrec,nn)
  CHARACTER(*),INTENT(IN) :: cfile
  INTEGER,INTENT(IN) :: nrec
  INTEGER,INTENT(OUT) :: nn
  REAL(r_sngl),ALLOCATABLE :: wk(:) 
  INTEGER :: ios
  INTEGER :: iu,iv,it,is,issh,ieta,isst,isss,ix,iy,iz !(OCEAN)
  INTEGER :: nprof !(OCEAN)
  REAL(r_sngl) :: lon_m1, lat_m1
  INTEGER :: iunit
  LOGICAL :: ex
  LOGICAL, PARAMETER :: dodebug=.false.

  ALLOCATE(wk(nrec))
  nn = 0
  iu = 0
  iv = 0
  it = 0
  is = 0    !(OCEAN)
  issh = 0  !(OCEAN)
  ieta = 0  !(OCEAN)
  isst = 0  !(OCEAN)
  isss = 0  !(OCEAN)
  ix = 0    !(OCEAN)
  iy = 0    !(OCEAN)
  iz = 0    !(OCEAN)
  nprof = 0    !(OCEAN)
  lon_m1 = 0    !(OCEAN)
  lat_m1 = 0    !(OCEAN)
  iunit=91
  if (dodebug) print *, "get_nobs::"
  INQUIRE(FILE=cfile,EXIST=ex)
  if (ex) then
    OPEN(iunit,FILE=cfile,FORM='unformatted',ACCESS='sequential')
    DO
      READ(iunit,IOSTAT=ios) wk

      if (ios < 0) then
        WRITE(6,*) "get_nobs:: end of file reached with nn = ", nn
        EXIT
      endif

      if (dodebug .and. nrec.eq.6) then
        PRINT '(I6,2F7.2,F10.2,2F12.2)',NINT(wk(1)),wk(2),wk(3),wk(4),wk(5),wk(6)
      elseif (dodebug .and. nrec .eq. 8) then
        PRINT '(I6,2F7.2,F10.2,4F12.2)',NINT(wk(1)),wk(2),wk(3),wk(4),wk(5),wk(6),wk(7),wk(8)
      elseif (dodebug .and. nrec .eq. 9) then
        PRINT '(I6,2F7.2,F10.2,5F12.2)',NINT(wk(1)),wk(2),wk(3),wk(4),wk(5),wk(6),wk(7),wk(8),wk(9)
      endif

      SELECT CASE(NINT(wk(1)))
      CASE(id_u_obs)
        iu = iu + 1
      CASE(id_v_obs)
        iv = iv + 1
      CASE(id_t_obs)
        it = it + 1
      CASE(id_s_obs)     !(OCEAN)
        is = is + 1      !(OCEAN)
      CASE(id_ssh_obs)   !(OCEAN)
        issh = issh + 1  !(OCEAN)
      CASE(id_eta_obs)   !(OCEAN)
        ieta = ieta + 1  !(OCEAN)
      CASE(id_sst_obs)   !(OCEAN)
        isst = isst + 1  !(OCEAN)
      CASE(id_sss_obs)   !(OCEAN)
        isss = isss + 1  !(OCEAN)
      CASE(id_x_obs)     !(OCEAN)
        ix = ix + 1      !(OCEAN)
      CASE(id_y_obs)     !(OCEAN)
        iy = iy + 1      !(OCEAN)
      CASE(id_z_obs)     !(OCEAN)
        iz = iz + 1      !(OCEAN)
      END SELECT

      if (wk(2) .ne. lon_m1 .and. wk(3) .ne. lat_m1) then
        nprof=nprof+1
        lon_m1 = wk(2)
        lat_m1 = wk(3)
      endif

      nn = nn + 1

    enddo
    WRITE(6,'(I10,A)') nprof ,' PROFILES INPUT'
    WRITE(6,'(I10,A)') nn,' TOTAL OBSERVATIONS INPUT (in get_nobs)'
    WRITE(6,'(A12,I10)') '          U:',iu
    WRITE(6,'(A12,I10)') '          V:',iv
    WRITE(6,'(A12,I10)') '          T:',it
    WRITE(6,'(A12,I10)') '          S:',is   !(OCEAN)
    WRITE(6,'(A12,I10)') '        SSH:',issh !(OCEAN)
    WRITE(6,'(A12,I10)') '        eta:',ieta !(OCEAN)
    WRITE(6,'(A12,I10)') '        SST:',isst !(OCEAN)
    WRITE(6,'(A12,I10)') '        SSS:',isss !(OCEAN)
    WRITE(6,'(A12,I10)') '          X:',ix   !(OCEAN)
    WRITE(6,'(A12,I10)') '          Y:',iy   !(OCEAN)
    WRITE(6,'(A12,I10)') '          Z:',iz   !(OCEAN)
    CLOSE(iunit)
  else
    WRITE(6,'(2A)') cfile,' does not exist -- skipped'
  endif
  DEALLOCATE(wk)

  if (nn .eq. 0) then
    WRITE(6,*) "get_nobs:: No observations have been found. Exiting..."
    STOP(60)
  endif

END SUBROUTINE get_nobs


SUBROUTINE read_obs(cfile,nn,elem,rlon,rlat,rlev,odat,oerr,obhr)
  USE vars_model, ONLY: lon0, lonf, lat0, latf, wrapgap
! USE vars_model, ONLY: lon, lat, lev
  CHARACTER(*),INTENT(IN) :: cfile
  INTEGER,INTENT(IN) :: nn
  REAL(r_size),INTENT(OUT) :: elem(nn) ! element number
  REAL(r_size),INTENT(OUT) :: rlon(nn)
  REAL(r_size),INTENT(OUT) :: rlat(nn)
  REAL(r_size),INTENT(OUT) :: rlev(nn)
  REAL(r_size),INTENT(OUT) :: odat(nn)
  REAL(r_size),INTENT(OUT) :: oerr(nn)
  REAL(r_size),INTENT(OUT) :: obhr(nn)
! REAL(r_sngl) :: wk(6)
  REAL(r_sngl) :: wk(9)
! REAL(r_size) :: wk(6) !(OCEAN) STEVE: type must be changed if the netcdf observation files are stored as double precision
  INTEGER :: n,iunit
  ! STEVE: for general grid
  LOGICAL, PARAMETER :: dodebug = .false.
  LOGICAL :: process_obs = .true.

  iunit=91
  OPEN(iunit,FILE=cfile,FORM='unformatted',ACCESS='sequential')
  DO n=1,nn
    READ(iunit) wk
    elem(n) = REAL(wk(1),r_size)
    rlon(n) = REAL(wk(2),r_size)
    rlat(n) = REAL(wk(3),r_size)
    rlev(n) = REAL(wk(4),r_size)
    odat(n) = REAL(wk(5),r_size)
    oerr(n) = REAL(wk(6),r_size)
    obhr(n) = REAL(wk(7),r_size)

    !STEVE: error check
    if (oerr(n) .le. 0) then
      print *, "common_obs_mom6.f90::read_obs:: WARNING!"
      print *, "STEVE: oerr <= 0, must be > 0 ..." 
      print *, "STEVE: oerr(",n,") = ", oerr(n)
      PRINT '(I6,2F7.2,F10.2,2F12.2)',NINT(wk(1)),wk(2),wk(3),wk(4),wk(5),wk(6),wk(7),wk(8),wk(9)
!     stop 9
    endif
    
    ! Special processing for obs:
    !STEVE: this handles the fact that the observations are typically on a 0 to 360º grid, while
    !       the NCEP mom4p1 grid configuration is on a ~ -285 to 75º grid
    if (process_obs) then
      CALL center_obs_coords(rlon,oerr,nn)
    endif 

  enddo

  CLOSE(iunit)

  if (MAXVAL(rlon) > lonf) then
    WRITE(6,*) "read_obs:: Error: MAX(observation lon, i.e. rlon) > lonf"
    WRITE(6,*) "rlon = ", rlon
    WRITE(6,*) "lonf = ", lonf
    STOP(2)
  endif
  if (MINVAL(rlon) < lon0) then
    WRITE(6,*) "read_obs:: Error: MIN(observation lon, i.e. rlon) < lon0"
    WRITE(6,*) "rlon = ", rlon
    WRITE(6,*) "lon0 = ", lon0
    STOP(2)
  endif

END SUBROUTINE read_obs


SUBROUTINE read_obs2(cfile,nn,elem,rlon,rlat,rlev,odat,oerr,ohx,oqc,obhr)
  CHARACTER(*),INTENT(IN) :: cfile
  INTEGER,INTENT(IN) :: nn
  REAL(r_size),INTENT(OUT) :: elem(nn) ! element number
  REAL(r_size),INTENT(OUT) :: rlon(nn)
  REAL(r_size),INTENT(OUT) :: rlat(nn)
  REAL(r_size),INTENT(OUT) :: rlev(nn)
  REAL(r_size),INTENT(OUT) :: odat(nn)
  REAL(r_size),INTENT(OUT) :: oerr(nn)
  REAL(r_size),INTENT(OUT) :: ohx(nn)
  REAL(r_size),INTENT(OUT) :: obhr(nn)
  INTEGER,INTENT(OUT) :: oqc(nn)
  REAL(r_sngl) :: wk(9)
  INTEGER :: n,iunit
  INTEGER :: IOstatus
  LOGICAL :: dodebug = .false.

  iunit=91
  OPEN(iunit,FILE=cfile,FORM='unformatted',ACCESS='sequential')

  do n=1,nn
    if (dodebug) WRITE(6,*) "read_obs2:: n = ", n
    READ(iunit,IOSTAT=IOstatus) wk
    if (IOstatus<0) then
      WRITE(6,*) "read_obs2:: reached end of file prematurely."
      WRITE(6,*) "read_obs2::          n  = ", n
      WRITE(6,*) "read_obs2:: expected nn = ", nn
      WRITE(6,*) "Perhaps the observations are not identical across members?"
      WRITE(6,*) "(They should be - please check your input.)"
      WRITE(6,*) "read_obs2:: EXITING on purpose..."
      STOP(9522)
    endif
    elem(n) = REAL(wk(1),r_size)
    rlon(n) = REAL(wk(2),r_size)
    rlat(n) = REAL(wk(3),r_size)
    rlev(n) = REAL(wk(4),r_size)
    odat(n) = REAL(wk(5),r_size)
    oerr(n) = REAL(wk(6),r_size)
    ohx(n)  = REAL(wk(7),r_size)
    oqc(n)  = NINT(wk(8))
    obhr(n) = REAL(wk(9),r_size)
  enddo

  CLOSE(iunit)

END SUBROUTINE read_obs2


!STEVE: adding for support
SUBROUTINE write_obs(cfile,nn,elem,rlon,rlat,rlev,odat,oerr,obhr)
  CHARACTER(*),INTENT(IN) :: cfile
  INTEGER,INTENT(IN) :: nn
  REAL(r_size),INTENT(IN) :: elem(nn) ! element number
  REAL(r_size),INTENT(IN) :: rlon(nn)
  REAL(r_size),INTENT(IN) :: rlat(nn)
  REAL(r_size),INTENT(IN) :: rlev(nn)
  REAL(r_size),INTENT(IN) :: odat(nn)
  REAL(r_size),INTENT(IN) :: oerr(nn)
  REAL(r_size),INTENT(IN) :: obhr(nn)
  REAL(r_sngl) :: wk(9)
! REAL(r_size) :: wk(6) !(OCEAN) STEVE: I changed this because the netcdf observation files are stored as double precision
  INTEGER :: n,iunit

  iunit=91
  OPEN(iunit,FILE=cfile,FORM='unformatted',ACCESS='sequential')

  do n=1,nn
    wk(1) = REAL(elem(n),r_sngl)
    wk(2) = REAL(rlon(n),r_sngl)
    wk(3) = REAL(rlat(n),r_sngl)
    wk(4) = REAL(rlev(n),r_sngl)
    wk(5) = REAL(odat(n),r_sngl)
    wk(6) = REAL(oerr(n),r_sngl)
    wk(7) = REAL(obhr(n),r_sngl)
    wk(8) = -1
    wk(9) = -1
    WRITE(iunit) wk
  enddo

  CLOSE(iunit)

END SUBROUTINE write_obs


SUBROUTINE write_obs2(cfile,nn,elem,rlon,rlat,rlev,odat,oerr,ohx,oqc,obhr,qcflag_in)
  CHARACTER(*),INTENT(IN) :: cfile
  INTEGER,INTENT(IN) :: nn
  REAL(r_size),INTENT(IN) :: elem(nn) ! element number
  REAL(r_size),INTENT(IN) :: rlon(nn)
  REAL(r_size),INTENT(IN) :: rlat(nn)
  REAL(r_size),INTENT(IN) :: rlev(nn)
  REAL(r_size),INTENT(IN) :: odat(nn)
  REAL(r_size),INTENT(IN) :: oerr(nn)
  REAL(r_size),INTENT(IN) :: ohx(nn)
  REAL(r_size),INTENT(IN) :: obhr(nn)
  LOGICAL, INTENT(IN), OPTIONAL :: qcflag_in
  LOGICAL :: qcflag
  INTEGER,INTENT(IN) :: oqc(nn)
  REAL(r_sngl) :: wk(9)
  INTEGER :: n,iunit
  LOGICAL, PARAMETER :: dodebug=.false.

  ! Choose to keep or remove observations that have already been qc'd
  if (PRESENT(qcflag_in)) then
    qcflag = qcflag_in
  else
    qcflag = .false.
  endif

  iunit=92
  OPEN(iunit,FILE=cfile,FORM='unformatted',ACCESS='sequential')

  do n=1,nn
    if (qcflag .and. oqc(n)==0) CYCLE
    wk(1) = REAL(elem(n),r_sngl)  ! ID for observation type
    wk(2) = REAL(rlon(n),r_sngl)  ! Ob lon
    wk(3) = REAL(rlat(n),r_sngl)  ! Ob lat
    wk(4) = REAL(rlev(n),r_sngl)  ! Ob level
    wk(5) = REAL(odat(n),r_sngl)  ! Observed data quantity
    wk(6) = REAL(oerr(n),r_sngl)  ! Estimated observation error
    wk(7) = REAL(ohx(n),r_sngl)   ! Model forecast transformed to observation space: H(xb)
    wk(8) = REAL(oqc(n),r_sngl)   ! Quality control ID (1==keep, 0==discard) for use in assimilation
    wk(9) = REAL(obhr(n),r_sngl)  ! (real) hour of the observation, for time-based assimilation
    if (dodebug) PRINT '(I6,2F7.2,F10.2,6F12.2)',NINT(wk(1)),wk(2),wk(3),wk(4),wk(5),wk(6),wk(7),wk(8),wk(9)
    WRITE(iunit) wk
  enddo

  CLOSE(iunit)

END SUBROUTINE write_obs2


SUBROUTINE center_obs_coords(rlon,oerr,nn)
!===============================================================================
! Center all observations within the longitudes defined by the model grid
!===============================================================================
! (NEMO) n/a - this is specific to MOM and must be updated if the functionality is needed for NEMO
  USE vars_model,   ONLY: lon0, lonf, wrapgap
  REAL(r_size),INTENT(INOUT) :: rlon(nn)
  REAL(r_size),INTENT(INOUT) :: oerr(nn)
  INTEGER, INTENT(IN) :: nn
  INTEGER :: n
  LOGICAL :: dodebug = .false.
  LOGICAL :: dodebug1 = .false.

  if (dodebug) then
    WRITE(6,*) "center_obs_coords::"
    WRITE(6,*) "wrapgap = ", wrapgap
  endif

  do n=1,nn

    if (rlon(n) >= lonf) then
      if (dodebug1) WRITE(6,*) "(a)"

      if (dodebug) then
        WRITE(6,*) "letkf_obs.f90:: Wrapping large lon obs to model grid: n = ", n
        WRITE(6,*) "pre : rlon(n) = ", rlon(n)
        WRITE(6,*) "360 - rlon(n) = ", 360.0 - rlon(n)
        WRITE(6,*) "abs(rlon(n) - lonf) = ", abs(rlon(n) - lonf)
      endif

      ! Update the coordinate
      if ( abs(rlon(n) - lonf) < wrapgap ) then
        if (dodebug1) WRITE(6,*) "(b)"
          ! First, handle observations that are just outside of the model grid
          !STEVE: shift it if it's just outside grid

        if (abs(rlon(n) - lonf) < wrapgap/2) then
            rlon(n) = lonf
        else
            rlon(n) = lon0
        endif

        ! Increase error to compensate
        oerr(n) = oerr(n)*2
      else
        if (dodebug1) WRITE(6,*) "(c)"
        ! Otherwise, wrap the observation coordinate to be inside of the defined model grid coordinates
        !Wrap the coordinate
        if (dodebug) then
          WRITE(6,*) "lon0    = ", lon0
          WRITE(6,*) "lonf    = ", lonf
          WRITE(6,*) "rlon(n) = ", rlon(n)
          WRITE(6,*) "wrapgap = ", wrapgap
        endif
        rlon(n) = REAL(lon0 + abs(rlon(n) - lonf) - wrapgap,r_size)
        if (dodebug) then
          WRITE(6,*) "After update:"
          WRITE(6,*) "rlon(n) = REAL(lon0 + abs(rlon(n) - lonf) - wrapgap,r_size)"
          WRITE(6,*) "rlon(n) = ", rlon(n)
        endif
      endif

      if (dodebug) WRITE(6,*) "post : rlon(n) = ", rlon(n)

    elseif (rlon(n) < lon0) then
      if (dodebug1) WRITE(6,*) "(d)"

      if (dodebug) then
          WRITE(6,*) "letkf_obs.f90:: Wrapping small lon obs to model grid: n = ", n
          WRITE(6,*) "pre  : rlon(n) = ", rlon(n)
          WRITE(6,*) "360 - rlon(n) = ", 360.0 - rlon(n)
      endif

      ! Update the coordinate
      if (abs(lon0 - rlon(n)) < wrapgap ) then
        if (dodebug1) WRITE(6,*) "(e)"
        !STEVE: shift it if it's just outside grid
        if (abs(lon0 - rlon(n)) < wrapgap/2) then
            rlon(n) = lon0
        else
            rlon(n) = lonf
        endif
        ! Increase error to compensate                                 
        oerr(n) = oerr(n)*2
      else
        if (dodebug1) WRITE(6,*) "(f)"
        !Wrap the coordinate
        rlon(n) = REAL(lonf - abs(lon0 - rlon(n)) + wrapgap,r_size)
      endif

      if (dodebug) WRITE(6,*) "post : rlon(n) = ", rlon(n)

    endif
  enddo

  WRITE(6,*) "center_obs_coords:: finished recentering observations."

  if (MAXVAL(rlon) > lonf) then
    WRITE(6,*) "read_obs:: Error: MAX(observation lon, i.e. rlon) > lonf"
    WRITE(6,*) "MAXVAL(rlon) = ", MAXVAL(rlon)
    WRITE(6,*) "lonf = ", lonf
    STOP(22)
  endif
  if (MINVAL(rlon) < lon0) then
    WRITE(6,*) "read_obs:: Error: MIN(observation lon, i.e. rlon) < lon0"
    WRITE(6,*) "MINVAL(rlon) = ", MINVAL(rlon)
    WRITE(6,*) "lon0 = ", lon0
    STOP(23)
  endif

END SUBROUTINE center_obs_coords



END MODULE common_obs_oceanmodel
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           MODULE params_letkf

USE common, ONLY: r_size

IMPLICIT NONE

PUBLIC

!-------------------------------------------------------------------------------
! Ensemble Size
!-------------------------------------------------------------------------------
INTEGER :: nbv=56

!-------------------------------------------------------------------------------
! Details for LETKF localization and quality control
!-------------------------------------------------------------------------------
!STEVE: making these namelist accessible:
INTEGER,SAVE :: nslots=5                  ! number of time slots for 4D-LETKF
INTEGER,SAVE :: nbslot=5 !1               !STEVE: nbslot=1 for testing for GMAO example case. Normal case is nbslot=5 ! basetime slot
REAL(r_size),SAVE :: sigma_obs=720.0d3    !3x Rossby Radius of Deformation at Equ. according to Chelton
REAL(r_size),SAVE :: sigma_obs0=200.0d3   !20x Rossby Radius of Deformation at Pole, according to Chelton
REAL(r_size),SAVE :: sigma_obsv=-1.0d0    !STEVE: use a negative value with option "DO_NO_VERT_LOC"
REAL(r_size),SAVE :: sigma_obst=5.0d0     ! Not using this at the moment
REAL(r_size),SAVE :: gross_error=3.0d0    ! number of standard deviations
! REAL(r_size),PARAMETER :: gross_error=10.0d0 !3.0d0 ! number of standard deviations   (Use for OSSEs)
                                                      ! used to filter out observations
!-------------------------------------------------------------------------------
! LETKF main options
!-------------------------------------------------------------------------------
LOGICAL :: DO_WRITE_ENS_MEAN_SPRD = .false.  ! Indicates whether to write the ensemble mean and spread (fcst and analysis)

!-------------------------------------------------------------------------------
! From letkf_local.f90
!-------------------------------------------------------------------------------

!STEVE: Testing "Vertical Tube" localization:
!       i.e. the localization is not applied vertically
! This provides the benefit that 
! (1) the analysis only has to be computed once
! per horizontal gridpoint, thus providing a nlevX (40X) speedup
! (2) the altimetry, SST, SSH, and bottom pressure (GRACE) can now be applied
! as direct constraints on the water column.
!
! There is precedence for this as in the paper "Reconstructing the Ocean's
! Interior from Surface Data" Wang et al. (2013)
!
!STEVE: making namelist accessible:
LOGICAL :: DO_NO_VERT_LOC=.true. !STEVE: moved to letkf_local.f90 from letkf_tools.f90
INTEGER :: localization_method=1 !1 !(OCEAN) =0 for uniform radius (default), =1 for latitude-dependent

!-------------------------------------------------------------------------------
! From letkf_tools.f90
!-------------------------------------------------------------------------------

! > 0: globally constant covariance inflation
! < 0: 3D inflation values input from a GPV file "infl_mul.grd"
REAL(r_size) :: cov_infl_mul = 1.0d0 !(NO INFLATION) !-1.0d0 => adaptive multiplicative inflation
REAL(r_size) :: sp_infl_add = 0.d0 !additive inflation

!-------------------------------------------------------------------------------
! From common_model.f90
!-------------------------------------------------------------------------------
! For (MLD, assimilate SST down through mixed layer only)
LOGICAL :: DO_MLD = .false.
LOGICAL :: DO_MLD_MAXSPRD = .true.
! For (DRIFTERS)
LOGICAL :: DO_DRIFTERS=.false.
! For (ALTIMETRY)
LOGICAL :: DO_ALTIMETRY=.false.
! For (ALTIMETRY, Sea Level Anomalies)
LOGICAL :: DO_SLA=.false.
! For (ALTIMETRY, Absolute Dynamic Topography)
LOGICAL :: DO_ADT=.false.
! For (TRIPLOAR)
LOGICAL :: DO_TRIPOLAR=.true.
! For (IRREG_GRID) for non-orthogonal/non-rectilinear grids (not fully supported)
LOGICAL :: DO_IRREG_GRID=.false.
! For (Updating model layer thickness)
LOGICAL :: DO_UPDATE_H=.false.

! For letkf_obs.f90
LOGICAL :: DO_QC_MEANDEP=.true.
LOGICAL :: DO_QC_MAXDEP=.true.

END MODULE params_letkf
                                                                                                                                                                  print(F"ERROR: The file for date {c_year} - {c_month} - {(c_day_of_month+1)} doesn't exist: {e}")
                        continue

                    print(F" =============== Working with: {increment_files[increment_file_idx]} ============= ")
                    print(F"Available fields on increment: {read_field_names(increment_paths[increment_file_idx])}")
                    print(F"Available fields on model: {read_field_names(hycom_paths[hycom_file_idx])}")
                    ds = xr.open_dataset(obs_paths[obs_file_idx])
                    print(F"Available fields on observations: {print(list(ds.keys()))}")

                    model_state_np_fields = read_hycom_fields(hycom_paths[hycom_file_idx], fields, layers=layers)
                    increment_np_fields = read_hycom_fields(increment_paths[increment_file_idx], fields, layers=layers)

                    # obs_np_fields = read_netcdf(obs_paths[obs_file_idx], fields_obs, rename_fields=fields)
                    obs_np_fields = read_netcdf(obs_paths[obs_file_idx], fields_obs)

                    # Iterate over the fields defined in PreprocConfig and plot them
                    for idx_field, c_field_name in enumerate(fields):
                        increment_np_c_field = increment_np_fields[c_field_name]
                        nan_indx = increment_np_c_field == 0
                        increment_np_c_field[nan_indx] = np.nan
                        model_state_np_c_field = model_state_np_fields[c_field_name]

                        # diff_increment_vs_fo = increment_np_c_field - model_state_np_c_field
                        # In these 2 cases, we only compute it for the surface layer
                        # diff_obs_vs_hycom = obs_np_c_field - model_state_np_c_field[0]
                        # obs_np_c_field[502,609] - model_state_np_c_field[0][502,609]
                        # diff_obs_vs_da = obs_np_c_field - increment_np_c_field[0]

                        # mse_hycom_vs_da = mse(increment_np_c_field, model_state_np_c_field)
                        # mse_obs_vs_hycom = mse(obs_np_c_field, model_state_np_c_field[0])
                        # mse_obs_vs_da = mse(obs_np_c_field, increment_np_c_field[0])

                        if c_field_name == "thknss":
                            divide = 9806
                            model_state_np_c_field = model_state_np_c_field/divide
                            increment_np_c_field = increment_np_c_field/divide
                        if c_field_name == "srfhgt":
                            inc = increment_np_c_field
                        else:
                            inc = (model_state_np_c_field - increment_np_c_field)

                        # ======================= Only Background state and TSIS increment ==================
                        try:
                            title = F"{c_field_name} {c_year}_{c_month:02d}_{(c_day_of_month+1):02d}"
                            img_viz.plot_3d_data_np([model_state_np_c_field, inc],
                            # img_viz.plot_3d_data_np([model_state_np_c_field, increment_np_c_field],
                                                    var_names=['HYCOM', 'Increment (TSIS)'],
                                                    title=title, file_name_prefix=F'ModelAndIncrement_{c_field_name}_{c_year}_{c_month:02d}_{(c_day_of_month+1):02d}', z_lavels_names=layers,
                                                    flip_data=True, plot_mode=plot_modes[idx_field])
                        except Exception as e:
                            print(F"Failed for field: {c_field_name}: {e}")

                        # # ======================= Only HYCOM, TSIS, Observations ==================
                        # c_obs_field_name = fields_obs[idx_field]
                        # # title = F"{c_obs_field_name}_{c_year}_{c_month:02d}_{(c_day_of_month+1):02d}"
                        # title = F"{(c_day_of_month+1):02d}"
                        # obs_np_c_field = obs_np_fields[c_obs_field_name]
                        # # img_viz.plot_3d_data_np([np.expand_dims(obs_np_c_field, 0), model_state_np_c_field, inc],
                        # img_viz.plot_3d_data_np([np.expand_dims(obs_np_c_field, 0), model_state_np_c_field, np.expand_dims(obs_np_c_field, 0) - model_state_np_c_field, inc],
                        #                         var_names=[F'Obs', 'HYCOM', 'OBS-HYCOM', 'INC'],
                        #                         title=title, file_name_prefix=F'ObservationsModelIncrement_{c_obs_field_name}_{c_year}_{c_month:02d}_{(c_day_of_month+1):02d}', z_lavels_names=layers,
                        #                         flip_data=True, plot_mode=plot_modes[idx_field])

def plot_raw_data(proc_id):
    """
    Makes images of the available data (Free run, DA and Observations)
    :param proc_id:
    :return:
    """
    config = get_preproc_config()
    input_folder_tsis = config[PreprocParams.input_folder_tsis]
    input_folder_forecast = config[PreprocParams.input_folder_hycom]
    input_folder_obs = config[PreprocParams.input_folder_obs]
    output_folder = config[PreprocParams.imgs_output_folder]
    YEARS = config[PreprocParams.YEARS]
    MONTHS = config[PreprocParams.MONTHS]
    fields = config[PreprocParams.fields_names]
    fields_obs = config[PreprocParams.fields_names_obs]
    plot_modes = config[PreprocParams.plot_modes_per_field]
    layers = config[PreprocParams.layers_to_plot]

    img_viz = EOAImageVisualizer(output_folder=output_folder, disp_images=False)

    # Iterate current year
    for c_year in YEARS:
        # Iterate current month
        for c_month in MONTHS:
            try:
                days_of_month, days_of_year = get_days_from_month(c_month)
                # Reads the data (DA, Free run, and observations)
                increment_files, increment_paths = get_hycom_file_name(input_folder_tsis, c_year, c_month)
                hycom_files, hycom_paths = get_hycom_file_name(input_folder_forecast, c_year, c_month)
                obs_files, obs_paths = get_obs_file_names(input_folder_obs, c_year, c_month)
            except Exception as e:
                print(F"Failed to find any file for date {c_year}-{c_month}")
                continue

            # This for is fixed to be able to run in parallel
            for c_day_of_month, c_day_of_year in enumerate(days_of_year):
                if (c_day_of_month % NUM_PROC) == proc_id:
                    # Makes regular expression of the current desired file
                    re_tsis = F'incupd.{c_year}_{c_day_of_year:03d}\S*.a'
                    re_hycom = F'archv.{c_year}_{c_day_of_year:03d}\S*.a'
                    re_obs = F'tsis_obs_ias_{c_year}{c_month:02d}{c_day_of_month+1:02d}\S*.nc'

                    try:
                        # Gets the proper index of the file for the three cases
                        increment_file_idx = [i for i, file in enumerate(increment_files) if re.search(re_tsis, file) != None][0]
                        hycom_file_idx = [i for i, file in enumerate(hycom_files) if re.search(re_hycom, file) != None][0]
                        obs_file_idx = [i for i, file in enumerate(obs_files) if re.search(re_obs, file) != None][0]
                    except Exception as e:
                        print(F"ERROR: The file for date {c_year} - {c_month} - {(c_day_of_month+1)} doesn't exist: {e}")
                        continue

                    print(F" =============== Working with: {increment_files[increment_file_idx]} ============= ")
                    print(F"Available fields on increment: {read_field_names(increment_paths[increment_file_idx])}")
                    increment_np_fields = read_hycom_fields(increment_paths[increment_file_idx], fields, layers=layers)
                    model_state_np_fields = read_hycom_fields(hycom_paths[hycom_file_idx], fields, layers=layers)
                    obs_np_fields = read_netcdf(obs_paths[obs_file_idx], fields_obs, layers=[0], rename_fields=fields)

                    for idx_field, c_field_name in enumerate(fields):
                        increment_np_c_field = increment_np_fields[c_field_name]
                        nan_indx = increment_np_c_field == 0
                        increment_np_c_field[nan_indx] = np.nan
                        model_state_np_c_field = model_state_np_fields[c_field_name]
                        obs_np_c_field = obs_np_fields[c_field_name]

                        # diff_increment_vs_fo = increment_np_c_field - model_state_np_c_field
                        # In these 2 cases, we only compute it for the surface layer
                        # diff_obs_vs_hycom = obs_np_c_field - model_state_np_c_field[0]
                        obs_np_c_field[502,609] - model_state_np_c_field[0][502,609]
                        # diff_obs_vs_da = obs_np_c_field - increment_np_c_field[0]

                        # mse_hycom_vs_da = mse(increment_np_c_field, model_state_np_c_field)
                        # mse_obs_vs_hycom = mse(obs_np_c_field, model_state_np_c_field[0])
                        # mse_obs_vs_da = mse(obs_np_c_field, increment_np_c_field[0])

                        title = F"{c_field_name} {c_year}_{c_month:02d}_{(c_day_of_month+1):02d}"
                        # ======================= Only Fredatae HYCOM, TSIS, Observations ==================
                        img_viz.plot_3d_data_np([np.expand_dims(obs_np_c_field, 0), model_state_np_c_field, increment_np_c_field],
                                                var_names=[F'Observations', 'HYCOM', 'Increment (TSIS)'],
                                                title=title, file_name_prefix=F'Summary_{c_field_name}_{c_year}_{c_month:02d}_{(c_day_of_month+1):02d}', z_lavels_names=layers,
                                                flip_data=True, plot_mode=plot_modes[idx_field])

                        # img_viz.plot_3d_data_np([np.expand_dims(obs_np_c_field, 0), model_state_np_c_field, increment_np_c_field,
                        #                          diff_increment_vs_fo, np.expand_dims(diff_obs_vs_hycom, 0), np.expand_dims(diff_obs_vs_da, 0)],
                        #                         var_names=['Obs', 'HYCOM', 'DA', F'DA-Forecast (mse:{mse_hycom_vs_da:.3f})',
                        #                                    F'Obs-Hycom (mse:{mse_obs_vs_hycom:.3f})',
                        #                                    F'Obs-DA (mse:{mse_obs_vs_da:.3f})'],
                        #                         title=title, file_name_prefix=F'{c_field_name}_{c_year}_{c_month:02d}_{c_day_of_month:02d}', z_lavels_names=layers,
                        #                         flip_data=True, plot_mode=plot_modes[idx_field])

                        # ======================= Only Free HYCOM, TSIS assimilated and the difference ==================
                        # img_viz.plot_3d_data_np([model_state_np_c_field, increment_np_c_field, diff_increment_vs_fo],
                        #                         var_names=['Free', 'TSIS', F'TSIS-Free'],
                        #                         title=title, file_name_prefix=F'0_{c_field_name}_{c_year}_{c_month:02d}_{c_day_of_month:02d}', z_lavels_names=layers,
                        #                         flip_data=True, plot_mode=plot_modes[idx_field])

def compute_consecutive_days_difference():
    """
    Computes the difference between consecutive days on the hycom files.
    :param proc_id:
    :return:
    """
    config = get_preproc_config()
    input_folder_forecast = config[PreprocParams.input_folder_hycom]
    output_folder = config[PreprocParams.imgs_output_folder]
    YEARS = config[PreprocParams.YEARS]
    MONTHS = config[PreprocParams.MONTHS]
    fields = config[PreprocParams.fields_names]
    layers = config[PreprocParams.layers_to_plot]

    img_viz = EOAImageVisualizer(output_folder=output_folder, disp_images=False)

    # Iterate current year
    for c_year in YEARS:
        # Iterate current month
        diff_per_field = {field:[] for field in fields}
        days_with_data = []
        for c_month in MONTHS:
            # Reading the data
            try:
                days_of_month, days_of_year = get_days_from_month(c_month)
                # Reading hycom files
                hycom_files, hycom_paths = get_hycom_file_name(input_folder_forecast, c_year, c_month)
            except Exception as e:
                print(F"Failed to find any file for date {c_year}-{c_month}")
                continue

            # This for is fixed to be able to run in parallel
            for c_day_of_month, c_day_of_year in enumerate(days_of_year):
                print(F"---------- Year {c_year} day: {c_day_of_year} --------------")
                # Makes regular expression of the current desired file
                re_hycom = F'archv.{c_year}_{c_day_of_year:03d}\S*.a'
                re_hycom_prev = F'archv.{c_year}_{(c_day_of_year-1):03d}\S*.a'
                try:
                    # Gets the proper index of the file for the three cases
                    hycom_file_idx = [i for i, file in enumerate(hycom_files) if re.search(re_hycom, file) != None][0]
                    hycom_file_idx_prev = [i for i, file in enumerate(hycom_files) if re.search(re_hycom_prev, file) != None][0]
                except Exception as e:
                    print(F"ERROR: The file for date {c_year} - {c_month} - {c_day_of_month} (and prev day) don't exist: {e}")
                    continue

                days_with_data.append(c_day_of_year)
                model_state_np_fields = read_hycom_fields(hycom_paths[hycom_file_idx], fields, layers=layers)
                model_state_np_fields_prev = read_hycom_fields(hycom_paths[hycom_file_idx_prev], fields, layers=layers)
                # Computes the difference between consecutive days from the desired fields
                for idx_field, c_field_name in enumerate(fields):
                    model_state_np_c_field = model_state_np_fields[c_field_name]
                    model_state_np_c_field_prev = model_state_np_fields_prev[c_field_name]
                    c_diff = np.abs(np.nanmean(model_state_np_c_field_prev - model_state_np_c_field))
                    diff_per_field[c_field_name].append(c_diff)

        # Plots the differences between consecutive days. For all the fields together.
        img_viz.plot_1d_data_np(days_with_data, [diff_per_field[a] for a in diff_per_field.keys()],  title='Difference between days',
                                labels=fields, file_name_prefix='HYCOM_Diff_Between_Days',
                                wide_ratio=4)
        # Plots the differences between consecutive days. Separated by fields
        for field in diff_per_field.keys():
            img_viz.plot_1d_data_np(days_with_data, [diff_per_field[field]],  title=F'Difference between days {field}',
                                    labels=[field], file_name_prefix=F'HYCOM_Diff_Between_Days_{field}',
                                    wide_ratio=4)

def img_generation_hycom(proc_id):
    """
    Makes images of the available data (Free run, DA and Observations)
    :param proc_id:
    :return:
    """
    config = get_preproc_config()
    input_folder_tsis = config[PreprocParams.input_folder_tsis]
    input_folder_forecast = config[PreprocParams.input_folder_hycom]
    input_folder_obs = config[PreprocParams.input_folder_obs]
    output_folder = config[PreprocParams.imgs_output_folder]
    YEARS = config[PreprocParams.YEARS]
    MONTHS = config[PreprocParams.MONTHS]
    fields = config[PreprocParams.fields_names]
    fields_obs = config[PreprocParams.fields_names_obs]
    plot_modes = config[PreprocParams.plot_modes_per_field]
    layers = config[PreprocParams.layers_to_plot]

    img_viz = EOAImageVisualizer(output_folder=output_folder, disp_images=False)

    # Iterate current year
    for c_year in YEARS:
        # Iterate current month
        for c_month in MONTHS:
            try:
                days_of_month, days_of_year = get_days_from_month(c_month)
                # Reads the data (DA, Free run, and observations)
                hycom_files, hycom_paths = get_hycom_file_name(input_folder_forecast, c_year, c_month)
            except Exception as e:
                print(F"Failed to find any file for date {c_year}-{c_month}")
                continue

            # This for is fixed to be able to run in parallel
            for c_day_of_month, c_day_of_year in enumerate(days_of_year):
                if (c_day_of_month % NUM_PROC) == proc_id:
                    # Makes regular expression of the current desired file
                    re_hycom = F'archv.{c_year}_{c_day_of_year:03d}\S*.a'
                    try:
                        # Gets the proper index of the file for the three cases
                        hycom_file_idx = [i for i, file in enumerate(hycom_files) if re.search(re_hycom, file) != None][0]
                    except Exception as e:
                        print(F"ERROR: The file for date {c_year} - {c_month} - {c_day_of_month} doesn't exist: {e}")
                        continue

                    print(F" =============== Working with: {hycom_files[hycom_file_idx]} ============= ")
                    print(F"Available fields: {read_field_names(hycom_paths[hycom_file_idx])}")
                    model_state_np_fields = read_hycom_fields(hycom_paths[hycom_file_idx], fields, layers=layers)
                    for idx_field, c_field_name in enumerate(fields):
                        model_state_np_c_field = model_state_np_fields[c_field_name]
                        title = F"{c_field_name} {c_year}_{c_month:02d}_{(c_day_of_month+1):02d}"
                        # ======================= Only Fredatae HYCOM, TSIS, Observations ==================
                        img_viz.plot_3d_data_np([model_state_np_c_field],
                                                var_names=[F'HYCOM'],
                                                title=title, file_name_prefix=F'HYCOM_{c_field_name}_{c_year}_{c_month:02d}_{c_day_of_month:02d}', z_lavels_names=layers,
                                                flip_data=True, plot_mode=plot_modes[idx_field])

def MSE():
    import matplotlib.pyplot as plt
    import math

    # Computing the MSE between the 'free run and the DA run
    input_folder = '/data/HYCOM/DA_HYCOM_TSIS/preproc'
    years = [2009, 2010, 2011]
    months = range(1,13)
    day_month = 2
    fields = ['srfhgt']
    for year in years:
        for month in months:
            for field in fields:
                try:
                    day_of_year = get_day_of_year_from_month_and_day(month, day_of_month=day_month, year=year)
                    freerun_file = F'/data/COAPS_Net/gleam/abozec/HYCOM/TSIS/IASx0.03/forecast/PIES/{year}{month:02d}/archv.{year}_{day_of_year:03d}_00.a'
                    increment_file = F'/data/COAPS_Net/gleam/dmitry/hycom/TSIS/IASx0.03/output/{year}_PIES/archv.{year}_{day_of_year}_00.a'

                    freerun_data = read_hycom_fields(freerun_file, fields, [0])
                    increment_data = read_hycom_fields(increment_file, fields, [0])
                    not_nan_idx = np.logical_not(np.isnan(np.array(freerun_data[field][0])))

                    fig, axs = plt.subplots(1, 3, squeeze=True, figsize=(16 * 3, 16))
                    axs[0].imshow(freerun_data[field][0])
                    axs[0].set_title(F"Freerun {field}", fontdict={'fontsize': 80})
                    axs[1].imshow(increment_data[field][0])
                    axs[1].set_title(F"DA {field}", fontdict={'fontsize': 80})
                    axs[2].imshow(freerun_data[field][0] - increment_data[field][0])
                    axs[2].set_title(
                        F"Difference MSE ~{mean_squared_error(np.array(increment_data[field][0])[not_nan_idx], np.array(freerun_data[field][0])[not_nan_idx]):0.4f}",
                        fontdict={'fontsize': 80})
                    fig.suptitle(F"{year}_{month}_{field}", fontsize=80)
                    plt.show()
                except Exception as e:
                    print(F"Failed for {year}_{month}_{field}: {e}")
                    continue

def getExtent(lats, lons):
    minLat = np.amin(lats)
    maxLat = np.amax(lats)
    minLon = np.amin(lons)
    maxLon = np.amax(lons)
    bbox = (minLon, maxLon, minLat, maxLat)
    return bbox

def plotMaps1(data, titles, suptitle, lat, lon):
    n = len(titles)
    fs = 12
    fig, axis = plt.subplots(1,n, figsize=(fs*2, fs))
    for i in range(len(titles)):
        # ax = plt.subplot(1, n, i+1, projection=ccrs.PlateCarree())
        ax = plt.subplot(1, n, i+1, projection=ccrs.Mercator())
        ax.coastlines(resolution='50m')  # Draws the coastline
        if i != 2:
            im = ax.imshow(data[i], cmap='jet', vmin=10, vmax=32, extent=getExtent(lat, lon))
        else:
            im = ax.imshow(data[i], cmap='jet', vmin=-4, vmax=4, extent=getExtent(lat, lon))

        # ax.stock_img()  # Draws a basic topography
        # ax.add_feature(cartopy.feature.OCEAN)
        # ax.add_feature(cartopy.feature.LAND, edgecolor='black')
        # ax.add_feature(cartopy.feature.LAKES, edgecolor='black')
        # ax.add_feature(cartopy.feature.RIVERS)

        ax.set_title(titles[i])
        ax.axis('off')

        cbar = fig.colorbar(im, ax=ax, shrink=0.3)
        # cbar.ax.tick_params(labelsize=font_size_cbar)
        # cbar.set_label(self._units, fontsize=font_size_cbar*1.2)
    # fig.suptitle(suptitle)

def visualizeBackgroundIncrementAnalaysis():
    input_folder = '/data/HYCOM/DA_HYCOM_TSIS/preproc'
    output_folder = '/data/HYCOM/DA_HYCOM_TSIS/SUMMARY/AssimilatedData'
    years = [2009]
    fields = ['srfhgt']
    all_files = os.listdir(input_folder)
    model_files = [join(input_folder, x) for x in all_files if x.find('model') != -1]
    obs_files = [join(input_folder, x) for x in all_files if x.find('obs') != -1]
    inc_files = [join(input_folder, x) for x in all_files if x.find('increment') != -1]
    # Sort all of them or they won't match
    inc_files.sort()
    model_files.sort()
    obs_files.sort()

    mvar = "temp" #"srfhgt"
    ovar = "sst" #"ssh"

    var_file = "/data/HYCOM/DA_HYCOM_TSIS/preproc/cov_mat/tops_ias_std.nc"
    data_lat_lon  = read_netcdf(var_file, ['xc', 'yc'])
    lat = data_lat_lon['yc'][:]
    lon = data_lat_lon['xc'][:]

    for i in range(len(model_files)):
        model_data = read_netcdf(model_files[i], [mvar])
        obs_data_m = read_netcdf(obs_files[i], [ovar])
        inc_data = read_netcdf(inc_files[i], [mvar])
        obs_data = model_data[mvar][:].copy()
        no_mask_at = np.logical_not(obs_data_m[ovar][:].mask)
        obs_data[no_mask_at] = obs_data_m[ovar][:][no_mask_at]

        data = np.array([model_data[mvar][:], obs_data, inc_data[mvar][:]])
        plotMaps1(data, ["Background", "Observation", "Increment"], "Title", lat, lon)
        plt.savefig(join(output_folder, F"{i:004d}.png"),bbox_inches='tight')
        # plt.show()

def plotPunctualDataFromObs(ds, title):
    """This function will show the profiles of punctual data as well as the locations"""
    all_vars = ds.variables.keys()
    # print(F"All variables: {all_vars}")
    depths = ds.obs_level
    # groups = ["sla", "sst", "tem", "sal", "den", "thk", "uvl", "vvl"]
    # groups_long_name = ["Sea Level Anomaly", "Sea Surface Temperature", "Temperature", "Salinity", "Density", "Thickness", "U", "V"]
    groups_long_name = ["Temperature", "Salinity", "Density", "Interface Depth"]
    groups_long_name = [F"Field_{x}" for x in range(8)]

    obs_types = ds.obs_typ  # Temp, Saln, Saln, u ?
    obs_groups_present = ds.ob_grp_present
    profiles = ds.val
    tot_profiles = profiles.shape[0]
    err = ds.err
    m_lon_idx = ds.grdj
    m_lat_idx = ds.grdi
    print(obs_groups_present.values)

    lons = ds.lon.values[:,0,0]
    lats = ds.lat.values[:,0,0]
    extent = [-98, -70.40002, 18.09165, 31.9267]

    img_viz = EOAImageVisualizer(output_folder="/home/olmozavala/Desktop/DELETE", disp_images=True)
    img_viz.scatter_coords_map(lons, lats, extent, title=title)

    # colors = ['r', 'g', 'b', 'y', 'c','k', 'm', 'b']
    # for i_group, c_type in enumerate(obs_groups_present):
    #     # c_color = colors[c_type.item()]
    #     c_color = colors[i_group]
    #
    #     fig = plt.figure(figsize=(8,16))
    #     ax1 = fig.add_subplot(111)
    #     # plt.title(F"{groups_long_name[c_type.item()]} - {title}")
    #     plt.title(F"{groups_long_name[i_group]} - {title}")
    #     for c_profile_i in range(tot_profiles):
    #         # c_profile = profiles[c_profile_i, :, i_group]
    #         c_profile = profiles[c_profile_i, :, i_group]
    #         ax1.plot(c_profile, depths, c_color)
    #         ax1.tick_params(axis='x', labelcolor=c_color)
    #         # ax1.invert_yaxis()
    #
    #     plt.show()

if __name__ == '__main__':
    main()
    # visualizeBackgroundIncrementAnalaysis()
    # print("Done!")
    #
    # input_folder = '/data/COAPS_nexsan/people/abozec/TSIS/IASx0.03/obs/qcobs_mdt_gofs/WITH_PIES'
    # all_files = [x for x in os.listdir(input_folder) if x.find("obs") != -1]
    # all_files.sort()
    #
    # for c_file in all_files:
    #     print(F"============ {c_file} ================")
    #     # c_file = "tsis_obs_ias_2009050800.nc"
    #     ds = xr.open_dataset(join(input_folder, c_file))
    #     plotPunctualDataFromObs(ds, c_file)
    #     ds.close()


#-------------------------
    # ds = Dataset(join(input_folder, test_file), "r", format="NETCDF4")
    # all_vars = ds.variables.keys()
    #
    # print(F"All fields:{all_vars}")
    # for c_var_name in all_vars:
    #     c_field = ds[c_var_name]
    #     print(F"Working with field:{c_var_name} with shape= {c_field[:].shape}")
    #     if len(c_field.shape) == 2:
    #         plt.imshow(np.flip(np.flip(c_field[:]),axis=1))
    #     elif len(c_field.shape) == 1:
    #         plt.scatter(range(len(c_field[:])),c_field[:])
    #     else:
    #         print(F"This field has {len(c_field.shape)} dimensions.")
    #
    #
    #     plt.title(c_var_name)
    #     plt.show()
    #     x = 1


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 module kdtree
  !! A lon/lat based kd tree for fast retrieval of points.
  !! Initialization of the tree via "kd_init" creates a 3d tree
  !! with points converted into x/y/z space. Points can then be retrieved
  !! either by a point and max radius (kd_search_radius), or by a point and
  !! the number of desired closest points to return (kd_search_nnearest)
  !!
  !! Derived from Numerical Recipes, 2007
  !! author: Travis Sluka (tsluka@umd.edu)
  
  implicit none
  private

  public :: kd_root, kd_init
  public :: kd_search_radius, kd_search_nnearest


  ! parameters
  ! ------------------------------------------------------------

  integer, parameter :: dp=kind(0.d0)
  !! double definition
  
  integer, parameter :: kd_dim = 3
  !! 3 dimensions, x/y/z
  
  integer, parameter :: task_size = 50
  !! size of the tree division and search job stacks

  integer, parameter :: MINDIV = 10
  !! kd-tree will not bother dividing a box any further if it contains
  !! this many or fewer items. TODO, have this specified in kd_init instead,
  !! different trees might require different values here

  real(dp), parameter :: pi = 4*atan(1.0_dp)
  !! the constant pi
  
  real(dp), parameter :: re = 6371.3d3
  !! radius of earth in meters

  

  ! custom types
  ! ------------------------------------------------------------
  
  type kd_root
     !! wrapper for all the information needed by the kd-tree after
     !! creation and during searching. User shouldnt' have to access
     !! any of these members directly

     integer, pointer :: ptindx(:)
     !! array holding pointers to the lat/lon array indexes, this
     !! is the array that is organized by the creation of the kd tree
     
     type(boxnode), pointer :: boxes(:)
     !! collection of all boxes created for the kd tree

     real(dp), pointer :: pts(:,:)
     !! array of all points stored in the kd tree, in x/y/z form
     
     real(dp), pointer :: pts_ll(:,:)
     !! array of all points stored in the kd tree, in original lon/lat form
  end type kd_root

  
  
  type boxnode
     !! A node for defining each box used by the kd-tree.
     !! The end-user should normally be able to ignore what is in this object

     real(dp) :: lo(kd_dim), hi(kd_dim)
     !! lower and higher bound of this box, in x/y/z space
     
     integer :: mom
     !! index of parent box
     
     integer :: dau1
     !! index of 1st daughter box, or 0 if no daughter

     integer :: dau2
     !! index of 1st daughter box, or 0 if no daughter

     integer :: ptlo
     !! index within "ptindx" of first point contained within thi box

     integer :: pthi
     !! index within "ptindx" of last point contained within thi box     
  end type boxnode



  
contains


  ! public subroutines
  ! ------------------------------------------------------------
  
  subroutine kd_init(root, lons, lats)
    !! Initialize a kd-tree structure given a list of lat/lon pairs

    type(KD_ROOT), intent(out)  :: root
    !! the root node of our kd-tree

    real(dp), intent(in), target :: lats(:)
    !! list of latitudes.
    !! NOTE: this array should not be altered after calling kd_init

    real(dp), intent(in), target :: lons(:)
    !! list of longitudes. These can be within any range.
    !! NOTE: this array should therefore not be altered after calling kd_init

    ! variables used for kd-tree creation loop... to lazy to document what is what, sorry.
    integer :: kk, np, ntmp, n, m, nboxes, nowtask, ptlo, pthi
    integer :: tmom, tdim, jbox
    real(dp), pointer :: cp(:)
    integer, pointer :: hp(:)
    real(dp) :: lo(kd_dim), hi(kd_dim)
    integer :: taskmom(50), taskdim(50)
    real(dp), dimension(2) :: llpt !STEVE: lon/lat point in 2-d array

    ! generate initial unsorted index array
    write (6,*) "Initializing kd-tree with ", size(lons), "locations"
    allocate(root%ptindx(size(lons)))
    do n=1, size(root%ptindx)
       root%ptindx(n) = n
    end do
    
    ! convert lon/lat to an internally stored x/y/z
    allocate(root%pts_ll( size(lons), 2)) 
    allocate(root%pts( size(lons), kd_dim))
    do n=1, size(lons)
       root%pts_ll(n,1) = lons(n)*pi/180.0d0
       root%pts_ll(n,2) = lats(n)*pi/180.0d0       
       llpt = (/lons(n), lats(n)/) !STEVE: created to prevent: forrtl: warning (406): fort: (1): In call to LL2XYZ, an array temporary was created for argument #1
       root%pts(n,:) = ll2xyz( llpt ) ! (/lons(n), lats(n)/) )
    end do

    ! calculate the number of kd boxes needed and create memory for them
    m = 1
    ntmp = size(root%ptindx)
    do while (ntmp > 0)
       ntmp = ishft(ntmp, -1)
       m = ishft(m,1)
    end do
    nboxes = 2*size(root%ptindx)-ishft(m, -1)
    if (m<nboxes) nboxes = m
    nboxes = nboxes - 1
    allocate(root%boxes(nboxes))

    ! initialize the root box, and put its subdivision on the task list
    lo = (/-1e20, -1e20, -1e20/)
    hi = (/ 1e20,  1e20,  1e20/)
    root%boxes(1) = boxnode(lo,hi,0,0,0,1,size(root%ptindx))
    jbox = 1
    taskmom(1) = 1
    taskdim(1) = 0
    nowtask = 1
    
    do while(nowtask > 0)       
       ! get the box sitting on the top of the task list
       tmom = taskmom(nowtask)
       tdim = taskdim(nowtask)
       nowtask = nowtask - 1
       ptlo = root%boxes(tmom)%ptlo
       pthi = root%boxes(tmom)%pthi
       hp => root%ptindx(ptlo:pthi)
       
       ! rotate division among x/y/z coordinates
       cp => root%pts(:,tdim+1)

       ! determine dividing points
       np = pthi - ptlo + 1 ! total points
       kk = (np+1)/2        ! leftmost point of first subdivision

       ! do the array partitioning
       call kd_selecti(kk, hp, cp)

       ! create the daughters and push them onto the stack
       ! list if they need further subdivision
       hi = root%boxes(tmom)%hi
       lo = root%boxes(tmom)%lo
       lo(tdim+1) = cp(hp(kk))
       hi(tdim+1) = lo(tdim+1)
       root%boxes(jbox+1) = boxnode(root%boxes(tmom)%lo, hi, tmom, 0, 0, ptlo, ptlo+kk-1)
       root%boxes(jbox+2) = boxnode(lo, root%boxes(tmom)%hi, tmom, 0, 0, ptlo+kk, pthi)
       jbox = jbox+2
       root%boxes(tmom)%dau1 = jbox-1
       root%boxes(tmom)%dau2 = jbox

       ! subdivide the left further
       if (kk > MINDIV) then
          nowtask = nowtask + 1
          taskmom(nowtask) = jbox-1
          taskdim(nowtask) = mod(tdim+1, kd_dim)
       end if

       ! subdivide the right further
       if (np-kk > MINDIV+2) then
          nowtask = nowtask + 1
          taskmom(nowtask) = jbox
          taskdim(nowtask) = mod(tdim+1, kd_dim)
       end if          
    end do
  end subroutine kd_init



  
  subroutine kd_search_radius(root,  s_point, s_radius, r_points, r_distance, r_num, exact)
    !! searches for all the points within a given radius.
    !! Maximum number of points to search for depends on the size of "r_points" and "r_distance".
    !! Once these arrays are full the subroutine will exit early.
    
    type(kd_root), intent(in) :: root
    !! root node containing all the information about the kd-tree

    real(dp), intent(in) :: s_point(2)
    !! a lon/lat pair, the location of the center of the search

    real(dp), intent(in) :: s_radius
    !! the radius (meters) of the search

    integer, intent(out) :: r_points(:)
    !! the resulting list of points that are found,
    !! this is an array of indexes pointing to the original lat/lon arrays passed into kd_init.
    !! Array should be same size as "r_distance".

    real(dp), intent(out) :: r_distance(:)
    !! the distance (meters) between each found point and the given search point.
    !! Array should be same size as "r_points"

    integer, intent(out) :: r_num
    !! the number of resulting points that were found

    logical, intent(in), optional :: exact
    !! if true, the exact great circle distances will be calculated (slower). Otherwise
    !! the euclidean distances are calculated (faster). The faster method
    !! is close enough for most purposes, especially if the search radius is small
    !! compared to the radius of the earth. Default is False.


    ! local variables
    real(dp) :: s_xyz(kd_dim), r3(kd_dim)
    real(dp) :: r, latr, slatr, clatr, lonr
    integer :: k, i, n, nb, nbold, ntask, jdim, d1, d2
    integer :: task(task_size)
    type(boxnode), pointer :: boxes(:)  

    boxes => root%boxes    

    
    ! some basic checks
    if (size(r_points) /= size(r_distance)) then
       write (*,*) "ERROR: kd_search(), r_points and r_distance must be allocated with same size"
       stop 1
    end if

    ! convert search point to x/y/z
    s_xyz = ll2xyz(s_point)

    ! find the smallest box that completely contains the bounds of the search point
    nb = 1
    jdim = 0
    do while(boxes(nb)%dau1 /= 0)
       nbold = nb
       d1 = boxes(nb)%dau1
       d2 = boxes(nb)%dau2
       if( s_xyz(jdim+1) + s_radius <=  boxes(d1)%hi(jdim+1)) then
          nb = d1
       else if ( s_xyz(jdim+1) - s_radius >= boxes(d2)%lo(jdim+1)) then
          nb = d2
       end if
       jdim = mod(jdim+1, kd_dim)
       if (nb == nbold) exit
    end do

    ! traverse the tree below this starting box, only as needed
    task(1) = nb
    ntask = 1
    r_num = 0

    ! convert search point to radians
    clatr = cos(s_point(2)*pi/180.0)
    slatr = sin(s_point(2)*pi/180.0)
    lonr  = s_point(1) * pi/180.0
    
    do while(ntask /= 0)
       k = task(ntask)
       ntask = ntask - 1

       ! ignore boxes definitely outside the radius       
       i = 0
       do n = 1, kd_dim
          if( (boxes(k)%lo(n) - (s_xyz(n)+s_radius)) * (boxes(k)%hi(n) - (s_xyz(n)-s_radius)) > 0) then
             i = 1
             exit
          end if          
       end do
       if (i == 1) cycle

       if(boxes(k)%dau1 /= 0) then
          ! process child boxes
          task(ntask+1) = boxes(k)%dau1
          task(ntask+2) = boxes(k)%dau2
          ntask = ntask + 2
       else
          ! process points in this box
          do i = boxes(k)%ptlo, boxes(k)%pthi
             n = root%ptindx(i)

             ! calculate distance, either great-circle (slower) or
             ! Euclidean (faster)
             if (present(exact) .and. exact) then
                ! calculate great-circle distance
                r = dist_gc(lonr, clatr, slatr, root%pts_ll(n,1), root%pts_ll(n,2))                
             else
                ! Euclidean distance, should be close enough to great-circle
                ! distance if the search radius is small enough, plus its much
                ! faster. Euclidean distance is smaller than greatcircle, and so more
                ! points will be included here
                r = dist_euc(s_xyz, root%pts(n,:))
             end if

             
             ! a new point was found
             if ( r <= s_radius) then
                !make sure there's room for the new found point                
                if (r_num == size(r_points)) then
                   write (*,*) "ERROR: more points were found than there was room for in kd_search().",&
                        "Increase the size of the r_points and r_distance arrays"
                   return 
                end if

                ! add the obs
                r_num = r_num + 1
                r_points(r_num) = n
                r_distance(r_num) = r
             end if
             
          end do
       end if
    end do
  end subroutine kd_search_radius

  

  subroutine kd_search_nnearest(root,  s_point, s_num, r_points, r_distance, r_num, exact)
    !! selects the "s_num" points in the kd tree that are nearest the search point.
    !!
    
    type(kd_root), intent(in) :: root
    !! root node containing all the information about the kd-tree

    real(dp), intent(in) :: s_point(2)
    !! a lon/lat pair, the location of the center of the search

    integer, intent(in) :: s_num
    !! the max number of points to find,
    
    integer, intent(out) :: r_points(:)
    !! the resulting list of points that are found,
    !! this is an array of indexes pointing to the original lat/lon arrays passed into kd_init

    real(dp), intent(out) :: r_distance(:)
    !! the distance (meters) between each found point and the given search point

    integer, intent(out) :: r_num
    !! the number of resulting points that were found

    logical, intent(in), optional :: exact
    !! if true, the exact great circle distances will be calculated (slower). Otherwise
    !! the euclidean distances are calculated (faster). The faster method
    !! is close enough for most purposes, especially if the search radius is small
    !! compared to the radius of the earth. Default is False.


    real(dp) :: dn(s_num)
    !! heap, containing distances to points
    
    integer  :: nn(s_num)
    !! array if point indexes, paired with heap array entries
    
    integer :: kp, i, n, ntask, k
    real(dp) :: d
    real(dp) :: s_xyz(kd_dim), r3(kd_dim)
    integer :: task(task_size)
    real(dp) :: latr, slatr, clatr, lonr

    ! set all entries in the heap to a really big number
    dn = 1e20
    
    ! convert search point to xyz
    s_xyz = ll2xyz(s_point)    
    
    ! find the smallest mother box with enough points to initialize the heap
    kp = kd_locate(root, s_xyz)
    do while(root%boxes(kp)%pthi-root%boxes(kp)%ptlo < s_num)
       kp = root%boxes(kp)%mom
    end do

    ! convert search point to radians
    clatr = cos(s_point(2)*pi/180.0)
    slatr = sin(s_point(2)*pi/180.0)
    lonr  = s_point(1) * pi/180.0
    
    ! initialize the heap with the "s_num" closest points
    do i = root%boxes(kp)%ptlo, root%boxes(kp)%pthi
       n = root%ptindx(i)

       ! calculate distance to point
       if (present(exact) .and. exact) then
          ! great cicle distance (slower)
          d = dist_gc(lonr, clatr, slatr, root%pts_ll(n,1), root%pts_ll(n,2))
       else
          ! euclidean distance (faster)
          d = dist_euc( s_xyz, root%pts(n,:))
       end if

       ! if a closer point was found
       if (d < dn(1) ) then
          dn(1) = d
          nn(1) = n
          if (s_num > 1) call sift_down(dn, nn)
       end if
    end do
       
    ! traverse the tree opening possibly better boxes
    task(1) = 1
    ntask = 1
    do while (ntask /= 0)
       k = task(ntask)
       ntask = ntask - 1

       !dont reuse the box used to initialize the heap
       if (k == kp) cycle

       ! calculate min distance to point (via euclidean distance)
       ! this is still okay even if "exact" is true and we need to
       ! calculate great-circle distance for the points
       d = dist_box(root%boxes(k), s_xyz)
       
       if (d < dn(1)) then
          ! found a box with points potentially closer
          if (root%boxes(k)%dau1 /= 0) then
             ! put child boxes on task list
             task(ntask+1) = root%boxes(k)%dau1
             task(ntask+2) = root%boxes(k)%dau2
             ntask = ntask + 2
          else
             ! process points in this box
             do i=root%boxes(k)%ptlo, root%boxes(k)%pthi
                n = root%ptindx(i)

                ! calculate distance
                if (present(exact) .and. exact) then
                   ! great circle distance
                   d = dist_gc(lonr, clatr, slatr, root%pts_ll(n,1), root%pts_ll(n,2))
                else
                   ! euclidean distance
                   d = dist_euc(root%pts(n,:), s_xyz)
                end if
                
                if (d < dn(1)) then
                   ! found a closer point, add it to the heap
                   dn(1) = d
                   nn(1) = n
                   if (s_num > 1) call sift_down(dn, nn)
                end if
             end do
          end if

       end if
    end do

    ! prepare output
    r_num = s_num
    ! TODO, handle situations where number of points found are less than number requested
    do n=1,s_num
       r_points(n) = nn(n)
       r_distance(n) = dn(n)
    end do

  end subroutine kd_search_nnearest



  ! private subroutines and functions
  ! ------------------------------------------------------------
  
  pure function kd_locate(root, point)
    !! given an arbitrary point, return the index of which kdtree box it is in
    
    type(kd_root), intent(in) :: root
    !! kd tree to search in
    
    real(dp), intent(in) :: point(3)
    !! point to search for, in x/y/z space
    
    integer :: kd_locate
    !! index of resulting kd tree box

    integer :: d1, jdim, nb
    nb = 1
    jdim = 0

    do while (root%boxes(nb)%dau1 /= 0)
       d1 = root%boxes(nb)%dau1
       if (point(jdim+1) <= root%boxes(d1)%hi(jdim+1)) then
          nb=d1
       else
          nb=root%boxes(nb)%dau2
       end if

       jdim = mod(jdim+1, kd_dim)       
    end do

    kd_locate = nb    
  end function kd_locate


  
  pure subroutine kd_selecti(k, indx, arr)
    !! permutes indx[1...n] to make
    !!  arr[indx[1..k-1]] <= arr[indx[k]] <= arr[indx[k+1,n]]
    !!   the array "arr" is not modified

    integer, intent(in) :: k
    integer, intent(inout) :: indx(:)
    real(dp),intent(in) :: arr(:)

    integer :: i,ia,ir,j,l,mid
    real(dp) :: a

    ! pulled from numerical recipes, 2007
    l=1
    ir=size(indx)
    do while(.true.)
       if (ir <= l+1) then
          if (ir == l+1 .and. arr(indx(ir)) < arr(indx(l))) &
               call swap(indx(l), indx(ir))
          exit
       else
          mid = (l+ir) / 2
          call swap(indx(mid), indx(l+1))
          if (arr(indx(l)) > arr(indx(ir)))   call swap(indx(l),indx(ir))
          if (arr(indx(l+1)) > arr(indx(ir))) call swap(indx(l+1),indx(ir))
          if (arr(indx(l)) > arr(indx(l+1)))  call swap(indx(l),indx(l+1))
          i=l+1
          j=ir
          ia=indx(l+1)
          a=arr(ia)
          do while(.true.)
             i = i +1
             do while(arr(indx(i)) < a)
                i = i + 1
             end do
             j = j-1
             do while(arr(indx(j)) > a)
                j = j - 1
             end do
             if (j < i) exit
             call swap(indx(i), indx(j))
          end do
          indx(l+1)=indx(j)
          indx(j)=ia
          if (j >= k) ir=j-1
          if (j<= k) l = i
       end if
    end do
  end subroutine kd_selecti


  
  pure subroutine swap(a1, a2)
    !! Convenience function to swap two array indices
    integer, intent(inout) :: a1, a2
    integer :: a
    a = a1
    a1 = a2
    a2 = a
  end subroutine swap

  
  
  pure function ll2xyz(ll)
    !! convert a point in longitude/latitude into x/y/z coordinates
    
    real(dp), intent(in) :: ll(2)
    !! logitude/latidue
    
    real(dp) :: ll2xyz(3)
    !! resulting x/y/z (meters)

    ll2xyz(1) = re * cos(ll(2)*pi/180.0) * cos(ll(1)*pi/180.0)
    ll2xyz(2) = re * cos(ll(2)*pi/180.0) * sin(ll(1)*pi/180.0)
    ll2xyz(3) = re * sin(ll(2)*pi/180.0)
    
  end function ll2xyz



  pure function dist_euc(p1, p2)
    !! calculate the euclidean distance between two points

    real(dp), intent(in) :: p1(:), p2(:)

    real(dp) :: dist_euc

    integer :: n
    real(dp) :: r1, r2

    r1 = 0.0d0
    do n=1,size(p1)
       r2 = p1(n) - p2(n)
       r1 = r1 + (r2*r2)
    end do
    dist_euc = sqrt(r1)
  end function dist_euc



  pure function dist_gc(lon1, clat1, slat1, lon2, lat2)
    !! calculate the great circle distance between two points
    real(dp), intent(in) :: lon1, clat1, slat1, lon2, lat2
    real(dp) :: dist_gc
    
    dist_gc = re * acos(min(slat1*sin(lat2) + clat1*cos(lat2) * cos( (lon2-lon1)), 1.0d0))
    
  end function dist_gc


  
  pure function dist_box(box, p)
    !! if point is inside the box, return 0. Otherwise,
    !! caculate the distance between a point and closest spot on the box

    type(boxnode), intent(in) :: box

    real(dp), intent(in) :: p(kd_dim)

    real(dp) :: dist_box, dd
    integer :: n
    
    dd = 0
    do n=1,kd_dim
       if (p(n) < box%lo(n)) dd = dd + (p(n) - box%lo(n))*(p(n) - box%lo(n))
       if (p(n) > box%hi(n)) dd = dd + (p(n) - box%hi(n))*(p(n) - box%hi(n))
    end do
    
    dist_box = sqrt(dd)
    
  end function dist_box

             
  
  pure subroutine sift_down(heap, ndx)
    !! maintain a heap by sifting the first item down into its
    !! proper place. "ndx" is altered along with "heap"
    real(dp), intent(inout) :: heap(:)
    integer, intent(inout)  :: ndx(:)

    integer :: n, nn, j, jold, ia
    real(dp) :: a

    nn = size(heap)
    n = nn
    a = heap(1)
    ia = ndx(1)
    jold = 1
    j = 2
    do while (j <= n)
       if (j < n .and. heap(j) < heap(j+1)) j = j+1
       if (a >= heap(j)) exit
       heap(jold) = heap(j)
       ndx(jold) = ndx(j)
       jold = j
       j = 2*j
    end do
    heap(jold) = a
    ndx(jold) = ia        
  end subroutine sift_down
  
end module kdtree

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ank+1 + (l-1)*nprocs
    if (im <= nens) then
      WRITE(filename(1:7),'(A4,I3.3)') infile,im
      WRITE(6,'(A,I3.3,2A)') 'In common_mpi_hycom.f90::read_ens_mpi, MYRANK ',myrank,' is reading a file ',filename
      CALL read_restart(filename,v3dg,v2dg,2) !STEVE: 20150317, trying this out...
    endif

    mstart = 1 + (l-1)*nprocs
    mend = MIN(l*nprocs, nens)
    CALL scatter_grd_mpi_alltoall(mstart,mend,nens,v3dg,v2dg,v3d,v2d)

  enddo

  ! Deallocate arrays
  if (ALLOCATED(v3dg)) then
    DEALLOCATE(v3dg)
  endif
  if (ALLOCATED(v2dg)) then
    DEALLOCATE(v2dg)
  endif

END SUBROUTINE read_ens_mpi


SUBROUTINE write_ens_mpi(infile,nens,v3d,v2d)
!===============================================================================
! Write ensemble data after collecting data from processes
!===============================================================================
  CHARACTER(4),INTENT(IN) :: infile
  INTEGER,INTENT(IN) :: nens    !(total number of ensemble members)
  REAL(r_size),INTENT(IN) :: v3d(nij1,nlev,nens,nv3d)
  REAL(r_size),INTENT(IN) :: v2d(nij1,nens,nv2d)
  REAL(r_sngl), ALLOCATABLE :: v3dg(:,:,:,:) !(nlon,nlat,nlev,nv3d)
  REAL(r_sngl), ALLOCATABLE :: v2dg(:,:,:) !(nlon,nlat,nv2d)
  INTEGER :: l,n,ll,im
  CHARACTER(slen) :: filename='file000'
  INTEGER :: i,j,k,m !STEVE: for debugging
  LOGICAL :: dodebug = .false.
  INTEGER :: mstart,mend

  if (dodebug) WRITE(6,*) "write_ens_mpi:: begin..."

  ALLOCATE(v3dg(nlon,nlat,nlev,nv3d))
  ALLOCATE(v2dg(nlon,nlat,nv2d))

  ll = CEILING(REAL(nens)/REAL(nprocs))

  if (dodebug) WRITE(6,*) "REAL(nens) = ", REAL(nens)
  if (dodebug) WRITE(6,*) "REAL(nprocs) = ", REAL(nprocs)
  if (dodebug) WRITE(6,*) "ll = CEILING(REAL(nens)/REAL(nprocs)) = ", ll

  do l=1,ll

    mstart = 1 + (l-1)*nprocs
    mend = MIN(l*nprocs, nens)

    if (dodebug) WRITE(6,*) "mstart = ", mstart
    if (dodebug) WRITE(6,*) "mend   = ", mend

    CALL gather_grd_mpi_alltoall(mstart,mend,nens,v3d,v2d,v3dg,v2dg)

    im = myrank+1 + (l-1)*nprocs

    if (dodebug) WRITE(6,*) "myrank   = ", myrank
    if (dodebug) WRITE(6,*) "nprocs   = ", nprocs
    if (dodebug) WRITE(6,*) "im = myrank+1 + (l-1)*nprocs = ", im

    if (im <= nens) then
      WRITE(filename(1:7),'(A4,I3.3)') infile,im
      if (dodebug) WRITE(6,'(A,I3.3,2A)') 'MYRANK ',myrank,' is writing file: ',filename

      if (dodebug) WRITE(6,*) "write_ens_mpi:: Calling write_restart..."
      CALL write_restart(filename,v3dg,v2dg)
      if (dodebug) WRITE(6,*) "write_ens_mpi:: Finished calling write_restart."

    endif

  enddo

  ! Deallocate arrays
  if (ALLOCATED(v3dg)) then
    DEALLOCATE(v3dg)
  endif
  if (ALLOCATED(v2dg)) then
    DEALLOCATE(v2dg)
  endif

  if (dodebug) WRITE(6,*) "write_ens_mpi:: conclude."

END SUBROUTINE write_ens_mpi


SUBROUTINE write_ens_mpi_grd(infile,nens,v3d,v2d)
!===============================================================================
! STEVE: For debugging the grid
!===============================================================================
  CHARACTER(4),INTENT(IN) :: infile
  INTEGER,INTENT(IN) :: nens
  REAL(r_size),INTENT(IN) :: v3d(nij1,nlev,nens,nv3d)
  REAL(r_size),INTENT(IN) :: v2d(nij1,nens,nv2d)
  REAL(r_sngl), ALLOCATABLE :: v3dg(:,:,:,:) !(nlon,nlat,nlev,nv3d)
  REAL(r_sngl), ALLOCATABLE :: v2dg(:,:,:) !(nlon,nlat,nv2d)
  INTEGER :: l,n,ll,im
  CHARACTER(slen) :: filename='file000.grd'
  INTEGER :: i,j,k,m !STEVE: for debugging
  LOGICAL :: dodebug = .false.

  ALLOCATE(v3dg(nlon,nlat,nlev,nv3d))
  ALLOCATE(v2dg(nlon,nlat,nv2d))

  ll = CEILING(REAL(nens)/REAL(nprocs))
  do l=1,ll
    do n=0,nprocs-1
      im = n+1 + (l-1)*nprocs
      if (im <= nens) then
        CALL gather_grd_mpi(n,v3d(:,:,im,:),v2d(:,im,:),v3dg,v2dg)
      endif
    enddo

    im = myrank+1 + (l-1)*nprocs
    if (im <= nens) then
      WRITE(filename(1:7),'(A4,I3.3)') infile,im
      WRITE(6,'(A,I3.3,2A)') 'MYRANK ',myrank,' is writing a file ',filename

      !STEVE: debug
      if (dodebug) print *, "common_mpi_hycom.f90::write_ens_mpi:: MAXVAL(ABS(v3dg(:,:,:,iv3d_t))) = ", MAXVAL(ABS(v3dg(:,:,:,iv3d_t)))

      CALL write_grd(filename,v3dg,v2dg)
    endif

  enddo

  ! Deallocate arrays
  if (ALLOCATED(v3dg)) then
    DEALLOCATE(v3dg)
  endif
  if (ALLOCATED(v2dg)) then
    DEALLOCATE(v2dg)
  endif

END SUBROUTINE write_ens_mpi_grd


pure SUBROUTINE grd_to_buf(grd,buf)
!===============================================================================
! gridded data -> buffer
!===============================================================================
  REAL(r_sngl),INTENT(IN) :: grd(nlon,nlat)
  REAL(r_sngl),INTENT(OUT) :: buf(nij1max,nprocs)
  INTEGER :: i,j,m,ilon,ilat

  do m=1,nprocs
    do i=1,nij1node(m)
      j = m-1 + nprocs * (i-1)
      ilon = MOD(j,nlon) + 1
      ilat = (j-ilon+1) / nlon + 1
      buf(i,m) = grd(ilon,ilat)
    enddo
  enddo

END SUBROUTINE grd_to_buf


pure SUBROUTINE buf_to_grd(buf,grd)
!-----------------------------------------------------------------------
! buffer -> gridded data
!-----------------------------------------------------------------------
  REAL(r_sngl),INTENT(IN) :: buf(nij1max,nprocs)
  REAL(r_sngl),INTENT(OUT) :: grd(nlon,nlat)
  INTEGER :: i,j,m,ilon,ilat

  do m=1,nprocs
    do i=1,nij1node(m)
      j = m-1 + nprocs * (i-1)
      ilon = MOD(j,nlon) + 1
      ilat = (j-ilon+1) / nlon + 1
      grd(ilon,ilat) = buf(i,m)
    enddo
  enddo

END SUBROUTINE buf_to_grd


SUBROUTINE write_ensmspr_mpi(infile,nens,v3d,v2d)
  USE hycom_io, ONLY: hycom_undef
  IMPLICIT NONE
!-----------------------------------------------------------------------
! STORING DATA (ensemble mean and spread)
!-----------------------------------------------------------------------
  CHARACTER(4),INTENT(IN) :: infile
  INTEGER,INTENT(IN) :: nens
  REAL(r_size),INTENT(IN) :: v3d(nij1,nlev,nens,nv3d)
  REAL(r_size),INTENT(IN) :: v2d(nij1,nens,nv2d)
  REAL(r_size), ALLOCATABLE :: v3dm(:,:,:) !(nij1,nlev,nv3d)
  REAL(r_size), ALLOCATABLE :: v2dm(:,:) !(nij1,nv2d)
  REAL(r_size), ALLOCATABLE :: v3ds(:,:,:) !(nij1,nlev,nv3d)
  REAL(r_size), ALLOCATABLE :: v2ds(:,:) !(nij1,nv2d)
  REAL(r_sngl), ALLOCATABLE :: v3dg(:,:,:,:) !(nlon,nlat,nlev,nv3d)
  REAL(r_sngl), ALLOCATABLE :: v2dg(:,:,:) !(nlon,nlat,nv2d)
  INTEGER :: cnt3d(nij1,nlev,nv3d)
  INTEGER :: cnt2d(nij1,nv2d)
  INTEGER :: i,k,m,n,j,l,ll,im,mstart,mend
  CHARACTER(11) :: filename='file000.grd'

  ALLOCATE(v3dm(nij1,nlev,nv3d),v2dm(nij1,nv2d))
  ALLOCATE(v3ds(nij1,nlev,nv3d),v2ds(nij1,nv2d))
  ALLOCATE(v3dg(nlon,nlat,nlev,nv3d),v2dg(nlon,nlat,nv2d))

  CALL ensmean_grd(nens,nij1,v3d,v2d,v3dm,v2dm)

! ll = CEILING(REAL(nens)/REAL(nprocs))
! do l=1,ll
!   mstart = 1 + (l-1)*nprocs
!   mend = MIN(l*nprocs, nens)
!   CALL gather_grd_mpi_alltoall(mstart,mend,nens,v3d,v2d,v3dg,v2dg)
! ENDDO
  CALL gather_grd_mpi(0,v3dm,v2dm,v3dg,v2dg)

  if (myrank == 0) then
    WRITE(filename(1:7),'(A4,A3)') infile,'_me'
    WRITE(6,'(A,I3.3,2A)') 'write_ensmspr_mpi::MYRANK ',myrank,' is writing a file ',filename
    CALL write_grd(filename,v3dg,v2dg)
  endif


  !STEVE: make sure that the members are all defined at each layer
  !       where the computation is made. Otherwise, 'ignore' the layer.
  v3ds = 0.0d0
  cnt3d = 0
  do n=1,nv3d
    do k=1,nlev
      do i=1,nij1
        do m=1,nens
          if (v3d(i,k,m,n) < hycom_undef) then
            v3ds(i,k,n) = v3ds(i,k,n) + (v3d(i,k,m,n)-v3dm(i,k,n))**2
            cnt3d(i,k,n) = cnt3d(i,k,n) + 1
          endif
        enddo
        ! Just in case only 1 layer has data:
        if (cnt3d(i,k,n) > 1) then
          v3ds(i,k,n) = SQRT(v3ds(i,k,n) / REAL(cnt3d(i,k,n)-1,r_size))
        elseif (cnt3d(i,k,n)==1) then
          v3ds(i,k,n) = 0.0d0
        else
          v3ds(i,k,n) = hycom_undef
        endif
      enddo
    enddo
  enddo

  v2ds = 0.0d0
  cnt2d = 0
  do n=1,nv2d
    do i=1,nij1
      do m=1,nens
        if (v2d(i,m,n) < hycom_undef) then
          v2ds(i,n) = v2ds(i,n) + (v2d(i,m,n)-v2dm(i,n))**2
          cnt2d(i,n) = cnt2d(i,n) + 1
        endif
      enddo
      ! Just in case only 1 layer has data:
      if (cnt2d(i,n) > 1) then
        v2ds(i,n) = SQRT(v2ds(i,n) / REAL(cnt2d(i,n)-1,r_size))
      elseif (cnt2d(i,n)==1) then
        v2ds(i,n) = 0.0d0
      else
        v2ds(i,n) = hycom_undef
      endif
    enddo
  enddo

! do l=1,ll
!   mstart = 1 + (l-1)*nprocs
!   mend = MIN(l*nprocs, nens)
!   CALL gather_grd_mpi_alltoall(mstart,mend,nens,v3d,v2d,v3dg,v2dg)
! ENDDO
  CALL gather_grd_mpi(0,v3ds,v2ds,v3dg,v2dg)

  if (myrank == 0) then
    WRITE(filename(1:7),'(A4,A3)') infile,'_sp'
    WRITE(6,'(A,I3.3,2A)') 'MYRANK ',myrank,' is writing a file ',filename
    CALL write_grd(filename,v3dg,v2dg)
  endif

  ! Deallocate arrays
  if (ALLOCATED(v3dm)) then
    DEALLOCATE(v3dm)
  endif
  if (ALLOCATED(v2dm)) then
    DEALLOCATE(v2dm)
  endif
  if (ALLOCATED(v3ds)) then
    DEALLOCATE(v3ds)
  endif
  if (ALLOCATED(v2ds)) then
    DEALLOCATE(v2ds)
  endif
  if (ALLOCATED(v3dg)) then
    DEALLOCATE(v3dg)
  endif
  if (ALLOCATED(v2dg)) then
    DEALLOCATE(v2dg)
  endif

END SUBROUTINE write_ensmspr_mpi


SUBROUTINE scatter_grd_mpi_alltoall(mstart,mend,nens,v3dg,v2dg,v3d,v2d)
!-----------------------------------------------------------------------
! Scatter gridded data using MPI_ALLTOALL(V) (mstart~mend -> all)
!-----------------------------------------------------------------------
  INTEGER,INTENT(IN) :: mstart,mend,nens
  REAL(r_sngl),INTENT(IN) :: v3dg(nlon,nlat,nlev,nv3d)
  REAL(r_sngl),INTENT(IN) :: v2dg(nlon,nlat,nv2d)
  REAL(r_size),INTENT(OUT) :: v3d(nij1,nlev,nens,nv3d)
  REAL(r_size),INTENT(OUT) :: v2d(nij1,nens,nv2d)
  REAL(r_sngl),ALLOCATABLE :: bufs3(:,:,:) , bufr3(:,:,:)
  REAL(r_sngl),ALLOCATABLE :: bufs2(:,:)   , bufr2(:,:)
  INTEGER :: k,n,m,mcount,ierr
  INTEGER :: ns(nprocs),nst(nprocs),nr(nprocs),nrt(nprocs)
  LOGICAL :: dodebug = .false.

  mcount = mend - mstart + 1
  if (mcount > nprocs .OR. mcount <= 0) STOP

  if (dodebug) WRITE(6,*) "ALLOCATE bufs3,bufr3,bufs2,bufr2..."
  ALLOCATE( bufs3(nij1max,nlev,nprocs) , bufr3(nij1max,nlev,mcount) )
  ALLOCATE( bufs2(nij1max,nprocs)    , bufr2(nij1max,mcount) )

  if (dodebug) WRITE(6,*) "Cycling n=1,nv3d..."
  do n=1,nv3d
    if (dodebug) WRITE(6,*) "n = ",n
    if (myrank < mcount) then
      do k=1,nlev
        if (dodebug) WRITE(6,*) "grd_to_buf :: k = ", k
        CALL grd_to_buf(v3dg(:,:,k,n),bufs3(:,k,:)) !,nlon,nlat,nij1max,nij1node)
      enddo
    endif

    if (dodebug) WRITE(6,*) "==MPI_BARRIER=="
    CALL MPI_BARRIER(MPI_COMM_WORLD,ierr)
    if (mcount == nprocs) then
      if (dodebug) WRITE(6,*) "==MPI_ALLTOALL=="
      CALL MPI_ALLTOALL(bufs3, nij1max*nlev, MPI_REAL, &
                        bufr3, nij1max*nlev, MPI_REAL, MPI_COMM_WORLD, ierr)
    else
      if (dodebug) WRITE(6,*) "set_alltoallv_counts..."
      CALL set_alltoallv_counts(mcount,nij1max*nlev,nr,nrt,ns,nst)
      if (dodebug) WRITE(6,*) "==MPI_ALLTOALLV=="
      CALL MPI_ALLTOALLV(bufs3, ns, nst, MPI_REAL, &
                         bufr3, nr, nrt, MPI_REAL, MPI_COMM_WORLD, ierr)
    endif

    do m = mstart,mend
      do k=1,nlev
         if (dodebug) WRITE(6,*) "m,k,n = ",m,k,n
         if (dodebug) WRITE(6,*) "Assigning v3d(:,k,m,n) = REAL(bufr3(1:nij1,k,m-mstart+1),r_size)"
         if (dodebug) WRITE(6,*) "nij1,m-mstart+1 = ", nij1,m-mstart+1
         v3d(:,k,m,n) = REAL(bufr3(1:nij1,k,m-mstart+1),r_size)
      END  DO
    enddo
  enddo

  if (dodebug) WRITE(6,*) "Cycling n=1,nv2d..."
  do n=1,nv2d
    if (myrank < mcount) then
      if (dodebug) WRITE(6,*) "grd_to_buf :: 2D"
      CALL grd_to_buf(v2dg(:,:,n),bufs2(:,:)) !,nlon,nlat,nij1max,nij1node)
    endif

    if (dodebug) WRITE(6,*) "==MPI_BARRIER=="
    CALL MPI_BARRIER(MPI_COMM_WORLD,ierr)
    if (mcount == nprocs) then
      if (dodebug) WRITE(6,*) "==MPI_ALLTOALL=="
      CALL MPI_ALLTOALL(bufs2, nij1max, MPI_REAL, &
                        bufr2, nij1max, MPI_REAL, MPI_COMM_WORLD, ierr)
    else
      if (dodebug) WRITE(6,*) "set_alltoallv_counts..."
      CALL set_alltoallv_counts(mcount,nij1max,nr,nrt,ns,nst)
      if (dodebug) WRITE(6,*) "==MPI_ALLTOALLV=="
      CALL MPI_ALLTOALLV(bufs2, ns, nst, MPI_REAL, &
                         bufr2, nr, nrt, MPI_REAL, MPI_COMM_WORLD, ierr)
    endif

    do m = mstart,mend
      if (dodebug) WRITE(6,*) "m,n = ", m,n
      if (dodebug) WRITE(6,*) "Assigning v2d(:,m,n) = REAL(bufr2(1:nij1,m-mstart+1),r_size)"
      if (dodebug) WRITE(6,*) "nij1,m-mstart+1 = ", nij1,m-mstart+1
      v2d(:,m,n) = REAL(bufr2(1:nij1,m-mstart+1),r_size)
    enddo
  enddo

  if (dodebug) WRITE(6,*) "==MPI_BARRIER=="
  CALL MPI_BARRIER(MPI_COMM_WORLD,ierr)

  ! Deallocate arrays
  if (ALLOCATED(bufr3)) then
    DEALLOCATE(bufr3)
  endif
  if (ALLOCATED(bufr2)) then
    DEALLOCATE(bufr2)
  endif
  if (ALLOCATED(bufs3)) then
    DEALLOCATE(bufs3)
  endif
  if (ALLOCATED(bufs2)) then
    DEALLOCATE(bufs2)
  endif

END SUBROUTINE scatter_grd_mpi_alltoall


SUBROUTINE gather_grd_mpi_alltoall(mstart,mend,nens,v3d,v2d,v3dg,v2dg)
!-----------------------------------------------------------------------
! Gather gridded data using MPI_ALLTOALL(V) (all -> mstart~mend)
!-----------------------------------------------------------------------
  INTEGER,INTENT(IN) :: mstart,mend,nens
  REAL(r_size),INTENT(IN) :: v3d(nij1,nlev,nens,nv3d)
  REAL(r_size),INTENT(IN) :: v2d(nij1,nens,nv2d)
  REAL(r_sngl),INTENT(OUT) :: v3dg(nlon,nlat,nlev,nv3d)
  REAL(r_sngl),INTENT(OUT) :: v2dg(nlon,nlat,nv2d)
  REAL(r_sngl),ALLOCATABLE :: bufs3(:,:,:) , bufr3(:,:,:)
  REAL(r_sngl),ALLOCATABLE :: bufs2(:,:)   , bufr2(:,:)
  INTEGER :: k,n,m,mcount,ierr
  INTEGER :: ns(nprocs),nst(nprocs),nr(nprocs),nrt(nprocs)

  mcount = mend - mstart + 1
  if (mcount > nprocs .OR. mcount <= 0) STOP

  ALLOCATE( bufs3(nij1max,nlev,mcount) , bufr3(nij1max,nlev,nprocs) )
  ALLOCATE( bufs2(nij1max,mcount)    , bufr2(nij1max,nprocs) )

  !-----------------------------------------------------------------------------
  ! Process 3D variables
  !-----------------------------------------------------------------------------
  do n=1,nv3d
    do m = mstart,mend
      do k=1,nlev
        bufs3(1:nij1,k,m-mstart+1) = REAL(v3d(:,k,m,n),r_sngl)
      enddo
    enddo

    CALL MPI_BARRIER(MPI_COMM_WORLD,ierr)
    if (mcount == nprocs) then
      CALL MPI_ALLTOALL(bufs3, nij1max*nlev, MPI_REAL, &
                        bufr3, nij1max*nlev, MPI_REAL, MPI_COMM_WORLD, ierr)
    else
      CALL set_alltoallv_counts(mcount,nij1max*nlev,ns,nst,nr,nrt)
      CALL MPI_ALLTOALLV(bufs3, ns, nst, MPI_REAL, &
                         bufr3, nr, nrt, MPI_REAL, MPI_COMM_WORLD, ierr)
    endif

    if (myrank < mcount) then
      do k=1,nlev
        CALL buf_to_grd(bufr3(:,k,:),v3dg(:,:,k,n))
      enddo
    endif

  enddo

  !-----------------------------------------------------------------------------
  ! Process 2D variables
  !-----------------------------------------------------------------------------
  do n=1,nv2d
    do m = mstart,mend
      do k=1,nlev
        bufs2(1:nij1,m-mstart+1) = REAL(v2d(:,m,n),r_sngl)
      enddo
    enddo

    CALL MPI_BARRIER(MPI_COMM_WORLD,ierr)
    if (mcount == nprocs) then
      CALL MPI_ALLTOALL(bufs2, nij1max, MPI_REAL, &
                        bufr2, nij1max, MPI_REAL, MPI_COMM_WORLD, ierr)
    else
      CALL set_alltoallv_counts(mcount,nij1max,ns,nst,nr,nrt)
      CALL MPI_ALLTOALLV(bufs2, ns, nst, MPI_REAL, &
                         bufr2, nr, nrt, MPI_REAL, MPI_COMM_WORLD, ierr)
    endif

    if (myrank < mcount) then
      CALL buf_to_grd(bufr2(:,:),v2dg(:,:,n))
    endif
  enddo

  CALL MPI_BARRIER(MPI_COMM_WORLD,ierr)

  ! Deallocate arrays
  if (ALLOCATED(bufr3)) then
    DEALLOCATE(bufr3)
  endif
  if (ALLOCATED(bufr2)) then
    DEALLOCATE(bufr2)
  endif
  if (ALLOCATED(bufs3)) then
    DEALLOCATE(bufs3)
  endif
  if (ALLOCATED(bufs2)) then
    DEALLOCATE(bufs2)
  endif

END SUBROUTINE gather_grd_mpi_alltoall


pure SUBROUTINE set_alltoallv_counts(mcount,ngpblock,n_ens,nt_ens,n_mem,nt_mem)
!-----------------------------------------------------------------------
! Set the send/recieve counts of MPI_ALLTOALLV
!-----------------------------------------------------------------------
  INTEGER,INTENT(IN) :: mcount,ngpblock
  INTEGER,INTENT(OUT) :: n_ens(nprocs),nt_ens(nprocs),n_mem(nprocs),nt_mem(nprocs)
  INTEGER :: p

  n_ens = 0
  nt_ens = 0
  n_mem = 0
  nt_mem = 0
  do p=1,mcount
    n_ens(p) = ngpblock
    if (myrank+1 == p) then
      n_mem(:) = ngpblock
    endif
  enddo
  do p=2,nprocs
    nt_ens(p) = nt_ens(p-1) + n_ens(p-1)
    nt_mem(p) = nt_mem(p-1) + n_mem(p-1)
  enddo

END SUBROUTINE set_alltoallv_counts


SUBROUTINE scatter_grd_mpi_smalltoall(mstart,mend,nens,v2dg,v2d,nx,ny,nv)
!-----------------------------------------------------------------------
! Scatter a smaller sized gridded data using MPI_ALLTOALL(V) (mstart~mend -> all)
!-----------------------------------------------------------------------
  INTEGER,INTENT(IN) :: mstart,mend,nens
  INTEGER,INTENT(IN) :: nx,ny,nv
  REAL(r_sngl),INTENT(IN) :: v2dg(nx,ny,nv)
  REAL(r_size),INTENT(OUT) :: v2d(nij1,nens,nv)
  REAL(r_sngl),ALLOCATABLE :: bufs2(:,:), bufr2(:,:)
  INTEGER :: k,n,m,mcount,ierr
  INTEGER :: ns(nprocs),nst(nprocs),nr(nprocs),nrt(nprocs)
  LOGICAL :: dodebug = .false.

  mcount = mend - mstart + 1
  if (mcount > nprocs .OR. mcount <= 0) STOP

  if (dodebug) WRITE(6,*) "ALLOCATE bufs2,bufr2..."
  ALLOCATE( bufs2(nij1max,nprocs)    , bufr2(nij1max,mcount) )

  if (dodebug) WRITE(6,*) "Cycling n=1,nv..."
  do n=1,nv
    if (myrank < mcount) then
      if (dodebug) WRITE(6,*) "grd_to_buf :: 2D"
      CALL grd_to_buf(v2dg(:,:,n),bufs2(:,:)) !,nlon,nlat,nij1max,nij1node)
    endif

    if (dodebug) WRITE(6,*) "==MPI_BARRIER=="
    CALL MPI_BARRIER(MPI_COMM_WORLD,ierr)
    if (mcount == nprocs) then
      if (dodebug) WRITE(6,*) "==MPI_ALLTOALL=="
      CALL MPI_ALLTOALL(bufs2, nij1max, MPI_REAL, &
                        bufr2, nij1max, MPI_REAL, MPI_COMM_WORLD, ierr)
    else
      if (dodebug) WRITE(6,*) "set_alltoallv_counts..."
      CALL set_alltoallv_counts(mcount,nij1max,nr,nrt,ns,nst)
      if (dodebug) WRITE(6,*) "==MPI_ALLTOALLV=="
      CALL MPI_ALLTOALLV(bufs2, ns, nst, MPI_REAL, &
                         bufr2, nr, nrt, MPI_REAL, MPI_COMM_WORLD, ierr)
    endif

    do m = mstart,mend
      if (dodebug) WRITE(6,*) "m,n = ", m,n
      if (dodebug) WRITE(6,*) "Assigning v2d(:,m,n) = REAL(bufr2(1:nij1,m-mstart+1),r_size)"
      if (dodebug) WRITE(6,*) "nij1,m-mstart+1 = ", nij1,m-mstart+1
      v2d(:,m,n) = REAL(bufr2(1:nij1,m-mstart+1),r_size)
    enddo
  enddo

  if (dodebug) WRITE(6,*) "==MPI_BARRIER=="
  CALL MPI_BARRIER(MPI_COMM_WORLD,ierr)

  ! Deallocate arrays
  if (ALLOCATED(bufr2)) then
    DEALLOCATE(bufr2)
  endif
  if (ALLOCATED(bufs2)) then
    DEALLOCATE(bufs2)
  endif

END SUBROUTINE scatter_grd_mpi_smalltoall


SUBROUTINE scatter_grd_mpi_small(nrank,v2dg,v2d,nx,ny,nv)
  INTEGER,INTENT(IN) :: nrank
  INTEGER,INTENT(IN) :: nx,ny,nv
  REAL(r_sngl),INTENT(IN) :: v2dg(nx,ny,nv)
  REAL(r_size),INTENT(OUT) :: v2d(nij1,nv)
  REAL(r_sngl), ALLOCATABLE :: bufs(:,:,:) !(nij1max,nlevall,nprocs)
  REAL(r_sngl), ALLOCATABLE :: bufr(:,:) !(nij1max,nlevall)
  INTEGER :: j,k,n,ierr,ns,nr

  ALLOCATE(bufs(nij1max,nlevall,nprocs))
  ALLOCATE(bufr(nij1max,nlevall))

  ns = nij1max * nlevall
  nr = ns
  if (myrank == nrank) then
    j=0
    do n=1,nv
      j = j+1
      CALL grd_to_buf(v2dg(:,:,n),bufs(:,j,:))
    enddo
  endif

  CALL MPI_BARRIER(MPI_COMM_WORLD,ierr)
  CALL MPI_SCATTER(bufs,ns,MPI_REAL,&
                 & bufr,nr,MPI_REAL,nrank,MPI_COMM_WORLD,ierr)
  j=0
  do n=1,nv
    j = j+1
    v2d(:,n) = REAL(bufr(1:nij1,j),r_size)
  enddo

  CALL MPI_BARRIER(MPI_COMM_WORLD,ierr)

  ! Deallocate arrays
  if (ALLOCATED(bufr)) then
    DEALLOCATE(bufr)
  endif
  if (ALLOCATED(bufs)) then
    DEALLOCATE(bufs)
  endif

END SUBROUTINE scatter_grd_mpi_small


END MODULE common_mpi_oceanmodel
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           MODULE common_obs_oceanmodel
!=======================================================================
!
! [PURPOSE:] Observational procedures
!
! [HISTORY:]
!   01/23/2009 Takemasa MIYOSHI  created
!   04/26/2011 Steve PENNY converted to OCEAN for use with MOM4. grep '(OCEAN)' for changes.
!   01/18/2015 Steve Penny converted for use with MOM6
!   06/05/2017 Jili Dong modified for use with HYCOM 
!   12/19/2017 Steve Penny modified for use with NCODA-PREP
!
!=======================================================================
  USE common
  USE common_oceanmodel
  USE params_obs
  USE kdtree

  IMPLICIT NONE
  PUBLIC Trans_XtoY, phys2ijk, phys2ij,read_obs, get_nobs, read_obs2, write_obs2, itpl_2d, itpl_3d, monit_dep
  PUBLIC center_obs_coords

  PRIVATE
  TYPE(KD_ROOT), SAVE :: kdtree_root
  INTEGER, SAVE       :: initialized = 0
  REAL(r_size), SAVE  :: prev_lon, prev_lat      !STEVE: for checking if this longitude was last searched
  INTEGER             :: k_sought=1
  INTEGER             :: k_found

  INTEGER, SAVE, ALLOCATABLE      :: idx(:)      !STEVE: index of the observations that are found by kd_search_radius
  REAL(r_size), SAVE, ALLOCATABLE :: dist(:)     !STEVE: distance from the center grid point
  INTEGER, SAVE :: nn                            !STEVE: total number of local observations found by kd_search_radius

  ! For debugging kdtree:
  REAL(r_size), ALLOCATABLE, DIMENSION(:) :: lon2ij, lat2ij

CONTAINS


!-----------------------------------------------------------------------
! Transformation from model space to observation space (i.e. H-operator)
!-----------------------------------------------------------------------
SUBROUTINE Trans_XtoY(elm,ri,rj,rlev,v3d,v2d,yobs)        !(OCEAN)
  USE params_model, ONLY: nlon, nlat, nlev, nv3d, nv2d
  USE params_model, ONLY: iv3d_u, iv3d_v, iv3d_t, iv3d_s, iv2d_ssh, iv2d_eta, iv2d_sst, iv2d_sss
  USE vars_model,   ONLY: lat2d,phi0

  IMPLICIT NONE

  REAL(r_size),INTENT(IN) :: elm
  REAL(r_size),INTENT(IN) :: ri,rj,rlev
  REAL(r_size),INTENT(IN) :: v3d(nlon,nlat,nlev,nv3d)
  REAL(r_size),INTENT(IN) :: v2d(nlon,nlat,nv2d)
  REAL(r_size),INTENT(OUT) :: yobs
  REAL(r_size)  :: temp_obs(2,2)
  INTEGER :: i,j,k,n
  INTEGER :: intelm,obs_id_hycom

  intelm = NINT(elm)
  SELECT CASE (intelm)
  CASE(id_u_obs)  ! U
    obs_id_hycom=1
!   CALL hycom_intrp(v3d(:,:,:,:),ri,rj,rlev,temp_obs,obs_id_hycom)
!   CALL itpl_2d_4pts(temp_obs,ri,rj,yobs)
  CASE(id_v_obs)  ! V
    obs_id_hycom=2
!   CALL hycom_intrp(v3d(:,:,:,:),ri,rj,rlev,temp_obs,obs_id_hycom)
!   CALL itpl_2d_4pts(temp_obs,ri,rj,yobs)
  CASE(id_t_obs)  ! T
    obs_id_hycom=3
!   CALL hycom_intrp(v3d(:,:,:,:),ri,rj,rlev,temp_obs,obs_id_hycom)
!   CALL itpl_2d_4pts(temp_obs,ri,rj,yobs)
  CASE(id_s_obs)  ! S                             !(OCEAN)
    obs_id_hycom=4
!   CALL hycom_intrp(v3d(:,:,:,:),ri,rj,rlev,temp_obs,obs_id_hycom)
!   CALL itpl_2d_4pts(temp_obs,ri,rj,yobs)
  CASE(id_eta_obs) ! SSH                          !(OCEAN)
    !STEVE: use mom6 surface height to form Yb (i.e. hdxf)
!   CALL itpl_2d(v2d(:,:,iv2d_ssh),ri,rj,yobs)    !(OCEAN)
  CASE(id_sst_obs) ! SST                          !(OCEAN)
!   CALL itpl_2d(v3d(:,:,1,iv3d_t),ri,rj,yobs)    !(OCEAN)
  CASE(id_sss_obs) ! SSS                          !(OCEAN)
!   CALL itpl_2d(v2d(:,:,iv2d_sss),ri,rj,yobs)    !(OCEAN)
  CASE DEFAULT
    print *, "ERROR::Trans_XtoY:: observation type not recognized."
    print *, "element id = ", intelm
    print *, "available id's = ", id_u_obs, id_v_obs, id_t_obs, id_s_obs, id_ssh_obs, id_eta_obs, id_sst_obs, id_sss_obs, id_x_obs, id_y_obs, id_z_obs
    print *, "STEVE: STOPPING ON PURPOSE..."
    STOP 1
  END SELECT

END SUBROUTINE Trans_XtoY


!-----------------------------------------------------------------------
! Coordinate conversion
!-----------------------------------------------------------------------
SUBROUTINE phys2ijk(elem,rlon,rlat,rlev,ri,rj,rk)     !(OCEAN)
  USE params_model, ONLY: nlon, nlat, nlev
  USE vars_model,   ONLY: lon2d, lat2d, lev2d, lon, lat, lev
  USE vars_model,   ONLY: lon0, lonf, lat0, latf, wrapgap
  IMPLICIT NONE
  REAL(r_size),INTENT(IN) :: elem
  REAL(r_size),INTENT(IN) :: rlon
  REAL(r_size),INTENT(IN) :: rlat
  REAL(r_size),INTENT(IN) :: rlev ! pressure levels
  REAL(r_size),INTENT(OUT) :: ri
  REAL(r_size),INTENT(OUT) :: rj
  REAL(r_size),INTENT(OUT) :: rk
  REAL(r_size) :: aj,ak,ai, rrlon, glon,glat,xlon,xlat
! REAL(r_size) :: lnps(nlon,nlat)
  REAL(r_size) :: plev(nlev)
  INTEGER :: i,j,k,n, ni,nj, ii,jj
  LOGICAL, PARAMETER :: dodebug = .false.

  !-----------------------------------------------------------------------------
  ! Initialize the KD-tree for the model-grid
  !-----------------------------------------------------------------------------
  !STEVE: NOTE: this is replicated for each process
  if (initialized == 0) then
    WRITE(6,*) "Initializing the obs_local()"
    initialized = 1
    call kd_init( kdtree_root, RESHAPE(lon2d(:,:),(/nlon*nlat/)), RESHAPE(lat2d(:,:),(/nlon*nlat/)) )
    WRITE(6,*) "Done constructing KD search tree."
    WRITE(6,*) "nlon*nlat = ", nlon*nlat
    ALLOCATE(dist(k_sought))
    ALLOCATE( idx(k_sought))
    prev_lon = -1e10
    prev_lat = -1e10

    ! To debug kdtree:
    if (dodebug) then
      ALLOCATE(lon2ij(nlon*nlat),lat2ij(nlon*nlat))
      lon2ij = RESHAPE(lon2d(:,:),(/nlon*nlat/))
      lat2ij = RESHAPE(lat2d(:,:),(/nlon*nlat/))
    endif
  endif

  !-----------------------------------------------------------------------------
  ! query the KD-tree
  !-----------------------------------------------------------------------------
  if (rlon .ne. prev_lon .or. rlat .ne. prev_lat) then
    CALL kd_search_nnearest(kdtree_root,  (/rlon, rlat/), k_sought, idx, dist, k_found, .false.)
    prev_lon = rlon
    prev_lat = rlat
    if (dodebug) then
      WRITE(6,*) "common_obs_mom6.f90::phys2ijk ---------------------------- "
      WRITE(6,*) "base observation point (lon/lat) :: ", rlon, rlat
      WRITE(6,*) "k_sought = ", k_sought
      WRITE(6,*) "k_found  = ", k_found
      WRITE(6,*) "Grid points found by kd_search_nnearest = "
      WRITE(6,*) "idx,ni,nj,lon,lat,dist"
      do n=1,k_found
        ni = MODULO(idx(n)-1,nlon)+1
        nj = idx(n)/nlon+1 ! Integer division
        WRITE(6,*) idx(n), ni,nj, lon2d(ni,nj), lat2d(ni,nj), dist(n)
      enddo
    endif
  endif

  !-----------------------------------------------------------------------------
  ! rlon -> ri, rlat -> rj
  !-----------------------------------------------------------------------------

  ! Find the appropriate grid box containing this observation

  ! First, find the index of the nearest grid point
  ni = MODULO(idx(1)-1,nlon)+1
  nj = FLOOR(REAL(idx(1))/REAL(nlon))+1 ! Integer division
  glon = lon2d(ni,nj)
  glat = lat2d(ni,nj)

  ! For debugging:
  if (dodebug) then
    xlon = lon2ij(idx(1))
    xlat = lat2ij(idx(1))
  endif

  !STEVE: initialize to something that will throw errors if it's not changed within
  ri = -1
  rj = -1
  rk = -1

  ! Second, check to see whether the observation is to the left/right, up/down from this point

  !-----------------------------------------------------------------------------
  ! Get longitude scaling
  !-----------------------------------------------------------------------------
  if (glon == rlon) then
    ai = 0.0
  elseif (glon < rlon) then
    ai = (rlon - lon2d(ni,nj)) / (lon2d(ni+1,nj) - lon2d(ni,nj))
  elseif (rlon < glon) then
    ai = (rlon - lon2d(ni,nj)) / (lon2d(ni,nj) - lon2d(ni-1,nj))
  endif
  ri = REAL(ni,r_size) + ai

  !-----------------------------------------------------------------------------
  ! Get latitude scaling
  !-----------------------------------------------------------------------------
  if (glat == rlat) then
    aj = 0.0
  elseif (glat < rlat) then
    aj = (rlat - lat2d(ni,nj)) / (lat2d(ni,nj+1) - lat2d(ni,nj))
  elseif (rlat < glat) then
    aj = (rlat - lat2d(ni,nj)) / (lat2d(ni,nj) - lat2d(ni,nj-1))
    !STEVE: should be negative
  endif
  rj = REAL(nj,r_size) + aj

  ! Set flags to mark rlon outside of map range:
  if (ri < 1) then
    ri = 0
  elseif(ri >= nlon+1) then
    ri = nlon+1
  endif

  if (rj < 1) then
    rj = 0
  elseif (rj >= nlat+1) then
    rj = nlat+1
  endif

  ! if (dodebug .and. (ri > nlon .or. ri < 1)) then
  if (dodebug) then
    WRITE(6,*) "================="
    WRITE(6,*) "In common_obs_mom6.f90::phys2ijk,"
    WRITE(6,*) "-----------------"
    WRITE(6,*) "rlon = ", rlon
    if (dodebug) WRITE(6,*) "xlon = ", xlon
    WRITE(6,*) "glon = ", glon
    WRITE(6,*) "ni = ", ni
    WRITE(6,*) "ai = ", ai
    WRITE(6,*) "ri = ", ri
    WRITE(6,*) "lon0 = ", lon0
    WRITE(6,*) "lonf = ", lonf
    WRITE(6,*) "-----------------"
    WRITE(6,*) "rlat = ", rlat
    if (dodebug) WRITE(6,*) "xlat = ", xlat
    WRITE(6,*) "glat = ", glat
    WRITE(6,*) "nj = ", nj
    WRITE(6,*) "aj = ", aj
    WRITE(6,*) "rj = ", rj
    WRITE(6,*) "lat0 = ", lat0
    WRITE(6,*) "latf = ", latf
    WRITE(6,*) "================="
  endif

  if (CEILING(ri) < 2 .OR. nlon+1 < CEILING(ri)) RETURN
  if (CEILING(rj) < 2 .OR. nlat < CEILING(rj)) RETURN

  !-----------------------------------------------------------------------------
  ! rlev -> rk
  !-----------------------------------------------------------------------------
  if (NINT(elem) == id_ssh_obs) then     ! surface observation !(OCEAN)
    rk = 0.0d0
  elseif(NINT(elem) == id_eta_obs) then ! surface observation !(OCEAN)
    rk = 0.0d0
  elseif(NINT(elem) == id_sst_obs) then ! surface observation !(OCEAN)
    rk = 0.0d0
  elseif(NINT(elem) == id_sss_obs) then ! surface observation !(OCEAN)
    rk = 0.0d0
  else
    !
    ! vertical interpolation
    !
    !
    ! find rk
    !
!   if (dodebug) WRITE(6,*) "rlev = ", rlev
    do k=1,nlev
!     if (dodebug) WRITE(6,*) "lev(",k,") = ", lev(k)
      if (rlev < lev(k)) EXIT
      if (k .eq. nlev .and. rlev .eq. lev(nlev)) EXIT !STEVE: added this case for simulated obs that reach the lowest model levels.
                                                      !       Otherwise, k iterates to nlev+1 before exiting loop.
      if (k>1 .and. lev(k)==0.0) then
        WRITE(6,*) "common_obs_mom4.f90::phys2ijk:: lev(k)==0.0 but k>1. ERROR, EXITING..."
        WRITE(6,*) "(model levels array lev() was not appropriately set)"
        STOP(934)
      endif
    enddo

    if (rk > nlev) then
      WRITE(6,*) "common_obs_mom4.f90::phys2ijk:: rk>nlev. ERROR, EXITING..."
      WRITE(6,*) "(appropriate model leve not found for rlev = ",rlev,")"
      STOP(935)
    endif

    if (k .eq. 1) then
      rk = 1 !ak
    else
      !STEVE: now apply the interpolation at the identified model level:
      ak = (rlev - lev(k-1)) / (lev(k) - lev(k-1))
      rk = REAL(k-1,r_size) + ak
    endif
    if (dodebug) WRITE(6,*) "phys2ijk:: rlon,rlat,rlev,ri,rj,rk = ", rlon,rlat,rlev,ri,rj,rk

  endif

  if (dodebug) then
    WRITE(6,*) "-----------------"
    WRITE(6,*) "rlev = ", rlev
    WRITE(6,*) "k  = ", k
    WRITE(6,*) "lev(k-1) = ", lev(k-1)
    WRITE(6,*) "lev(k)   = ", lev(k)
    WRITE(6,*) "ak = ", ak
    WRITE(6,*) "rk = ", rk
    WRITE(6,*) "lev0 = ", lev(1)
    WRITE(6,*) "levf = ", lev(nlev)
    WRITE(6,*) "================="
  endif 
  
END SUBROUTINE phys2ijk

!-----------------------------------------------------------------------
! Coordinate conversion just for 2D
!-----------------------------------------------------------------------
SUBROUTINE phys2ij(elem,rlon,rlat,rlev,ri,rj)     !(OCEAN)
  USE params_model, ONLY: nlon, nlat
  USE vars_model,   ONLY: lon2d, lat2d, lev2d, lon, lat
  USE vars_model,   ONLY: lon0, lonf, lat0, latf, wrapgap
  IMPLICIT NONE
  REAL(r_size),INTENT(IN) :: elem
  REAL(r_size),INTENT(IN) :: rlon
  REAL(r_size),INTENT(IN) :: rlat
  REAL(r_size),INTENT(IN) :: rlev ! pressure levels
  REAL(r_size),INTENT(OUT) :: ri
  REAL(r_size),INTENT(OUT) :: rj
  REAL(r_size) :: aj,ai, rrlon, glon,glat,xlon,xlat
! REAL(r_size) :: lnps(nlon,nlat)
  INTEGER :: i,j,n, ni,nj, ii,jj
  LOGICAL, PARAMETER :: dodebug = .false.

  !-----------------------------------------------------------------------------
  ! Initialize the KD-tree for the model-grid
  !-----------------------------------------------------------------------------
  !STEVE: NOTE: this is replicated for each process
  if (initialized == 0) then
    WRITE(6,*) "Initializing the obs_local()"
    initialized = 1
    call kd_init( kdtree_root, RESHAPE(lon2d(:,:),(/nlon*nlat/)), RESHAPE(lat2d(:,:),(/nlon*nlat/)) )
    WRITE(6,*) "Done constructing KD search tree."
    WRITE(6,*) "nlon*nlat = ", nlon*nlat
    ALLOCATE(dist(k_sought))
    ALLOCATE( idx(k_sought))
    prev_lon = -1e10
    prev_lat = -1e10

    ! To debug kdtree:
    if (dodebug) then
      ALLOCATE(lon2ij(nlon*nlat),lat2ij(nlon*nlat))
      lon2ij = RESHAPE(lon2d(:,:),(/nlon*nlat/))
      lat2ij = RESHAPE(lat2d(:,:),(/nlon*nlat/))
    endif
  endif

  !-----------------------------------------------------------------------------
  ! query the KD-tree
  !-----------------------------------------------------------------------------
  if (rlon .ne. prev_lon .or. rlat .ne. prev_lat) then
    CALL kd_search_nnearest(kdtree_root,  (/rlon, rlat/), k_sought, idx, dist, k_found, .false.)
    prev_lon = rlon
    prev_lat = rlat
    if (dodebug) then
      WRITE(6,*) "common_obs_mom6.f90::phys2ijk ---------------------------- "
      WRITE(6,*) "base observation point (lon/lat) :: ", rlon, rlat
      WRITE(6,*) "k_sought = ", k_sought
      WRITE(6,*) "k_found  = ", k_found
      WRITE(6,*) "Grid points found by kd_search_nnearest = "
      WRITE(6,*) "idx,ni,nj,lon,lat,dist"
      do n=1,k_found
        ni = MODULO(idx(n)-1,nlon)+1
        nj = idx(n)/nlon+1 ! Integer division
        WRITE(6,*) idx(n), ni,nj, lon2d(ni,nj), lat2d(ni,nj), dist(n)
      enddo
    endif
  endif

  !-----------------------------------------------------------------------------
  ! rlon -> ri, rlat -> rj
  !-----------------------------------------------------------------------------

  ! Find the appropriate grid box containing this observation

  ! First, find the index of the nearest grid point
  ni = MODULO(idx(1)-1,nlon)+1
  nj = FLOOR(REAL(idx(1))/REAL(nlon))+1 ! Integer division
  glon = lon2d(ni,nj)
  glat = lat2d(ni,nj)

  ! For debugging:
  if (dodebug) then
    xlon = lon2ij(idx(1))
    xlat = lat2ij(idx(1))
  endif

  !STEVE: initialize to something that will throw errors if it's not changed within
  ri = -1
  rj = -1

  ! Second, check to see whether the observation is to the left/right, up/down from this point

  !-----------------------------------------------------------------------------
  ! Get longitude scaling
  !-----------------------------------------------------------------------------
  if (glon == rlon) then
    ai = 0.0
  elseif (glon < rlon) then
    ai = (rlon - lon2d(ni,nj)) / (lon2d(ni+1,nj) - lon2d(ni,nj))
  elseif (rlon < glon) then
    ai = (rlon - lon2d(ni,nj)) / (lon2d(ni,nj) - lon2d(ni-1,nj))
  endif
  ri = REAL(ni,r_size) + ai

  !-----------------------------------------------------------------------------
  ! Get latitude scaling
  !-----------------------------------------------------------------------------
  if (glat == rlat) then
    aj = 0.0
  elseif (glat < rlat) then
    aj = (rlat - lat2d(ni,nj)) / (lat2d(ni,nj+1) - lat2d(ni,nj))
  elseif (rlat < glat) then
    aj = (rlat - lat2d(ni,nj)) / (lat2d(ni,nj) - lat2d(ni,nj-1))
    !STEVE: should be negative
  endif
  rj = REAL(nj,r_size) + aj

  ! Set flags to mark rlon outside of map range:
  if (ri < 1) then
    ri = 0
  elseif(ri >= nlon+1) then
    ri = nlon+1
  endif

  if (rj < 1) then
    rj = 0
  elseif (rj >= nlat+1) then
    rj = nlat+1
  endif

  ! if (dodebug .and. (ri > nlon .or. ri < 1)) then
  if (dodebug) then
    WRITE(6,*) "================="
    WRITE(6,*) "In common_obs_hycom.f90::phys2ij,"
    WRITE(6,*) "-----------------"
    WRITE(6,*) "rlon = ", rlon
    if (dodebug) WRITE(6,*) "xlon = ", xlon
    WRITE(6,*) "glon = ", glon
    WRITE(6,*) "ni = ", ni
    WRITE(6,*) "ai = ", ai
    WRITE(6,*) "ri = ", ri
    WRITE(6,*) "lon0 = ", lon0
    WRITE(6,*) "lonf = ", lonf
    WRITE(6,*) "-----------------"
    WRITE(6,*) "rlat = ", rlat
    if (dodebug) WRITE(6,*) "xlat = ", xlat
    WRITE(6,*) "glat = ", glat
    WRITE(6,*) "nj = ", nj
    WRITE(6,*) "aj = ", aj
    WRITE(6,*) "rj = ", rj
    WRITE(6,*) "lat0 = ", lat0
    WRITE(6,*) "latf = ", latf
    WRITE(6,*) "================="
  endif

  if (CEILING(ri) < 2 .OR. nlon+1 < CEILING(ri)) RETURN
  if (CEILING(rj) < 2 .OR. nlat < CEILING(rj)) RETURN
  
END SUBROUTINE phys2ij


!-----------------------------------------------------------------------
! Interpolation
!-----------------------------------------------------------------------
SUBROUTINE itpl_2d(var,ri,rj,var5)
  USE params_model, ONLY: nlon, nlat
  IMPLICIT NONE
  REAL(r_size),INTENT(IN) :: var(nlon,nlat)
  REAL(r_size),INTENT(IN) :: ri
  REAL(r_size),INTENT(IN) :: rj
  REAL(r_size),INTENT(OUT) :: var5
  REAL(r_size) :: ai,aj
  INTEGER :: i,j

  i = CEILING(ri)
  ai = ri - REAL(i-1,r_size)
  j = CEILING(rj)
  aj = rj - REAL(j-1,r_size)

  if (i <= nlon) then
    var5 = var(i-1,j-1) * (1-ai) * (1-aj) &
       & + var(i  ,j-1) *    ai  * (1-aj) &
       & + var(i-1,j  ) * (1-ai) *    aj  &
       & + var(i  ,j  ) *    ai  *    aj

!   if (.true.) then
!     print *, "common_obs_mom6.f90::itpl_2d::"
!     print *, "var(i-1,j-1) = ", var(i-1,j-1)
!     print *, "(1-ai) = ", (1-ai)
!     print *, "(1-aj) = ", (1-aj)
!     print *, "var(i  ,j-1) = ", var(i  ,j-1)
!     print *, "ai = ", ai
!     print *, "var(i-1,j  ) = ", var(i-1,j  )
!     print *, "aj = ", aj
!     print *, "var(i  ,j  ) = ", var(i  ,j  )
!     print *, "var5 = ", var5
!   endif

  else
    var5 = var(i-1,j-1) * (1-ai) * (1-aj) &
       & + var(1  ,j-1) *    ai  * (1-aj) &
       & + var(i-1,j  ) * (1-ai) *    aj  &
       & + var(1  ,j  ) *    ai  *    aj
  endif

END SUBROUTINE itpl_2d


!-----------------------------------------------------------------------
! Interpolation
!-----------------------------------------------------------------------
SUBROUTINE itpl_2d_4pts(var,ri,rj,var5)
  USE params_model, ONLY: nlon, nlat
  IMPLICIT NONE
  REAL(r_size),INTENT(IN) :: var(2,2)
  REAL(r_size),INTENT(IN) :: ri
  REAL(r_size),INTENT(IN) :: rj
  REAL(r_size),INTENT(OUT) :: var5
  REAL(r_size) :: ai,aj
  INTEGER :: i,j

  i = CEILING(ri)
  ai = ri - REAL(i-1,r_size)
  j = CEILING(rj)
  aj = rj - REAL(j-1,r_size)

    var5 = var(1,1) * (1-ai) * (1-aj) &
       & + var(2  ,1) *    ai  * (1-aj) &
       & + var(1,2  ) * (1-ai) *    aj  &
       & + var(2  ,2  ) *    ai  *    aj

!   if (.true.) then
!     print *, "common_obs_mom6.f90::itpl_2d::"
!     print *, "var(i-1,j-1) = ", var(i-1,j-1)
!     print *, "(1-ai) = ", (1-ai)
!     print *, "(1-aj) = ", (1-aj)
!     print *, "var(i  ,j-1) = ", var(i  ,j-1)
!     print *, "ai = ", ai
!     print *, "var(i-1,j  ) = ", var(i-1,j  )
!     print *, "aj = ", aj
!     print *, "var(i  ,j  ) = ", var(i  ,j  )
!     print *, "var5 = ", var5
!   endif


END SUBROUTINE itpl_2d_4pts



SUBROUTINE itpl_3d(var,ri,rj,rk,var5)
  USE params_model, ONLY: nlon, nlat, nlev
  IMPLICIT NONE
  REAL(r_size),INTENT(IN) :: var(nlon,nlat,nlev)
  REAL(r_size),INTENT(IN) :: ri
  REAL(r_size),INTENT(IN) :: rj
  REAL(r_size),INTENT(IN) :: rk
  REAL(r_size),INTENT(OUT) :: var5
  REAL(r_size) :: ai,aj,ak
  INTEGER :: i,j,k
  LOGICAL, PARAMETER :: dodebug = .false.

  i = CEILING(ri)
  ai = ri - REAL(i-1,r_size)
  j = CEILING(rj)
  aj = rj - REAL(j-1,r_size)
  k = CEILING(rk)
  ak = rk - REAL(k-1,r_size)

  if (dodebug) WRITE(6,*) "i,j,k,ai,aj,ak = ", i,j,k,ai,aj,ak

  if (i <= nlon) then
    var5 = var(i-1,j-1,k-1) * (1-ai) * (1-aj) * (1-ak) &
       & + var(i  ,j-1,k-1) *    ai  * (1-aj) * (1-ak) &
       & + var(i-1,j  ,k-1) * (1-ai) *    aj  * (1-ak) &
       & + var(i  ,j  ,k-1) *    ai  *    aj  * (1-ak) &
       & + var(i-1,j-1,k  ) * (1-ai) * (1-aj) *    ak  &
       & + var(i  ,j-1,k  ) *    ai  * (1-aj) *    ak  &
       & + var(i-1,j  ,k  ) * (1-ai) *    aj  *    ak  &
       & + var(i  ,j  ,k  ) *    ai  *    aj  *    ak
  else
    var5 = var(i-1,j-1,k-1) * (1-ai) * (1-aj) * (1-ak) &
       & + var(1  ,j-1,k-1) *    ai  * (1-aj) * (1-ak) &
       & + var(i-1,j  ,k-1) * (1-ai) *    aj  * (1-ak) &
       & + var(1  ,j  ,k-1) *    ai  *    aj  * (1-ak) &
       & + var(i-1,j-1,k  ) * (1-ai) * (1-aj) *    ak  &
       & + var(1  ,j-1,k  ) *    ai  * (1-aj) *    ak  &
       & + var(i-1,j  ,k  ) * (1-ai) *    aj  *    ak  &
       & + var(1  ,j  ,k  ) *    ai  *    aj  *    ak
  endif

  if (dodebug) WRITE(6,*) "var5 = ", var5

END SUBROUTINE itpl_3d


!-----------------------------------------------------------------------
! Monitor departure
!-----------------------------------------------------------------------
SUBROUTINE monit_dep(nn,elm,dep,qc)
  IMPLICIT NONE
  INTEGER,INTENT(IN) :: nn
  REAL(r_size),INTENT(IN) :: elm(nn)
  REAL(r_size),INTENT(IN) :: dep(nn)
  INTEGER,INTENT(IN) :: qc(nn)
  REAL(r_size) :: rmse_u,rmse_v,rmse_t,rmse_s,rmse_ssh,rmse_eta,rmse_sst,rmse_sss !(OCEAN)
  REAL(r_size) :: bias_u,bias_v,bias_t,bias_s,bias_ssh,bias_eta,bias_sst,bias_sss !(OCEAN)
  INTEGER :: n,iu,iv,it,is,issh,ieta,isst,isss                                !(OCEAN)

  rmse_u = 0.0d0
  rmse_v = 0.0d0
  rmse_t = 0.0d0
  rmse_s = 0.0d0    !(OCEAN)
  rmse_ssh = 0.0d0  !(OCEAN)
  rmse_eta = 0.0d0  !(OCEAN)
  rmse_sst = 0.0d0  !(OCEAN)
  rmse_sss = 0.0d0  !(OCEAN)
  bias_u = 0.0d0
  bias_v = 0.0d0
  bias_t = 0.0d0
  bias_s = 0.0d0    !(OCEAN)
  bias_ssh = 0.0d0  !(OCEAN)
  bias_eta = 0.0d0  !(OCEAN)
  bias_sst = 0.0d0  !(OCEAN)
  bias_sss = 0.0d0  !(OCEAN)
  iu = 0
  iv = 0
  it = 0
  is = 0            !(OCEAN)
  issh = 0          !(OCEAN)
  ieta = 0          !(OCEAN)
  isst = 0          !(OCEAN)
  isss = 0          !(OCEAN)
  DO n=1,nn
    if (qc(n) /= 1) CYCLE
    SELECT CASE(NINT(elm(n)))
    CASE(id_u_obs)
      rmse_u = rmse_u + dep(n)**2
      bias_u = bias_u + dep(n)
      iu = iu + 1
    CASE(id_v_obs)
      rmse_v = rmse_v + dep(n)**2
      bias_v = bias_v + dep(n)
      iv = iv + 1
    CASE(id_t_obs)
      rmse_t = rmse_t + dep(n)**2
      bias_t = bias_t + dep(n)
      it = it + 1
    CASE(id_s_obs)                    !(OCEAN)
      rmse_s = rmse_s + dep(n)**2     !(OCEAN)
      bias_s = bias_s + dep(n)        !(OCEAN)
      is = is + 1                     !(OCEAN)
    CASE(id_ssh_obs)                  !(OCEAN)
      rmse_ssh = rmse_ssh + dep(n)**2 !(OCEAN)
      bias_ssh = bias_ssh + dep(n)    !(OCEAN)
      issh = issh + 1                 !(OCEAN)
    CASE(id_eta_obs)                  !(OCEAN)
      rmse_eta = rmse_eta + dep(n)**2 !(OCEAN)
      bias_eta = bias_eta + dep(n)    !(OCEAN)
      ieta = ieta + 1                 !(OCEAN)
    CASE(id_sst_obs)                  !(OCEAN)
      rmse_sst = rmse_sst + dep(n)**2 !(OCEAN)
      bias_sst = bias_sst + dep(n)    !(OCEAN)
      isst = isst + 1                 !(OCEAN)
    CASE(id_sss_obs)                  !(OCEAN)
      rmse_sss = rmse_sss + dep(n)**2 !(OCEAN)
      bias_sss = bias_sss + dep(n)    !(OCEAN)
      isss = isss + 1                 !(OCEAN)
    END SELECT
  enddo
  if (iu == 0) then
    rmse_u = undef
    bias_u = undef
  else
    rmse_u = SQRT(rmse_u / REAL(iu,r_size))
    bias_u = bias_u / REAL(iu,r_size)
  endif
  if (iv == 0) then
    rmse_v = undef
    bias_v = undef
  else
    rmse_v = SQRT(rmse_v / REAL(iv,r_size))
    bias_v = bias_v / REAL(iv,r_size)
  endif
  if (it == 0) then
    rmse_t = undef
    bias_t = undef
  else
    rmse_t = SQRT(rmse_t / REAL(it,r_size))
    bias_t = bias_t / REAL(it,r_size)
  endif
  if (is == 0) then                                   !(OCEAN)
    rmse_s = undef                                   !(OCEAN)
    bias_s = undef                                   !(OCEAN)
  else
    rmse_s = SQRT(rmse_s / REAL(is,r_size))          !(OCEAN)
    bias_s = bias_s / REAL(is,r_size)                !(OCEAN)
  endif
  if (issh == 0) then                                 !(OCEAN)
    rmse_ssh = undef                                 !(OCEAN)
    bias_ssh = undef                                 !(OCEAN)
  else
    rmse_ssh = SQRT(rmse_ssh / REAL(issh,r_size))    !(OCEAN)
    bias_ssh = bias_ssh / REAL(issh,r_size)          !(OCEAN)
  endif
  if (ieta == 0) then                                 !(OCEAN)
    rmse_eta = undef                                 !(OCEAN)
    bias_eta = undef                                 !(OCEAN)
  else
    rmse_eta = SQRT(rmse_eta / REAL(ieta,r_size))    !(OCEAN)
    bias_eta = bias_eta / REAL(ieta,r_size)          !(OCEAN)
  endif
  if (isst == 0) then                                 !(OCEAN)
    rmse_sst = undef                                 !(OCEAN)
    bias_sst = undef                                 !(OCEAN)
  else
    rmse_sst = SQRT(rmse_sst / REAL(isst,r_size))    !(OCEAN)
    bias_sst = bias_sst / REAL(isst,r_size)          !(OCEAN)
  endif
  if (isss == 0) then                                 !(OCEAN)
    rmse_sss = undef                                 !(OCEAN)
    bias_sss = undef                                 !(OCEAN)
  else
    rmse_sss = SQRT(rmse_sss / REAL(isss,r_size))    !(OCEAN)
    bias_sss = bias_sss / REAL(isss,r_size)          !(OCEAN)
  endif

  WRITE(6,'(A)') '== OBSERVATIONAL DEPARTURE ============================================='
  WRITE(6,'(7A12)') 'U','V','T','S','SSH','eta','SST','SSS'                                       !(OCEAN)
  WRITE(6,'(7ES12.3)') bias_u,bias_v,bias_t,bias_s,bias_ssh,bias_eta,bias_sst,bias_sss               !(OCEAN)
  WRITE(6,'(7ES12.3)') rmse_u,rmse_v,rmse_t,rmse_s,rmse_ssh,bias_eta,rmse_sst,bias_sss               !(OCEAN)
  WRITE(6,'(A)') '== NUMBER OF OBSERVATIONS TO BE ASSIMILATED ============================'
  WRITE(6,'(7A12)') 'U','V','T','S','SSH','eta','SST','SSS'                                       !(OCEAN)
  WRITE(6,'(7I12)') iu,iv,it,is,issh,ieta,isst,isss                                              !(OCEAN)
  WRITE(6,'(A)') '========================================================================'

END SUBROUTINE monit_dep


!-----------------------------------------------------------------------
! Basic modules for observation input
!-----------------------------------------------------------------------
SUBROUTINE get_nobs(cfile,nrec,nn)
  IMPLICIT NONE
  CHARACTER(*),INTENT(IN) :: cfile
  INTEGER,INTENT(IN) :: nrec
  INTEGER,INTENT(OUT) :: nn
  REAL(r_sngl),ALLOCATABLE :: wk(:) 
  INTEGER :: ios
  INTEGER :: iu,iv,it,is,issh,ieta,isst,isss,ix,iy,iz !(OCEAN)
  INTEGER :: nprof !(OCEAN)
  REAL(r_sngl) :: lon_m1, lat_m1
  INTEGER :: iunit
  LOGICAL :: ex
  LOGICAL, PARAMETER :: dodebug=.false.

  ALLOCATE(wk(nrec))
  nn = 0
  iu = 0
  iv = 0
  it = 0
  is = 0    !(OCEAN)
  issh = 0  !(OCEAN)
  ieta = 0  !(OCEAN)
  isst = 0  !(OCEAN)
  isss = 0  !(OCEAN)
  ix = 0    !(OCEAN)
  iy = 0    !(OCEAN)
  iz = 0    !(OCEAN)
  nprof = 0    !(OCEAN)
  lon_m1 = 0    !(OCEAN)
  lat_m1 = 0    !(OCEAN)
  iunit=91
  if (dodebug) print *, "get_nobs::"
  INQUIRE(FILE=cfile,EXIST=ex)
  if (ex) then
    OPEN(iunit,FILE=cfile,FORM='unformatted',ACCESS='sequential')
    DO
      READ(iunit,IOSTAT=ios) wk
      if (dodebug .and. nrec.eq.6) then
        PRINT '(I6,2F7.2,F10.2,2F12.2)',NINT(wk(1)),wk(2),wk(3),wk(4),wk(5),wk(6)
      elseif (dodebug .and. nrec .eq. 8) then
        PRINT '(I6,2F7.2,F10.2,4F12.2)',NINT(wk(1)),wk(2),wk(3),wk(4),wk(5),wk(6),wk(7),wk(8)
      elseif (dodebug .and. nrec .eq. 9) then
        PRINT '(I6,2F7.2,F10.2,5F12.2)',NINT(wk(1)),wk(2),wk(3),wk(4),wk(5),wk(6),wk(7),wk(8),wk(9)
      endif
      if (ios /= 0) EXIT
      SELECT CASE(NINT(wk(1)))
      CASE(id_u_obs)
        iu = iu + 1
      CASE(id_v_obs)
        iv = iv + 1
      CASE(id_t_obs)
        it = it + 1
      CASE(id_s_obs)     !(OCEAN)
        is = is + 1      !(OCEAN)
      CASE(id_ssh_obs)   !(OCEAN)
        issh = issh + 1  !(OCEAN)
      CASE(id_eta_obs)   !(OCEAN)
        ieta = ieta + 1  !(OCEAN)
      CASE(id_sst_obs)   !(OCEAN)
        isst = isst + 1  !(OCEAN)
      CASE(id_sss_obs)   !(OCEAN)
        isss = isss + 1  !(OCEAN)
      CASE(id_x_obs)     !(OCEAN)
        ix = ix + 1      !(OCEAN)
      CASE(id_y_obs)     !(OCEAN)
        iy = iy + 1      !(OCEAN)
      CASE(id_z_obs)     !(OCEAN)
        iz = iz + 1      !(OCEAN)
      END SELECT
      if (wk(2) .ne. lon_m1 .and. wk(3) .ne. lat_m1) then
        nprof=nprof+1
        lon_m1 = wk(2)
        lat_m1 = wk(3)
      endif
      nn = nn + 1
    enddo
    WRITE(6,'(I10,A)') nprof ,' PROFILES INPUT'
    WRITE(6,'(I10,A)') nn,' TOTAL OBSERVATIONS INPUT (in get_nobs)'
    WRITE(6,'(A12,I10)') '          U:',iu
    WRITE(6,'(A12,I10)') '          V:',iv
    WRITE(6,'(A12,I10)') '          T:',it
    WRITE(6,'(A12,I10)') '          S:',is   !(OCEAN)
    WRITE(6,'(A12,I10)') '        SSH:',issh !(OCEAN)
    WRITE(6,'(A12,I10)') '        eta:',ieta !(OCEAN)
    WRITE(6,'(A12,I10)') '        SST:',isst !(OCEAN)
    WRITE(6,'(A12,I10)') '        SSS:',isss !(OCEAN)
    WRITE(6,'(A12,I10)') '          X:',ix   !(OCEAN)
    WRITE(6,'(A12,I10)') '          Y:',iy   !(OCEAN)
    WRITE(6,'(A12,I10)') '          Z:',iz   !(OCEAN)
    CLOSE(iunit)
  else
    WRITE(6,'(2A)') cfile,' does not exist -- skipped'
  endif
  DEALLOCATE(wk)

  if (nn .eq. 0) then
    WRITE(6,*) "get_nobs:: No observations have been found. Exiting..."
    !STOP(60)
  endif

END SUBROUTINE get_nobs


SUBROUTINE read_obs(cfile,nn,elem,rlon,rlat,rlev,odat,oerr,obhr)
  USE vars_model, ONLY: lon0, lonf, lat0, latf, wrapgap
! USE vars_model, ONLY: lon, lat, lev
  IMPLICIT NONE
  CHARACTER(*),INTENT(IN) :: cfile
  INTEGER,INTENT(IN) :: nn
  REAL(r_size),INTENT(OUT) :: elem(nn) ! element number
  REAL(r_size),INTENT(OUT) :: rlon(nn)
  REAL(r_size),INTENT(OUT) :: rlat(nn)
  REAL(r_size),INTENT(OUT) :: rlev(nn)
  REAL(r_size),INTENT(OUT) :: odat(nn)
  REAL(r_size),INTENT(OUT) :: oerr(nn)
  REAL(r_size),INTENT(OUT) :: obhr(nn)
! REAL(r_sngl) :: wk(6)
  REAL(r_sngl) :: wk(9)
  !REAL(r_size) :: wk(6) !(OCEAN) STEVE: I changed this because the netcdf observation files are stored as double precision
  INTEGER :: n,iunit
  ! STEVE: for general grid
  LOGICAL, PARAMETER :: dodebug = .false.
  LOGICAL :: process_obs = .true.

  iunit=91
  OPEN(iunit,FILE=cfile,FORM='unformatted',ACCESS='sequential')
  DO n=1,nn
    READ(iunit) wk
    elem(n) = REAL(wk(1),r_size)
    rlon(n) = REAL(wk(2),r_size)
    rlat(n) = REAL(wk(3),r_size)
    rlev(n) = REAL(wk(4),r_size)
    odat(n) = REAL(wk(5),r_size)
    oerr(n) = REAL(wk(6),r_size)
    obhr(n) = REAL(wk(7),r_size)

    !STEVE: error check
    if (oerr(n) .le. 0) then
      print *, "common_obs_mom6.f90::read_obs:: WARNING!"
      print *, "STEVE: oerr <= 0, must be > 0 ..." 
      print *, "STEVE: oerr(",n,") = ", oerr(n)
      PRINT '(I6,2F7.2,F10.2,2F12.2)',NINT(wk(1)),wk(2),wk(3),wk(4),wk(5),wk(6),wk(7),wk(8),wk(9)
!     stop 9
    endif
    
    ! Special processing for obs:
    !STEVE: this handles the fact that the observations are typically on a 0 to 360º grid, while
    !       the NCEP mom4p1 grid configuration is on a ~ -285 to 75º grid
    if (process_obs) then
      CALL center_obs_coords(rlon,oerr,nn)
    endif 

  enddo

  CLOSE(iunit)

  if (MAXVAL(rlon) > lonf) then
    WRITE(6,*) "read_obs:: Error: MAX(observation lon, i.e. rlon) > lonf"
    WRITE(6,*) "rlon = ", rlon
    WRITE(6,*) "lonf = ", lonf
    STOP(2)
  endif
  if (MINVAL(rlon) < lon0) then
    WRITE(6,*) "read_obs:: Error: MIN(observation lon, i.e. rlon) < lon0"
    WRITE(6,*) "rlon = ", rlon
    WRITE(6,*) "lon0 = ", lon0
    STOP(2)
  endif

END SUBROUTINE read_obs


SUBROUTINE read_obs2(cfile,nn,elem,rlon,rlat,rlev,odat,oerr,ohx,oqc,obhr)
  IMPLICIT NONE
  CHARACTER(*),INTENT(IN) :: cfile
  INTEGER,INTENT(IN) :: nn
  REAL(r_size),INTENT(OUT) :: elem(nn) ! element number
  REAL(r_size),INTENT(OUT) :: rlon(nn)
  REAL(r_size),INTENT(OUT) :: rlat(nn)
  REAL(r_size),INTENT(OUT) :: rlev(nn)
  REAL(r_size),INTENT(OUT) :: odat(nn)
  REAL(r_size),INTENT(OUT) :: oerr(nn)
  REAL(r_size),INTENT(OUT) :: ohx(nn)
  REAL(r_size),INTENT(OUT) :: obhr(nn)
  INTEGER,INTENT(OUT) :: oqc(nn)
  REAL(r_sngl) :: wk(9)
  INTEGER :: n,iunit

  iunit=91
  OPEN(iunit,FILE=cfile,FORM='unformatted',ACCESS='sequential')

  do n=1,nn
    READ(iunit) wk
    elem(n) = REAL(wk(1),r_size)
    rlon(n) = REAL(wk(2),r_size)
    rlat(n) = REAL(wk(3),r_size)
    rlev(n) = REAL(wk(4),r_size)
    odat(n) = REAL(wk(5),r_size)
    oerr(n) = REAL(wk(6),r_size)
    ohx(n)  = REAL(wk(7),r_size)
    oqc(n)  = NINT(wk(8))
    obhr(n) = REAL(wk(9),r_size)
  enddo

  CLOSE(iunit)

END SUBROUTINE read_obs2


!STEVE: adding for support
SUBROUTINE write_obs(cfile,nn,elem,rlon,rlat,rlev,odat,oerr,obhr)
  IMPLICIT NONE
  CHARACTER(*),INTENT(IN) :: cfile
  INTEGER,INTENT(IN) :: nn
  REAL(r_size),INTENT(IN) :: elem(nn) ! element number
  REAL(r_size),INTENT(IN) :: rlon(nn)
  REAL(r_size),INTENT(IN) :: rlat(nn)
  REAL(r_size),INTENT(IN) :: rlev(nn)
  REAL(r_size),INTENT(IN) :: odat(nn)
  REAL(r_size),INTENT(IN) :: oerr(nn)
  REAL(r_size),INTENT(IN) :: obhr(nn)
  REAL(r_sngl) :: wk(9)
! REAL(r_size) :: wk(6) !(OCEAN) STEVE: I changed this because the netcdf observation files are stored as double precision
  INTEGER :: n,iunit

  iunit=91
  OPEN(iunit,FILE=cfile,FORM='unformatted',ACCESS='sequential')

  do n=1,nn
    wk(1) = REAL(elem(n),r_sngl)
    wk(2) = REAL(rlon(n),r_sngl)
    wk(3) = REAL(rlat(n),r_sngl)
    wk(4) = REAL(rlev(n),r_sngl)
    wk(5) = REAL(odat(n),r_sngl)
    wk(6) = REAL(oerr(n),r_sngl)
    wk(7) = REAL(obhr(n),r_sngl)
    wk(8) = -1
    wk(9) = -1
    WRITE(iunit) wk
  enddo

  CLOSE(iunit)

END SUBROUTINE write_obs


SUBROUTINE write_obs2(cfile,nn,elem,rlon,rlat,rlev,odat,oerr,ohx,oqc,obhr,qcflag_in)
  IMPLICIT NONE
  CHARACTER(*),INTENT(IN) :: cfile
  INTEGER,INTENT(IN) :: nn
  REAL(r_size),INTENT(IN) :: elem(nn) ! element number
  REAL(r_size),INTENT(IN) :: rlon(nn)
  REAL(r_size),INTENT(IN) :: rlat(nn)
  REAL(r_size),INTENT(IN) :: rlev(nn)
  REAL(r_size),INTENT(IN) :: odat(nn)
  REAL(r_size),INTENT(IN) :: oerr(nn)
  REAL(r_size),INTENT(IN) :: ohx(nn)
  REAL(r_size),INTENT(IN) :: obhr(nn)
  LOGICAL, INTENT(IN), OPTIONAL :: qcflag_in
  LOGICAL :: qcflag
  INTEGER,INTENT(IN) :: oqc(nn)
  REAL(r_sngl) :: wk(9)
  INTEGER :: n,iunit
  LOGICAL, PARAMETER :: dodebug=.false.

  if (PRESENT(qcflag_in)) then
    qcflag = qcflag_in
  else
    qcflag = .false.
  endif

  iunit=92
  OPEN(iunit,FILE=cfile,FORM='unformatted',ACCESS='sequential')

  do n=1,nn
    if (qcflag .and. oqc(n)==0) CYCLE
    wk(1) = REAL(elem(n),r_sngl)  ! ID for observation type
    wk(2) = REAL(rlon(n),r_sngl)  ! Ob lon
    wk(3) = REAL(rlat(n),r_sngl)  ! Ob lat
    wk(4) = REAL(rlev(n),r_sngl)  ! Ob level
    wk(5) = REAL(odat(n),r_sngl)  ! Observed data quantity
    wk(6) = REAL(oerr(n),r_sngl)  ! Estimated observation error
    wk(7) = REAL(ohx(n),r_sngl)   ! Model forecast transformed to observation space: H(xb)
    wk(8) = REAL(oqc(n),r_sngl)   ! Quality control ID (1==keep, 0==discard) for use in assimilation
    wk(9) = REAL(obhr(n),r_sngl)  ! Quality control ID (1==keep, 0==discard) for use in assimilation
    if (dodebug) PRINT '(I6,2F7.2,F10.2,6F12.2)',NINT(wk(1)),wk(2),wk(3),wk(4),wk(5),wk(6),wk(7),wk(8),wk(9)
    WRITE(iunit) wk
  enddo

  CLOSE(iunit)

END SUBROUTINE write_obs2


SUBROUTINE center_obs_coords(rlon,oerr,nn)
!===============================================================================
! Center all observations within the longitudes defined by the model grid
!===============================================================================
  USE vars_model,   ONLY: lon0, lonf, wrapgap
  IMPLICIT NONE
  REAL(r_size),INTENT(INOUT) :: rlon(nn)
  REAL(r_size),INTENT(INOUT) :: oerr(nn)
  INTEGER, INTENT(IN) :: nn
  INTEGER :: n
  LOGICAL :: dodebug = .false.
  LOGICAL :: dodebug1 = .false.

  if (dodebug) then
    WRITE(6,*) "center_obs_coords::"
    WRITE(6,*) "wrapgap = ", wrapgap
  endif

  do n=1,nn

    if (rlon(n) >= lonf) then
      if (dodebug1) WRITE(6,*) "(a)"

      if (dodebug) then
        WRITE(6,*) "letkf_obs.f90:: Wrapping large lon obs to model grid: n = ", n
        WRITE(6,*) "pre : rlon(n) = ", rlon(n)
        WRITE(6,*) "360 - rlon(n) = ", 360.0 - rlon(n)
        WRITE(6,*) "abs(rlon(n) - lonf) = ", abs(rlon(n) - lonf)
      endif

      ! Update the coordinate
      if ( abs(rlon(n) - lonf) < wrapgap ) then
        if (dodebug1) WRITE(6,*) "(b)"
          ! First, handle observations that are just outside of the model grid
          !STEVE: shift it if it's just outside grid

        if (abs(rlon(n) - lonf) < wrapgap/2) then
            rlon(n) = lonf
        else
            rlon(n) = lon0
        endif

        ! Increase error to compensate
        oerr(n) = oerr(n)*2
      else
        if (dodebug1) WRITE(6,*) "(c)"
        ! Otherwise, wrap the observation coordinate to be inside of the defined model grid coordinates
        !Wrap the coordinate
        if (dodebug) then
          WRITE(6,*) "lon0    = ", lon0
          WRITE(6,*) "lonf    = ", lonf
          WRITE(6,*) "rlon(n) = ", rlon(n)
          WRITE(6,*) "wrapgap = ", wrapgap
        endif
        rlon(n) = REAL(lon0 + abs(rlon(n) - lonf) - wrapgap,r_size)
        if (dodebug) then
          WRITE(6,*) "After update:"
          WRITE(6,*) "rlon(n) = REAL(lon0 + abs(rlon(n) - lonf) - wrapgap,r_size)"
          WRITE(6,*) "rlon(n) = ", rlon(n)
        endif
      endif

      if (dodebug) WRITE(6,*) "post : rlon(n) = ", rlon(n)

    elseif (rlon(n) < lon0) then
      if (dodebug1) WRITE(6,*) "(d)"

      if (dodebug) then
          WRITE(6,*) "letkf_obs.f90:: Wrapping small lon obs to model grid: n = ", n
          WRITE(6,*) "pre  : rlon(n) = ", rlon(n)
          WRITE(6,*) "360 - rlon(n) = ", 360.0 - rlon(n)
      endif

      ! Update the coordinate
      if (abs(lon0 - rlon(n)) < wrapgap ) then
        if (dodebug1) WRITE(6,*) "(e)"
        !STEVE: shift it if it's just outside grid
        if (abs(lon0 - rlon(n)) < wrapgap/2) then
            rlon(n) = lon0
        else
            rlon(n) = lonf
        endif
        ! Increase error to compensate                                 
        oerr(n) = oerr(n)*2
      else
        if (dodebug1) WRITE(6,*) "(f)"
        !Wrap the coordinate
        rlon(n) = REAL(lonf - abs(lon0 - rlon(n)) + wrapgap,r_size)
      endif

      if (dodebug) WRITE(6,*) "post : rlon(n) = ", rlon(n)

    endif
  enddo

  WRITE(6,*) "center_obs_coords:: finished recentering observations."

  if (MAXVAL(rlon) > lonf) then
    WRITE(6,*) "read_obs:: Error: MAX(observation lon, i.e. rlon) > lonf"
    WRITE(6,*) "MAXVAL(rlon) = ", MAXVAL(rlon)
    WRITE(6,*) "lonf = ", lonf
!   WRITE(6,*) "lon(nlon) = ", lon(nlon)
    STOP(22)
  endif
  if (MINVAL(rlon) < lon0) then
    WRITE(6,*) "read_obs:: Error: MIN(observation lon, i.e. rlon) < lon0"
    WRITE(6,*) "MINVAL(rlon) = ", MINVAL(rlon)
    WRITE(6,*) "lon0 = ", lon0
!   WRITE(6,*) "lon(1) = ", lon(1)
    STOP(23)
  endif

END SUBROUTINE center_obs_coords


END MODULE common_obs_oceanmodel
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         MODULE compute_profile_error

IMPLICIT NONE

! The cmpTz subroutine in this module uses the 3DVar-GODAS method to
! estimate the vertical error distribution for temperature (or salinity)
! profiles. The errors are based on the gradient of the profile at each depth
! using a centered-difference estimate.
!
! NOTE: The code ASSUMES that the profiles are only defined on the model grid
!       levels. The behavoir when that is not the case (e.g. if the raw observation
!       profiles were used) is unknown.
!
! Authors:
!       Steve Penny
!       David Behrginger (Original author of C code on which this module is based)
!

! the vertical temperature gradient is rescaled to vary between 0.0 and 1.0
! so to set the std errors ultimately between 1.0 and 2.5 use
! SE0 = 1.0 and SEF = 1.5
! then EVR = 1/(se*se)
! if std error = 0.5, then EVR = 4.0
!                1.0             1.0
!                1.5             0.4444
!
REAL,    PARAMETER :: maxerr = 999.0 !STEVE: large number assigned as max error
REAL,    PARAMETER :: teps = 0.00005 !epsilon(1.0)  !STEVE: a small number
INTEGER, PARAMETER :: kav = 5        !STEVE: indicates how many gridpoints to use in the vetical averaging
!LOGICAL :: DO_SCALEDZ=.false.
LOGICAL :: DO_SQRT=.false.
LOGICAL :: dodebug=.false.

PUBLIC :: cmpTz

CONTAINS

! Compute the gradient of t at the model levels. Also perform some other computations
! tz is the scaling to apply to the se error profiles
! a contains 1 / se**2

SUBROUTINE cmpTz(se,se0,seF,t,z,kd,spv)
  USE common, ONLY: r_size
  INTEGER ::  k, kk, km, kp, kv2, cnt
  REAL :: tzmn, tzmx
  REAL(r_size),DIMENSION(kd), INTENT(OUT) :: se  ! standard deviations (errors)
  REAL(r_size), INTENT(IN) :: se0
  REAL(r_size), INTENT(IN) :: seF
  REAL(r_size),DIMENSION(kd), INTENT(IN)  :: t   ! temperature values
  REAL(r_size),DIMENSION(kd), INTENT(IN)  :: z   ! depths
  INTEGER, INTENT(IN) :: kd              ! total number (depth) of levels
  REAL(r_size), INTENT(IN) :: spv ! Spurious/missing value
  REAL,DIMENSION(kd) :: tz, tw

  if (dodebug) then
    print *, "============================================"
    print *, "Inputs ::"
    print *, "t   = ", t
    print *, "z   = ", z
    print *, "kd  = ", kd
    print *, "spv = ", spv
    print *, "============================================"
  endif

  ! Check input quality:
  if (MAXVAL(z) < TINY(1.0d0)) then
    print *, "cmpTz :: input depths are zero, check input arguments. EXITING..."
    STOP(13)
  endif

  ! Estimate profile gradients
  ! i.e. every level is linearly fit from below and above
  do k = 2,kd-1
    if (t(k-1) /= spv .AND. t(k+1) /= spv) then
      ! Estimate profile gradient with centered-difference scheme
      tz(k) = (t(k-1) - t(k+1)) / (z(k+1) - z(k-1))
      ! ensure non-negative gradient
      if (tz(k) < 0.0) then
        tz(k) = 0.0
      endif
    else
      tz(k) = spv
    endif 
  enddo
  tz(1) = spv
  tz(kd) = spv

  ! For all levels with obs data,
  ! Fix levels in which gradients end up as spurious values (most likely due to missing values in obs data)
  ! Use 'nearest neighbor' method to assign the gradient value
  do k = 1,kd

    ! if one of the values was computed with a missing value, then
    ! we have to go back and find the nearest non-missing value to do the computation of the gradient
    if (tz(k) == spv .AND. t(k) /= spv) then

      ! k minus
      km = -1;
      ! Go back to the first non-missing value
      do kk = k,-1,1
        if (tz(kk) /= spv) then
          km = kk
          exit
        endif
      enddo 

      ! k plus
      kp = kd;
      ! Go forward to the first non-missing value
      do kk = k+1,kd-1
        if (tz(kk) /= spv) then
          kp = kk
          exit
        endif
      enddo

      ! if k-minus and k-plus are in the range of observed levels,
      if (km >= 1 .AND. kp <= kd) then

        ! assign the value to level k of the nearest neighbor (km or kp)
        if (k-km <= kp-k) then
          tz(k) = tz(km)
        else
          tz(k) = tz(kp)
        endif

      ! otherwise, handle the boundary cases
      elseif (km >= 1) then
        tz(k) = tz(km)
      elseif (kp <= kd) then
        tz(k) = tz(kp)
      else 
        tz(k) = spv
      endif

    endif
  enddo

  do k = 1,kd
    if (tz(k) == spv .AND. t(k) /= spv) then
      tz(k) = 0.0
    endif
  enddo

  if (DO_SQRT) then
    ! take square root of tz
    WHERE(tz /= spv .AND. tz > 0.0) tz = SQRT(tz)
  endif

  !STEVE: This averages consecutive tz's to smooth out the observation errors
  ! kav identifies how many gridpoints to use in the averaging window.
  if (kav > 1) then
    kv2 = kav / 2
    do k = 1, kd
      if (tz(k) /= spv) then
        if (k-kv2 >= 1) then
          km = k-kv2
        else
          km = 1
        endif
        cnt = 1;
        tw(k) = tz(k)
        do kk = k-1,-1,km
          if (tz(kk) /= spv) then
            tw(k) = tw(k) + tz(kk)
            cnt=cnt+1
          else
            exit
          endif
        enddo 

        if (k+kv2 <= kd) then
          kp = k+kv2
        else
          kp = kd
        endif
        do kk = k+1,kp
          if (tz(kk) /= spv) then
            tw(k) = tw(k) + tz(kk)
            cnt=cnt+1
          else
            exit
          endif
        enddo
        if (cnt>1) then
          tw(k) = tw(k)/REAL(cnt);
        endif
      else 
        tw(k) = spv
      endif
    enddo
    do k = 1,kd
      tz(k) = tw(k)
    enddo
  endif

  ! Find the minimum and maximum tz, and rescale so tz is between
  ! 0 and 1, before applying to the errors
  if (dodebug) print *, "pre-rescaled tz = ", tz
  tzmn = abs(spv);
  tzmx = -abs(spv);
  do k = 1,kd
    if (tz(k) /= spv) then
      if (tzmn >= tz(k)) then
        tzmn = tz(k)
      endif
      if (tzmx <= tz(k)) then
        tzmx = tz(k)
      endif
    endif
  enddo
  tzmx = tzmx-tzmn
  if (dodebug) then
    print *, "tzmn = ", tzmn
    print *, "tzmx = ", tzmx
  endif
  if (tzmx < teps) then
    WHERE (tz /= spv) tz = 0.0
    if (dodebug) print *, "WARNING :: zeroed out tz"
  else
    do k = 1,kd
      if (tz(k) /= spv) then
        tz(k) = tz(k)-tzmn
        tz(k) = tz(k)/tzmx
      endif
    enddo
  endif
  if (dodebug) print *, "post-rescaled tz = ", tz

  ! tz is used only for scaling the standard deviation (error) by depth, so it's not needed
  ! if the observational errors are read in from the netcdf obs file

  if (dodebug) print *, "t  = ", t
  if (dodebug) print *, "tz = ", tz
  do k = 1,kd
    if (t(k) /= spv) then
      ! specify the standard deviation (obs error)
      ! The result is scaled in the range 
      ! from se0 to se0+seF.
      se(k) = se0 + seF * tz(k)
    else 
      se(k) = maxerr
    endif
    
    !STEVE: check for NaN's, if we have one, assign average of se0 and seF as error
    if(se(k) /= se(k)) then !NaN check
      se(k) = (se0+se0+seF)/2.0 !STEVE: temporary fix (ISSUE)
    endif

  enddo
  if (dodebug) print *, "se = ", se

END SUBROUTINE cmpTz

END MODULE compute_profile_error
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      # Makefile created by mkmf $Id: mkmf,v 18.0 2010/03/02 23:26:08 fms Exp $ 



include template


.DEFAULT:
	-echo $@ does not exist.
all: letkf.MAKE.056
SFMT.o: ../../common/SFMT.f90
	ftn  -O3 -parallel -what   -c	../../common/SFMT.f90
common.o: ../../common/common.f90
	ftn  -O3 -parallel -what   -c	../../common/common.f90
common_letkf.o: ../../common/common_letkf.f90 common.o common_mtx.o params_letkf.o
	ftn  -O3 -parallel -what  -c	../../common/common_letkf.f90
common_mom4.o: ../common/common_mom4.f90 common.o params_model.o vars_model.o params_letkf.o
	ftn  -O3 -parallel -what   -I/opt/cray/netcdf/4.2.0/intel/120/include -c	../common/common_mom4.f90
common_mpi.o: ../../common/common_mpi.f90
	ftn  -O3 -parallel -what  -c	../../common/common_mpi.f90
common_mpi_mom4.o: ../common/common_mpi_mom4.f90 common.o common_mpi.o common_mom4.o params_letkf.o
	ftn  -O3 -parallel -what  -c -I/opt/cray/netcdf/4.2.0/intel/120/include	../common/common_mpi_mom4.f90
common_mtx.o: ../../common/common_mtx.f90 common.o
	ftn  -O3 -parallel -what   -c	../../common/common_mtx.f90
common_obs_mom4.o: ../common/common_obs_mom4.f90 common.o common_mom4.o params_obs.o
	ftn  -O3 -parallel -what  -c	../common/common_obs_mom4.f90
letkf.o: ../letkf/letkf.f90 common.o common_mpi.o common_mom4.o common_mpi_mom4.o common_letkf.o letkf_obs.o letkf_tools.o params_letkf.o params_model.o params_obs.o
	ftn  -O3 -parallel -what  -c	../letkf/letkf.f90
letkf_local.o: ../letkf/letkf_local.f90 common.o common_mpi.o common_mom4.o common_mpi_mom4.o common_letkf.o letkf_obs.o params_letkf.o vars_letkf.o
	ftn  -O3 -parallel -what  -c	../letkf/letkf_local.f90
letkf_obs.o: ../letkf/letkf_obs.f90 common.o common_mpi.o common_mom4.o common_obs_mom4.o common_mpi_mom4.o common_letkf.o params_letkf.o params_obs.o vars_obs.o
	ftn  -O3 -parallel -what  -c	../letkf/letkf_obs.f90
letkf_tools.o: ../letkf/letkf_tools.f90 common.o common_mpi.o common_mom4.o common_mpi_mom4.o common_letkf.o letkf_obs.o letkf_local.o params_letkf.o vars_letkf.o
	ftn  -O3 -parallel -what  -c	../letkf/letkf_tools.f90
netlib2.o: ./netlib2.f
	$(FC) $(FFLAGS) $(OTHERFLAGS) -c	./netlib2.f
params_letkf.o: ../letkf/params_letkf.f90 common.o
	ftn  -O3 -parallel -what   -c	../letkf/params_letkf.f90
params_model.o: ../letkf/params_model.f90
	ftn  -O3 -parallel -what  -c	../letkf/params_model.f90
params_obs.o: ../obs/params_obs.f90 common.o
	ftn  -O3 -parallel -what  -c	../obs/params_obs.f90
vars_letkf.o: ../letkf/vars_letkf.f90 common.o params_obs.o params_model.o
	ftn  -O3 -parallel -what  -c	../letkf/vars_letkf.f90
vars_model.o: ../letkf/vars_model.f90 common.o params_model.o
	ftn  -O3 -parallel -what  -c	../letkf/vars_model.f90
vars_obs.o: ../obs/vars_obs.f90 common.o
	ftn  -O3 -parallel -what  -c	../obs/vars_obs.f90
./common.f90: ../../common/common.f90
	cp ../../common/common.f90 .
./letkf_tools.f90: ../letkf/letkf_tools.f90
	cp ../letkf/letkf_tools.f90 .
./letkf_local.f90: ../letkf/letkf_local.f90
	cp ../letkf/letkf_local.f90 .
./common_mtx.f90: ../../common/common_mtx.f90
	cp ../../common/common_mtx.f90 .
./SFMT.f90: ../../common/SFMT.f90
	cp ../../common/SFMT.f90 .
./params_letkf.f90: ../letkf/params_letkf.f90
	cp ../letkf/params_letkf.f90 .
./letkf_obs.f90: ../letkf/letkf_obs.f90
	cp ../letkf/letkf_obs.f90 .
./vars_letkf.f90: ../letkf/vars_letkf.f90
	cp ../letkf/vars_letkf.f90 .
./common_mpi_mom4.f90: ../common/common_mpi_mom4.f90
	cp ../common/common_mpi_mom4.f90 .
./common_mpi.f90: ../../common/common_mpi.f90
	cp ../../common/common_mpi.f90 .
./common_obs_mom4.f90: ../common/common_obs_mom4.f90
	cp ../common/common_obs_mom4.f90 .
./vars_model.f90: ../letkf/vars_model.f90
	cp ../letkf/vars_model.f90 .
./params_obs.f90: ../obs/params_obs.f90
	cp ../obs/params_obs.f90 .
./vars_obs.f90: ../obs/vars_obs.f90
	cp ../obs/vars_obs.f90 .
./params_model.f90: ../letkf/params_model.f90
	cp ../letkf/params_model.f90 .
./common_mom4.f90: ../common/common_mom4.f90
	cp ../common/common_mom4.f90 .
./common_letkf.f90: ../../common/common_letkf.f90
	cp ../../common/common_letkf.f90 .
./letkf.f90: ../letkf/letkf.f90
	cp ../letkf/letkf.f90 .
SRC = ../letkf/letkf_obs.f90 ./netlib2.f ../letkf/letkf_local.f90 ../common/common_mpi_mom4.f90 ../letkf/vars_letkf.f90 ../common/common_mom4.f90 ../letkf/params_letkf.f90 ../common/common_obs_mom4.f90 ../obs/vars_obs.f90 ../obs/params_obs.f90 ../../common/common.f90 ../../common/common_mpi.f90 ../../common/common_mtx.f90 ../../common/common_letkf.f90 ../letkf/params_model.f90 ../letkf/vars_model.f90 ../letkf/letkf_tools.f90 ../letkf/letkf.f90 ../../common/SFMT.f90
OBJ = letkf_obs.o netlib2.o letkf_local.o common_mpi_mom4.o vars_letkf.o common_mom4.o params_letkf.o common_obs_mom4.o vars_obs.o params_obs.o common.o common_mpi.o common_mtx.o common_letkf.o params_model.o vars_model.o letkf_tools.o letkf.o SFMT.o
OFF = ../../common/common.f90 ../letkf/letkf_tools.f90 ../letkf/letkf_local.f90 ../../common/common_mtx.f90 ../../common/SFMT.f90 ../letkf/params_letkf.f90 ../letkf/letkf_obs.f90 ../letkf/vars_letkf.f90 ../common/common_mpi_mom4.f90 ../../common/common_mpi.f90 ../common/common_obs_mom4.f90 ../letkf/vars_model.f90 ../obs/params_obs.f90 ../obs/vars_obs.f90 ../letkf/params_model.f90 ../common/common_mom4.f90 ../../common/common_letkf.f90 ../letkf/letkf.f90
clean: neat
	-rm -f .letkf.MAKE.056.cppdefs $(OBJ) letkf.MAKE.056
neat:
	-rm -f $(TMPFILES)
localize: $(OFF)
	cp $(OFF) .
TAGS: $(SRC)
	etags $(SRC)
tags: $(SRC)
	ctags $(SRC)
letkf.MAKE.056: $(OBJ) 
	$(LD) $(OBJ) -o letkf.MAKE.056  $(LDFLAGS)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             272    25    50   288.00   42.12   NaN
4273    26    50   288.12   42.12   NaN
4274    27    50   288.25   42.12   NaN
4275    28    50   288.38   42.12   NaN
4276    29    50   288.50   42.12   NaN
4277    30    50   288.62   42.12   NaN
4278    31    50   288.75   42.12   NaN
4279    32    50   288.88   42.12   NaN
4280    33    50   289.00   42.12   NaN
4281    34    50   289.12   42.12   NaN
4282    35    50   289.25   42.12   NaN
4283    36    50   289.38   42.12   1.32
4284    37    50   289.50   42.12   1.62
4285    38    50   289.62   42.12   1.87
4286    39    50   289.75   42.12   2.09
4287    40    50   289.88   42.12   2.28
4288    41    50   290.00   42.12   2.41
4289    42    50   290.12   42.12   2.58
4290    43    50   290.25   42.12   2.71
4291    44    50   290.38   42.12   2.83
4292    45    50   290.50   42.12   2.94
4293    46    50   290.62   42.12   3.03
4294    47    50   290.75   42.12   3.11
4295    48    50   290.88   42.12   3.16
4296    49    50   291.00   42.12   3.20
4297    50    50   291.12   42.12   3.23
4298    51    50   291.25   42.12   3.25
4299    52    50   291.38   42.12   3.27
4300    53    50   291.50   42.12   3.29
4301    54    50   291.62   42.12   3.30
4302    55    50   291.75   42.12   3.32
4303    56    50   291.88   42.12   3.33
4304    57    50   292.00   42.12   3.35
4305    58    50   292.12   42.12   3.38
4306    59    50   292.25   42.12   3.40
4307    60    50   292.38   42.12   3.43
4308    61    50   292.50   42.12   3.45
4309    62    50   292.62   42.12   3.45
4310    63    50   292.75   42.12   3.45
4311    64    50   292.88   42.12   3.45
4312    65    50   293.00   42.12   3.44
4313    66    50   293.12   42.12   3.43
4314    67    50   293.25   42.12   3.42
4315    68    50   293.38   42.12   3.41
4316    69    50   293.50   42.12   3.39
4317    70    50   293.62   42.12   3.38
4318    71    50   293.75   42.12   3.37
4319    72    50   293.88   42.12   3.35
4320    73    50   294.00   42.12   3.33
4321    74    50   294.12   42.12   3.30
4322    75    50   294.25   42.12   3.27
4323    76    50   294.38   42.12   3.23
4324    77    50   294.50   42.12   3.19
4325    78    50   294.62   42.12   3.15
4326    79    50   294.75   42.12   3.11
4327    80    50   294.88   42.12   3.08
4328    81    50   295.00   42.12   3.04
4329    82    50   295.12   42.12   3.01
4330    83    50   295.25   42.12   2.99
4331    84    50   295.38   42.12   2.97
4332    85    50   295.50   42.12   2.96
4333    86    50   295.62   42.12   2.94
4334    87    50   295.75   42.12   2.93
4335    88    50   295.88   42.12   2.92
4336    89    50   296.00   42.12   2.92
4337    90    50   296.12   42.12   2.91
4338    91    50   296.25   42.12   2.91
4339    92    50   296.38   42.12   2.90
4340    93    50   296.50   42.12   2.90
4341    94    50   296.62   42.12   2.89
4342    95    50   296.75   42.12   2.89
4343    96    50   296.88   42.12   2.88
4344    97    50   297.00   42.12   2.87
4345    98    50   297.12   42.12   2.86
4346    99    50   297.25   42.12   2.86
4347   100    50   297.38   42.12   2.86
4348   101    50   297.50   42.12   2.86
4349   102    50   297.62   42.12   2.85
4350   103    50   297.75   42.12   2.85
4351   104    50   297.88   42.12   2.85
4352   105    50   298.00   42.12   2.85
4353   106    50   298.12   42.12   2.85
4354   107    50   298.25   42.12   2.85
4355   108    50   298.38   42.12   2.85
4356   109    50   298.50   42.12   2.86
4357   110    50   298.62   42.12   2.86
4358   111    50   298.75   42.12   2.87
4359   112    50   298.88   42.12   2.88
4360   113    50   299.00   42.12   2.89
4361   114    50   299.12   42.12   2.91
4362   115    50   299.25   42.12   2.92
4363   116    50   299.38   42.12   2.94
4364   117    50   299.50   42.12   2.96
4365   118    50   299.62   42.12   2.98
4366   119    50   299.75   42.12   3.00
4367   120    50   299.88   42.12   3.02
4368   121    50   300.00   42.12   3.04
4369   122    50   300.12   42.12   3.06
4370   123    50   300.25   42.12   3.08
4371   124    50   300.38   42.12   3.10
4372   125    50   300.50   42.12   3.12
4373   126    50   300.62   42.12   3.14
4374   127    50   300.75   42.12   3.17
4375   128    50   300.88   42.12   3.19
4376   129    50   301.00   42.12   3.22
4377   130    50   301.12   42.12   3.25
4378   131    50   301.25   42.12   3.28
4379   132    50   301.38   42.12   3.31
4380   133    50   301.50   42.12   3.34
4381   134    50   301.62   42.12   3.37
4382   135    50   301.75   42.12   3.39
4383   136    50   301.88   42.12   3.42
4384   137    50   302.00   42.12   NaN
4385     1    49   285.00   42.00   NaN
4386     2    49   285.12   42.00   NaN
4387     3    49   285.25   42.00   NaN
4388     4    49   285.38   42.00   NaN
4389     5    49   285.50   42.00   NaN
4390     6    49   285.62   42.00   NaN
4391     7    49   285.75   42.00   NaN
4392     8    49   285.88   42.00   NaN
4393     9    49   286.00   42.00   NaN
4394    10    49   286.12   42.00   NaN
4395    11    49   286.25   42.00   NaN
4396    12    49   286.38   42.00   NaN
4397    13    49   286.50   42.00   NaN
4398    14    49   286.62   42.00   NaN
4399    15    49   286.75   42.00   NaN
4400    16    49   286.88   42.00   NaN
4401    17    49   287.00   42.00   NaN
4402    18    49   287.12   42.00   NaN
4403    19    49   287.25   42.00   NaN
4404    20    49   287.38   42.00   NaN
4405    21    49   287.50   42.00   NaN
4406    22    49   287.62   42.00   NaN
4407    23    49   287.75   42.00   NaN
4408    24    49   287.88   42.00   NaN
4409    25    49   288.00   42.00   NaN
4410    26    49   288.12   42.00   NaN
4411    27    49   288.25   42.00   NaN
4412    28    49   288.38   42.00   NaN
4413    29    49   288.50   42.00   NaN
4414    30    49   288.62   42.00   NaN
4415    31    49   288.75   42.00   NaN
4416    32    49   288.88   42.00   NaN
4417    33    49   289.00   42.00   NaN
4418    34    49   289.12   42.00   NaN
4419    35    49   289.25   42.00   NaN
4420    36    49   289.38   42.00   1.02
4421    37    49   289.50   42.00   1.56
4422    38    49   289.62   42.00   1.80
4423    39    49   289.75   42.00   1.90
4424    40    49   289.88   42.00   1.93
4425    41    49   290.00   42.00   2.31
4426    42    49   290.12   42.00   2.47
4427    43    49   290.25   42.00   2.64
4428    44    49   290.38   42.00   2.82
4429    45    49   290.50   42.00   2.96
4430    46    49   290.62   42.00   3.06
4431    47    49   290.75   42.00   3.14
4432    48    49   290.88   42.00   3.19
4433    49    49   291.00   42.00   3.23
4434    50    49   291.12   42.00   3.26
4435    51    49   291.25   42.00   3.28
4436    52    49   291.38   42.00   3.30
4437    53    49   291.50   42.00   3.32
4438    54    49   291.62   42.00   3.33
4439    55    49   291.75   42.00   3.35
4440    56    49   291.88   42.00   3.37
4441    57    49   292.00   42.00   3.39
4442    58    49   292.12   42.00   3.40
4443    59    49   292.25   42.00   3.41
4444    60    49   292.38   42.00   3.41
4445    61    49   292.50   42.00   3.42
4446    62    49   292.62   42.00   3.42
4447    63    49   292.75   42.00   3.42
4448    64    49   292.88   42.00   3.43
4449    65    49   293.00   42.00   3.43
4450    66    49   293.12   42.00   3.42
4451    67    49   293.25   42.00   3.41
4452    68    49   293.38   42.00   3.40
4453    69    49   293.50   42.00   3.39
4454    70    49   293.62   42.00   3.38
4455    71    49   293.75   42.00   3.38
4456    72    49   293.88   42.00   3.37
4457    73    49   294.00   42.00   3.37
4458    74    49   294.12   42.00   3.34
4459    75    49   294.25   42.00   3.31
4460    76    49   294.38   42.00   3.28
4461    77    49   294.50   42.00   3.24
4462    78    49   294.62   42.00   3.21
4463    79    49   294.75   42.00   3.17
4464    80    49   294.88   42.00   3.14
4465    81    49   295.00   42.00   3.11
4466    82    49   295.12   42.00   3.08
4467    83    49   295.25   42.00   3.06
4468    84    49   295.38   42.00   3.04
4469    85    49   295.50   42.00   3.03
4470    86    49   295.62   42.00   3.01
4471    87    49   295.75   42.00   2.99
4472    88    49   295.88   42.00   2.98
4473    89    49   296.00   42.00   2.98
4474    90    49   296.12   42.00   2.97
4475    91    49   296.25   42.00   2.97
4476    92    49   296.38   42.00   2.96
4477    93    49   296.50   42.00   2.95
4478    94    49   296.62   42.00   2.94
4479    95    49   296.75   42.00   2.93
4480    96    49   296.88   42.00   2.92
4481    97    49   297.00   42.00   2.90
4482    98    49   297.12   42.00   2.89
4483    99    49   297.25   42.00   2.89
4484   100    49   297.38   42.00   2.88
4485   101    49   297.50   42.00   2.88
4486   102    49   297.62   42.00   2.88
4487   103    49   297.75   42.00   2.87
4488   104    49   297.88   42.00   2.87
4489   105    49   298.00   42.00   2.87
4490   106    49   298.12   42.00   2.87
4491   107    49   298.25   42.00   2.87
4492   108    49   298.38   42.00   2.87
4493   109    49   298.50   42.00   2.88
4494   110    49   298.62   42.00   2.89
4495   111    49   298.75   42.00   2.90
4496   112    49   298.88   42.00   2.91
4497   113    49   299.00   42.00   2.92
4498   114    49   299.12   42.00   2.93
4499   115    49   299.25   42.00   2.94
4500   116    49   299.38   42.00   2.95
4501   117    49   299.50   42.00   2.97
4502   118    49   299.62   42.00   2.99
4503   119    49   299.75   42.00   3.01
4504   120    49   299.88   42.00   3.02
4505   121    49   300.00   42.00   3.04
4506   122    49   300.12   42.00   3.06
4507   123    49   300.25   42.00   3.08
4508   124    49   300.38   42.00   3.10
4509   125    49   300.50   42.00   3.12
4510   126    49   300.62   42.00   3.15
4511   127    49   300.75   42.00   3.17
4512   128    49   300.88   42.00   3.20
4513   129    49   301.00   42.00   3.22
4514   130    49   301.12   42.00   3.25
4515   131    49   301.25   42.00   3.28
4516   132    49   301.38   42.00   3.31
4517   133    49   301.50   42.00   3.34
4518   134    49   301.62   42.00   3.36
4519   135    49   301.75   42.00   3.39
4520   136    49   301.88   42.00   3.41
4521   137    49   302.00   42.00   NaN
4522     1    48   285.00   41.88   NaN
4523     2    48   285.12   41.88   NaN
4524     3    48   285.25   41.88   NaN
4525     4    48   285.38   41.88   NaN
4526     5    48   285.50   41.88   NaN
4527     6    48   285.62   41.88   NaN
4528     7    48   285.75   41.88   NaN
4529     8    48   285.88   41.88   NaN
4530     9    48   286.00   41.88   NaN
4531    10    48   286.12   41.88   NaN
4532    11    48   286.25   41.88   NaN
4533    12    48   286.38   41.88   NaN
4534    13    48   286.50   41.88   NaN
4535    14    48   286.62   41.88   NaN
4536    15    48   286.75   41.88   NaN
4537    16    48   286.88   41.88   NaN
4538    17    48   287.00   41.88   NaN
4539    18    48   287.12   41.88   NaN
4540    19    48   287.25   41.88   NaN
4541    20    48   287.38   41.88   NaN
4542    21    48   287.50   41.88   NaN
4543    22    48   287.62   41.88   NaN
4544    23    48   287.75   41.88   NaN
4545    24    48   287.88   41.88   NaN
4546    25    48   288.00   41.88   NaN
4547    26    48   288.12   41.88   NaN
4548    27    48   288.25   41.88   NaN
4549    28    48   288.38   41.88   NaN
4550    29    48   288.50   41.88   NaN
4551    30    48   288.62   41.88   NaN
4552    31    48   288.75   41.88   NaN
4553    32    48   288.88   41.88   NaN
4554    33    48   289.00   41.88   NaN
4555    34    48   289.12   41.88   NaN
4556    35    48   289.25   41.88   NaN
4557    36    48   289.38   41.88   NaN
4558    37    48   289.50   41.88   1.43
4559    38    48   289.62   41.88   1.67
4560    39    48   289.75   41.88   1.78
4561    40    48   289.88   41.88   1.46
4562    41    48   290.00   41.88   0.78
4563    42    48   290.12   41.88   2.33
4564    43    48   290.25   41.88   2.53
4565    44    48   290.38   41.88   2.80
4566    45    48   290.50   41.88   2.95
4567    46    48   290.62   41.88   3.07
4568    47    48   290.75   41.88   3.16
4569    48    48   290.88   41.88   3.22
4570    49    48   291.00   41.88   3.26
4571    50    48   291.12   41.88   3.29
4572    51    48   291.25   41.88   3.31
4573    52    48   291.38   41.88   3.33
4574    53    48   291.50   41.88   3.35
4575    54    48   291.62   41.88   3.37
4576    55    48   291.75   41.88   3.39
4577    56    48   291.88   41.88   3.39
4578    57    48   292.00   41.88   3.39
4579    58    48   292.12   41.88   3.38
4580    59    48   292.25   41.88   3.36
4581    60    48   292.38   41.88   3.36
4582    61    48   292.50   41.88   3.39
4583    62    48   292.62   41.88   3.42
4584    63    48   292.75   41.88   3.43
4585    64    48   292.88   41.88   3.43
4586    65    48   293.00   41.88   3.43
4587    66    48   293.12   41.88   3.42
4588    67    48   293.25   41.88   3.41
4589    68    48   293.38   41.88   3.40
4590    69    48   293.50   41.88   3.39
4591    70    48   293.62   41.88   3.38
4592    71    48   293.75   41.88   3.38
4593    72    48   293.88   41.88   3.38
4594    73    48   294.00   41.88   3.38
4595    74    48   294.12   41.88   3.37
4596    75    48   294.25   41.88   3.35
4597    76    48   294.38   41.88   3.32
4598    77    48   294.50   41.88   3.29
4599    78    48   294.62   41.88   3.26
4600    79    48   294.75   41.88   3.23
4601    80    48   294.88   41.88   3.20
4602    81    48   295.00   41.88   3.18
4603    82    48   295.12   41.88   3.16
4604    83    48   295.25   41.88   3.14
4605    84    48   295.38   41.88   3.12
4606    85    48   295.50   41.88   3.10
4607    86    48   295.62   41.88   3.08
4608    87    48   295.75   41.88   3.06
4609    88    48   295.88   41.88   3.05
4610    89    48   296.00   41.88   3.04
4611    90    48   296.12   41.88   3.03
4612    91    48   296.25   41.88   3.02
4613    92    48   296.38   41.88   3.01
4614    93    48   296.50   41.88   3.00
4615    94    48   296.62   41.88   2.99
4616    95    48   296.75   41.88   2.97
4617    96    48   296.88   41.88   2.95
4618    97    48   297.00   41.88   2.93
4619    98    48   297.12   41.88   2.92
4620    99    48   297.25   41.88   2.92
4621   100    48   297.38   41.88   2.91
4622   101    48   297.50   41.88   2.90
4623   102    48   297.62   41.88   2.90
4624   103    48   297.75   41.88   2.89
4625   104    48   297.88   41.88   2.89
4626   105    48   298.00   41.88   2.89
4627   106    48   298.12   41.88   2.89
4628   107    48   298.25   41.88   2.89
4629   108    48   298.38   41.88   2.89
4630   109    48   298.50   41.88   2.90
4631   110    48   298.62   41.88   2.91
4632   111    48   298.75   41.88   2.92
4633   112    48   298.88   41.88   2.93
4634   113    48   299.00   41.88   2.94
4635   114    48   299.12   41.88   2.95
4636   115    48   299.25   41.88   2.96
4637   116    48   299.38   41.88   2.97
4638   117    48   299.50   41.88   2.98
4639   118    48   299.62   41.88   3.00
4640   119    48   299.75   41.88   3.02
4641   120    48   299.88   41.88   3.03
4642   121    48   300.00   41.88   3.05
4643   122    48   300.12   41.88   3.07
4644   123    48   300.25   41.88   3.09
4645   124    48   300.38   41.88   3.11
4646   125    48   300.50   41.88   3.13
4647   126    48   300.62   41.88   3.15
4648   127    48   300.75   41.88   3.18
4649   128    48   300.88   41.88   3.20
4650   129    48   301.00   41.88   3.23
4651   130    48   301.12   41.88   3.26
4652   131    48   301.25   41.88   3.28
4653   132    48   301.38   41.88   3.31
4654   133    48   301.50   41.88   3.34
4655   134    48   301.62   41.88   3.36
4656   135    48   301.75   41.88   3.39
4657   136    48   301.88   41.88   3.41
4658   137    48   302.00   41.88   NaN
4659     1    47   285.00   41.75   NaN
4660     2    47   285.12   41.75   NaN
4661     3    47   285.25   41.75   NaN
4662     4    47   285.38   41.75   NaN
4663     5    47   285.50   41.75   NaN
4664     6    47   285.62   41.75   NaN
4665     7    47   285.75   41.75   NaN
4666     8    47   285.88   41.75   NaN
4667     9    47   286.00   41.75   NaN
4668    10    47   286.12   41.75   NaN
4669    11    47   286.25   41.75   NaN
4670    12    47   286.38   41.75   NaN
4671    13    47   286.50   41.75   NaN
4672    14    47   286.62   41.75   NaN
4673    15    47   286.75   41.75   NaN
4674    16    47   286.88   41.75   NaN
4675    17    47   287.00   41.75   NaN
4676    18    47   287.12   41.75   NaN
4677    19    47   287.25   41.75   NaN
4678    20    47   287.38   41.75   NaN
4679    21    47   287.50   41.75   NaN
4680    22    47   287.62   41.75   NaN
4681    23    47   287.75   41.75   NaN
4682    24    47   287.88   41.75   NaN
4683    25    47   288.00   41.75   NaN
4684    26    47   288.12   41.75   NaN
4685    27    47   288.25   41.75   NaN
4686    28    47   288.38   41.75   NaN
4687    29    47   288.50   41.75   NaN
4688    30    47   288.62   41.75   NaN
4689    31    47   288.75   41.75   NaN
4690    32    47   288.88   41.75   NaN
4691    33    47   289.00   41.75   NaN
4692    34    47   289.12   41.75   NaN
4693    35    47   289.25   41.75   NaN
4694    36    47   289.38   41.75   NaN
4695    37    47   289.50   41.75   NaN
4696    38    47   289.62   41.75   1.45
4697    39    47   289.75   41.75   1.50
4698    40    47   289.88   41.75   1.16
4699    41    47   290.00   41.75   NaN
4700    42    47   290.12   41.75   2.15
4701    43    47   290.25   41.75   2.45
4702    44    47   290.38   41.75   2.76
4703    45    47   290.50   41.75   2.94
4704    46    47   290.62   41.75   3.06
4705    47    47   290.75   41.75   3.17
4706    48    47   290.88   41.75   3.24
4707    49    47   291.00   41.75   3.28
4708    50    47   291.12   41.75   3.32
4709    51    47   291.25   41.75   3.34
4710    52    47   291.38   41.75   3.36
4711    53    47   291.50   41.75   3.38
4712    54    47   291.62   41.75   3.39
4713    55    47   291.75   41.75   3.39
4714    56    47   291.88   41.75   3.37
4715    57    47   292.00   41.75   3.33
4716    58    47   292.12   41.75   3.29
4717    59    47   292.25   41.75   3.30
4718    60    47   292.38   41.75   3.36
4719    61    47   292.50   41.75   3.39
4720    62    47   292.62   41.75   3.40
4721    63    47   292.75   41.75   3.42
4722    64    47   292.88   41.75   3.43
4723    65    47   293.00   41.75   3.42
4724    66    47   293.12   41.75   3.42
4725    67    47   293.25   41.75   3.40
4726    68    47   293.38   41.75   3.39
4727    69    47   293.50   41.75   3.38
4728    70    47   293.62   41.75   3.38
4729    71    47   293.75   41.75   3.38
4730    72    47   293.88   41.75   3.38
4731    73    47   294.00   41.75   3.38
4732    74    47   294.12   41.75   3.38
4733    75    47   294.25   41.75   3.38
4734    76    47   294.38   41.75   3.36
4735    77    47   294.50   41.75   3.34
4736    78    47   294.62   41.75   3.32
4737    79    47   294.75   41.75   3.29
4738    80    47   294.88   41.75   3.27
4739    81    47   295.00   41.75   3.25
4740    82    47   295.12   41.75   3.23
4741    83    47   295.25   41.75   3.21
4742    84    47   295.38   41.75   3.19
4743    85    47   295.50   41.75   3.17
4744    86    47   295.62   41.75   3.15
4745    87    47   295.75   41.75   3.13
4746    88    47   295.88   41.75   3.12
4747    89    47   296.00   41.75   3.10
4748    90    47   296.12   41.75   3.09
4749    91    47   296.25   41.75   3.08
4750    92    47   296.38   41.75   3.06
4751    93    47   296.50   41.75   3.04
4752    94    47   296.62   41.75   3.02
4753    95    47   296.75   41.75   3.00
4754    96    47   296.88   41.75   2.99
4755    97    47   297.00   41.75   2.97
4756    98    47   297.12   41.75   2.95
4757    99    47   297.25   41.75   2.94
4758   100    47   297.38   41.75   2.93
4759   101    47   297.50   41.75   2.93
4760   102    47   297.62   41.75   2.92
4761   103    47   297.75   41.75   2.92
4762   104    47   297.88   41.75   2.91
4763   105    47   298.00   41.75   2.91
4764   106    47   298.12   41.75   2.91
4765   107    47   298.25   41.75   2.91
4766   108    47   298.38   41.75   2.92
4767   109    47   298.50   41.75   2.93
4768   110    47   298.62   41.75   2.94
4769   111    47   298.75   41.75   2.95
4770   112    47   298.88   41.75   2.95
4771   113    47   299.00   41.75   2.96
4772   114    47   299.12   41.75   2.97
4773   115    47   299.25   41.75   2.98
4774   116    47   299.38   41.75   2.99
4775   117    47   299.50   41.75   3.00
4776   118    47   299.62   41.75   3.02
4777   119    47   299.75   41.75   3.03
4778   120    47   299.88   41.75   3.05
4779   121    47   300.00   41.75   3.06
4780   122    47   300.12   41.75   3.08
4781   123    47   300.25   41.75   3.10
4782   124    47   300.38   41.75   3.12
4783   125    47   300.50   41.75   3.14
4784   126    47   300.62   41.75   3.16
4785   127    47   300.75   41.75   3.19
4786   128    47   300.88   41.75   3.21
4787   129    47   301.00   41.75   3.24
4788   130    47   301.12   41.75   3.26
4789   131    47   301.25   41.75   3.29
4790   132    47   301.38   41.75   3.31
4791   133    47   301.50   41.75   3.34
4792   134    47   301.62   41.75   3.36
4793   135    47   301.75   41.75   3.38
4794   136    47   301.88   41.75   3.40
4795   137    47   302.00   41.75   NaN
4796     1    46   285.00   41.62   NaN
4797     2    46   285.12   41.62   NaN
4798     3    46   285.25   41.62   NaN
4799     4    46   285.38   41.62   NaN
4800     5    46   285.50   41.62   NaN
4801     6    46   285.62   41.62   NaN
4802     7    46   285.75   41.62   NaN
4803     8    46   285.88   41.62   NaN
4804     9    46   286.00   41.62   NaN
4805    10    46   286.12   41.62   NaN
4806    11    46   286.25   41.62   NaN
4807    12    46   286.38   41.62   NaN
4808    13    46   286.50   41.62   NaN
4809    14    46   286.62   41.62   NaN
4810    15    46   286.75   41.62   NaN
4811    16    46   286.88   41.62   NaN
4812    17    46   287.00   41.62   NaN
4813    18    46   287.12   41.62   NaN
4814    19    46   287.25   41.62   NaN
4815    20    46   287.38   41.62   NaN
4816    21    46   287.50   41.62   NaN
4817    22    46   287.62   41.62   NaN
4818    23    46   287.75   41.62   NaN
4819    24    46   287.88   41.62   NaN
4820    25    46   288.00   41.62   NaN
4821    26    46   288.12   41.62   NaN
4822    27    46   288.25   41.62   NaN
4823    28    46   288.38   41.62   NaN
4824    29    46   288.50   41.62   NaN
4825    30    46   288.62   41.62   0.02
4826    31    46   288.75   41.62   0.05
4827    32    46   288.88   41.62   NaN
4828    33    46   289.00   41.62   NaN
4829    34    46   289.12   41.62   0.08
4830    35    46   289.25   41.62   0.59
4831    36    46   289.38   41.62   0.62
4832    37    46   289.50   41.62   NaN
4833    38    46   289.62   41.62   0.85
4834    39    46   289.75   41.62   1.00
4835    40    46   289.88   41.62   1.12
4836    41    46   290.00   41.62   0.73
4837    42    46   290.12   41.62   1.91
4838    43    46   290.25   41.62   2.34
4839    44    46   290.38   41.62   2.70
4840    45    46   290.50   41.62   2.90
4841    46    46   290.62   41.62   3.05
4842    47    46   290.75   41.62   3.17
4843    48    46   290.88   41.62   3.24
4844    49    46   291.00   41.62   3.29
4845    50    46   291.12   41.62   3.33
4846    51    46   291.25   41.62   3.36
4847    52    46   291.38   41.62   3.39
4848    53    46   291.50   41.62   3.40
4849    54    46   291.62   41.62   3.37
4850    55    46   291.75   41.62   3.32
4851    56    46   291.88   41.62   3.28
4852    57    46   292.00   41.62   3.28
4853    58    46   292.12   41.62   3.29
4854    59    46   292.25   41.62   3.30
4855    60    46   292.38   41.62   3.36
4856    61    46   292.50   41.62   3.39
4857    62    46   292.62   41.62   3.42
4858    63    46   292.75   41.62   3.43
4859    64    46   292.88   41.62   3.43
4860    65    46   293.00   41.62   3.43
4861    66    46   293.12   41.62   3.42
4862    67    46   293.25   41.62   3.41
4863    68    46   293.38   41.62   3.39
4864    69    46   293.50   41.62   3.38
4865    70    46   293.62   41.62   3.38
4866    71    46   293.75   41.62   3.38
4867    72    46   293.88   41.62   3.38
4868    73    46   294.00   41.62   3.39
4869    74    46   294.12   41.62   3.39
4870    75    46   294.25   41.62   3.39
4871    76    46   294.38   41.62   3.38
4872    77    46   294.50   41.62   3.37
4873    78    46   294.62   41.62   3.35
4874    79    46   294.75   41.62   3.33
4875    80    46   294.88   41.62   3.31
4876    81    46   295.00   41.62   3.29
4877    82    46   295.12   41.62   3.28
4878    83    46   295.25   41.62   3.26
4879    84    46   295.38   41.62   3.25
4880    85    46   295.50   41.62   3.23
4881    86    46   295.62   41.62   3.21
4882    87    46   295.75   41.62   3.20
4883    88    46   295.88   41.62   3.18
4884    89    46   296.00   41.62   3.17
4885    90    46   296.12   41.62   3.15
4886    91    46   296.25   41.62   3.14
4887    92    46   296.38   41.62   3.12
4888    93    46   296.50   41.62   3.10
4889    94    46   296.62   41.62   3.08
4890    95    46   296.75   41.62   3.06
4891    96    46   296.88   41.62   3.04
4892    97    46   297.00   41.62   3.02
4893    98    46   297.12   41.62   3.00
4894    99    46   297.25   41.62   2.99
4895   100    46   297.38   41.62   2.98
4896   101    46   297.50   41.62   2.97
4897   102    46   297.62   41.62   2.96
4898   103    46   297.75   41.62   2.95
4899   104    46   297.88   41.62   2.95
4900   105    46   298.00   41.62   2.94
4901   106    46   298.12   41.62   2.94
4902   107    46   298.25   41.62   2.94
4903   108    46   298.38   41.62   2.95
4904   109    46   298.50   41.62   2.95
4905   110    46   298.62   41.62   2.96
4906   111    46   298.75   41.62   2.97
4907   112    46   298.88   41.62   2.98
4908   113    46   299.00   41.62   2.98
4909   114    46   299.12   41.62   2.99
4910   115    46   299.25   41.62   3.00
4911   116    46   299.38   41.62   3.01
4912   117    46   299.50   41.62   3.02
4913   118    46   299.62   41.62   3.03
4914   119    46   299.75   41.62   3.04
4915   120    46   299.88   41.62   3.06
4916   121    46   300.00   41.62   3.07
4917   122    46   300.12   41.62   3.09
4918   123    46   300.25   41.62   3.11
4919   124    46   300.38   41.62   3.13
4920   125    46   300.50   41.62   3.15
4921   126    46   300.62   41.62   3.17
4922   127    46   300.75   41.62   3.19
4923   128    46   300.88   41.62   3.22
4924   129    46   301.00   41.62   3.24
4925   130    46   301.12   41.62   3.27
4926   131    46   301.25   41.62   3.29
4927   132    46   301.38   41.62   3.32
4928   133    46   301.50   41.62   3.34
4929   134    46   301.62   41.62   3.36
4930   135    46   301.75   41.62   3.38
4931   136    46   301.88   41.62   3.40
4932   137    46   302.00   41.62   NaN
4933     1    45   285.00   41.50   NaN
4934     2    45   285.12   41.50   NaN
4935     3    45   285.25   41.50   NaN
4936     4    45   285.38   41.50   NaN
4937     5    45   285.50   41.50   NaN
4938     6    45   285.62   41.50   NaN
4939     7    45   285.75   41.50   NaN
4940     8    45   285.88   41.50   NaN
4941     9    45   286.00   41.50   NaN
4942    10    45   286.12   41.50   NaN
4943    11    45   286.25   41.50   NaN
4944    12    45   286.38   41.50   NaN
4945    13    45   286.50   41.50   NaN
4946    14    45   286.62   41.50   NaN
4947    15    45   286.75   41.50   NaN
4948    16    45   286.88   41.50   NaN
4949    17    45   287.00   41.50   NaN
4950    18    45   287.12   41.50   NaN
4951    19    45   287.25   41.50   NaN
4952    20    45   287.38   41.50   NaN
4953    21    45   287.50   41.50   NaN
4954    22    45   287.62   41.50   NaN
4955    23    45   287.75   41.50   NaN
4956    24    45   287.88   41.50   NaN
4957    25    45   288.00   41.50   NaN
4958    26    45   288.12   41.50   NaN
4959    27    45   288.25   41.50   NaN
4960    28    45   288.38   41.50   NaN
4961    29    45   288.50   41.50   NaN
4962    30    45   288.62   41.50   0.60
4963    31    45   288.75   41.50   0.57
4964    32    45   288.88   41.50   0.58
4965    33    45   289.00   41.50   0.61
4966    34    45   289.12   41.50   0.60
4967    35    45   289.25   41.50   0.63
4968    36    45   289.38   41.50   0.72
4969    37    45   289.50   41.50   0.71
4970    38    45   289.62   41.50   0.95
4971    39    45   289.75   41.50   1.18
4972    40    45   289.88   41.50   1.24
4973    41    45   290.00   41.50   1.33
4974    42    45   290.12   41.50   1.77
4975    43    45   290.25   41.50   2.21
4976    44    45   290.38   41.50   2.60
4977    45    45   290.50   41.50   2.84
4978    46    45   290.62   41.50   3.02
4979    47    45   290.75   41.50   3.15
4980    48    45   290.88   41.50   3.24
4981    49    45   291.00   41.50   3.30
4982    50    45   291.12   41.50   3.34
4983    51    45   291.25   41.50   3.37
4984    52    45   291.38   41.50   3.40
4985    53    45   291.50   41.50   3.40
4986    54    45   291.62   41.50   3.40
4987    55    45   291.75   41.50   3.39
4988    56    45   291.88   41.50   3.35
4989    57    45   292.00   41.50   3.33
4990    58    45   292.12   41.50   3.34
4991    59    45   292.25   41.50   3.36
4992    60    45   292.38   41.50   3.37
4993    61    45   292.50   41.50   3.41
4994    62    45   292.62   41.50   3.42
4995    63    45   292.75   41.50   3.44
4996    64    45   292.88   41.50   3.45
4997    65    45   293.00   41.50   3.45
4998    66    45   293.12   41.50   3.43
4999    67    45   293.25   41.50   3.39
5000    68    45   293.38   41.50   3.38
5001    69    45   293.50   41.50   3.38
5002    70    45   293.62   41.50   3.39
5003    71    45   293.75   41.50   3.38
5004    72    45   293.88   41.50   3.38
5005    73    45   294.00   41.50   3.39
5006    74    45   294.12   41.50   3.39
5007    75    45   294.25   41.50   3.40
5008    76    45   294.38   41.50   3.39
5009    77    45   294.50   41.50   3.38
5010    78    45   294.62   41.50   3.37
5011    79    45   294.75   41.50   3.36
5012    80    45   294.88   41.50   3.34
5013    81    45   295.00   41.50   3.32
5014    82    45   295.12   41.50   3.31
5015    83    45   295.25   41.50   3.30
5016    84    45   295.38   41.50   3.29
5017    85    45   295.50   41.50   3.28
5018    86    45   295.62   41.50   3.27
5019    87    45   295.75   41.50   3.26
5020    88    45   295.88   41.50   3.24
5021    89    45   296.00   41.50   3.22
5022    90    45   296.12   41.50   3.21
5023    91    45   296.25   41.50   3.20
5024    92    45   296.38   41.50   3.18
5025    93    45   296.50   41.50   3.17
5026    94    45   296.62   41.50   3.15
5027    95    45   296.75   41.50   3.12
5028    96    45   296.88   41.50   3.10
5029    97    45   297.00   41.50   3.08
5030    98    45   297.12   41.50   3.06
5031    99    45   297.25   41.50   3.05
5032   100    45   297.38   41.50   3.03
5033   101    45   297.50   41.50   3.02
5034   102    45   297.62   41.50   3.01
5035   103    45   297.75   41.50   3.00
5036   104    45   297.88   41.50   3.00
5037   105    45   298.00   41.50   2.99
5038   106    45   298.12   41.50   2.98
5039   107    45   298.25   41.50   2.98
5040   108    45   298.38   41.50   2.98
5041   109    45   298.50   41.50   2.98
5042   110    45   298.62   41.50   2.99
5043   111    45   298.75   41.50   3.00
5044   112    45   298.88   41.50   3.00
5045   113    45   299.00   41.50   3.00
5046   114    45   299.12   41.50   3.01
5047   115    45   299.25   41.50   3.01
5048   116    45   299.38   41.50   3.02
5049   117    45   299.50   41.50   3.03
5050   118    45   299.62   41.50   3.04
5051   119    45   299.75   41.50   3.05
5052   120    45   299.88   41.50   3.07
5053   121    45   300.00   41.50   3.08
5054   122    45   300.12   41.50   3.10
5055   123    45   300.25   41.50   3.11
5056   124    45   300.38   41.50   3.13
5057   125    45   300.50   41.50   3.15
5058   126    45   300.62   41.50   3.17
5059   127    45   300.75   41.50   3.20
5060   128    45   300.88   41.50   3.22
5061   129    45   301.00   41.50   3.25
5062   130    45   301.12   41.50   3.27
5063   131    45   301.25   41.50   3.29
5064   132    45   301.38   41.50   3.32
5065   133    45   301.50   41.50   3.34
5066   134    45   301.62   41.50   3.36
5067   135    45   301.75   41.50   3.38
5068   136    45   301.88   41.50   3.40
5069   137    45   302.00   41.50   NaN
5070     1    44   285.00   41.38   NaN
5071     2    44   285.12   41.38   NaN
5072     3    44   285.25   41.38   NaN
5073     4    44   285.38   41.38   NaN
5074     5    44   285.50   41.38   NaN
5075     6    44   285.62   41.38   NaN
5076     7    44   285.75   41.38   NaN
5077     8    44   285.88   41.38   NaN
5078     9    44   286.00   41.38   NaN
5079    10    44   286.12   41.38   NaN
5080    11    44   286.25   41.38   NaN
5081    12    44   286.38   41.38   NaN
5082    13    44   286.50   41.38   NaN
5083    14    44   286.62   41.38   NaN
5084    15    44   286.75   41.38   NaN
5085    16    44   286.88   41.38   NaN
5086    17    44   287.00   41.38   NaN
5087    18    44   287.12   41.38   NaN
5088    19    44   287.25   41.38   NaN
5089    20    44   287.38   41.38   NaN
5090    21    44   287.50   41.38   NaN
5091    22    44   287.62   41.38   NaN
5092    23    44   287.75   41.38   NaN
5093    24    44   287.88   41.38   NaN
5094    25    44   288.00   41.38   NaN
5095    26    44   288.12   41.38   NaN
5096    27    44   288.25   41.38   NaN
5097    28    44   288.38   41.38   0.21
5098    29    44   288.50   41.38   0.26
5099    30    44   288.62   41.38   0.61
5100    31    44   288.75   41.38   0.70
5101    32    44   288.88   41.38   0.75
5102    33    44   289.00   41.38   0.82
5103    34    44   289.12   41.38   0.80
5104    35    44   289.25   41.38   0.75
5105    36    44   289.38   41.38   0.85
5106    37    44   289.50   41.38   0.65
5107    38    44   289.62   41.38   0.93
5108    39    44   289.75   41.38   1.10
5109    40    44   289.88   41.38   1.35
5110    41    44   290.00   41.38   1.37
5111    42    44   290.12   41.38   1.82
5112    43    44   290.25   41.38   2.10
5113    44    44   290.38   41.38   2.48
5114    45    44   290.50   41.38   2.76
5115    46    44   290.62   41.38   2.98
5116    47    44   290.75   41.38   3.13
5117    48    44   290.88   41.38   3.23
5118    49    44   291.00   41.38   3.29
5119    50    44   291.12   41.38   3.34
5120    51    44   291.25   41.38   3.38
5121    52    44   291.38   41.38   3.40
5122    53    44   291.50   41.38   3.41
5123    54    44   291.62   41.38   3.41
5124    55    44   291.75   41.38   3.40
5125    56    44   291.88   41.38   3.37
5126    57    44   292.00   41.38   3.38
5127    58    44   292.12   41.38   3.39
5128    59    44   292.25   41.38   3.40
5129    60    44   292.38   41.38   3.41
5130    61    44   292.50   41.38   3.43
5131    62    44   292.62   41.38   3.45
5132    63    44   292.75   41.38   3.46
5133    64    44   292.88   41.38   3.47
5134    65    44   293.00   41.38   3.47
5135    66    44   293.12   41.38   3.46
5136    67    44   293.25   41.38   3.44
5137    68    44   293.38   41.38   3.43
5138    69    44   293.50   41.38   3.42
5139    70    44   293.62   41.38   3.41
5140    71    44   293.75   41.38   3.40
5141    72    44   293.88   41.38   3.39
5142    73    44   294.00   41.38   3.39
5143    74    44   294.12   41.38   3.40
5144    75    44   294.25   41.38   3.40
5145    76    44   294.38   41.38   3.40
5146    77    44   294.50   41.38   3.39
5147    78    44   294.62   41.38   3.38
5148    79    44   294.75   41.38   3.37
5149    80    44   294.88   41.38   3.36
5150    81    44   295.00   41.38   3.34
5151    82    44   295.12   41.38   3.33
5152    83    44   295.25   41.38   3.32
5153    84    44   295.38   41.38   3.32
5154    85    44   295.50   41.38   3.32
5155    86    44   295.62   41.38   3.31
5156    87    44   295.75   41.38   3.30
5157    88    44   295.88   41.38   3.29
5158    89    44   296.00   41.38   3.28
5159    90    44   296.12   41.38   3.26
5160    91    44   296.25   41.38   3.25
5161    92    44   296.38   41.38   3.24
5162    93    44   296.50   41.38   3.22
5163    94    44   296.62   41.38   3.21
5164    95    44   296.75   41.38   3.19
5165    96    44   296.88   41.38   3.17
5166    97    44   297.00   41.38   3.15
5167    98    44   297.12   41.38   3.13
5168    99    44   297.25   41.38   3.11
5169   100    44   297.38   41.38   3.10
5170   101    44   297.50   41.38   3.08
5171   102    44   297.62   41.38   3.07
5172   103    44   297.75   41.38   3.06
5173   104    44   297.88   41.38   3.05
5174   105    44   298.00   41.38   3.04
5175   106    44   298.12   41.38   3.03
5176   107    44   298.25   41.38   3.02
5177   108    44   298.38   41.38   3.01
5178   109    44   298.50   41.38   3.01
5179   110    44   298.62   41.38   3.02
5180   111    44   298.75   41.38   3.02
5181   112    44   298.88   41.38   3.03
5182   113    44   299.00   41.38   3.03
5183   114    44   299.12   41.38   3.03
5184   115    44   299.25   41.38   3.03
5185   116    44   299.38   41.38   3.03
5186   117    44   299.50   41.38   3.04
5187   118    44   299.62   41.38   3.05
5188   119    44   299.75   41.38   3.06
5189   120    44   299.88   41.38   3.07
5190   121    44   300.00   41.38   3.09
5191   122    44   300.12   41.38   3.10
5192   123    44   300.25   41.38   3.12
5193   124    44   300.38   41.38   3.14
5194   125    44   300.50   41.38   3.16
5195   126    44   300.62   41.38   3.18
5196   127    44   300.75   41.38   3.20
5197   128    44   300.88   41.38   3.22
5198   129    44   301.00   41.38   3.25
5199   130    44   301.12   41.38   3.27
5200   131    44   301.25   41.38   3.30
5201   132    44   301.38   41.38   3.32
5202   133    44   301.50   41.38   3.34
5203   134    44   301.62   41.38   3.36
5204   135    44   301.75   41.38   3.38
5205   136    44   301.88   41.38   3.40
5206   137    44   302.00   41.38   NaN
5207     1    43   285.00   41.25   NaN
5208     2    43   285.12   41.25   NaN
5209     3    43   285.25   41.25   NaN
5210     4    43   285.38   41.25   NaN
5211     5    43   285.50   41.25   NaN
5212     6    43   285.62   41.25   NaN
5213     7    43   285.75   41.25   NaN
5214     8    43   285.88   41.25   NaN
5215     9    43   286.00   41.25   NaN
5216    10    43   286.12   41.25   NaN
5217    11    43   286.25   41.25   NaN
5218    12    43   286.38   41.25   NaN
5219    13    43   286.50   41.25   NaN
5220    14    43   286.62   41.25   NaN
5221    15    43   286.75   41.25   NaN
5222    16    43   286.88   41.25   NaN
5223    17    43   287.00   41.25   NaN
5224    18    43   287.12   41.25   0.02
5225    19    43   287.25   41.25   0.05
5226    20    43   287.38   41.25   0.19
5227    21    43   287.50   41.25   0.49
5228    22    43   287.62   41.25   0.58
5229    23    43   287.75   41.25   0.63
5230    24    43   287.88   41.25   0.60
5231    25    43   288.00   41.25   0.60
5232    26    43   288.12   41.25   0.62
5233    27    43   288.25   41.25   0.65
5234    28    43   288.38   41.25   0.66
5235    29    43   288.50   41.25   0.70
5236    30    43   288.62   41.25   0.82
5237    31    43   288.75   41.25   0.90
5238    32    43   288.88   41.25   0.94
5239    33    43   289.00   41.25   1.02
5240    34    43   289.12   41.25   1.00
5241    35    43   289.25   41.25   1.07
5242    36    43   289.38   41.25   1.17
5243    37    43   289.50   41.25   1.16
5244    38    43   289.62   41.25   1.33
5245    39    43   289.75   41.25   1.27
5246    40    43   289.88   41.25   1.41
5247    41    43   290.00   41.25   1.50
5248    42    43   290.12   41.25   1.89
5249    43    43   290.25   41.25   2.14
5250    44    43   290.38   41.25   2.46
5251    45    43   290.50   41.25   2.68
5252    46    43   290.62   41.25   2.94
5253    47    43   290.75   41.25   3.11
5254    48    43   290.88   41.25   3.21
5255    49    43   291.00   41.25   3.28
5256    50    43   291.12   41.25   3.33
5257    51    43   291.25   41.25   3.37
5258    52    43   291.38   41.25   3.39
5259    53    43   291.50   41.25   3.40
5260    54    43   291.62   41.25   3.40
5261    55    43   291.75   41.25   3.39
5262    56    43   291.88   41.25   3.40
5263    57    43   292.00   41.25   3.41
5264    58    43   292.12   41.25   3.41
5265    59    43   292.25   41.25   3.44
5266    60    43   292.38   41.25   3.44
5267    61    43   292.50   41.25   3.47
5268    62    43   292.62   41.25   3.49
5269    63    43   292.75   41.25   3.50
5270    64    43   292.88   41.25   3.50
5271    65    43   293.00   41.25   3.49
5272    66    43   293.12   41.25   3.48
5273    67    43   293.25   41.25   3.47
5274    68    43   293.38   41.25   3.46
5275    69    43   293.50   41.25   3.44
5276    70    43   293.62   41.25   3.43
5277    71    43   293.75   41.25   3.41
5278    72    43   293.88   41.25   3.40
5279    73    43   294.00   41.25   3.39
5280    74    43   294.12   41.25   3.40
5281    75    43   294.25   41.25   3.40
5282    76    43   294.38   41.25   3.40
5283    77    43   294.50   41.25   3.40
5284    78    43   294.62   41.25   3.39
5285    79    43   294.75   41.25   3.38
5286    80    43   294.88   41.25   3.37
5287    81    43   295.00   41.25   3.36
5288    82    43   295.12   41.25   3.35
5289    83    43   295.25   41.25   3.34
5290    84    43   295.38   41.25   3.34
5291    85    43   295.50   41.25   3.34
5292    86    43   295.62   41.25   3.34
5293    87    43   295.75   41.25   3.34
5294    88    43   295.88   41.25   3.34
5295    89    43   296.00   41.25   3.33
5296    90    43   296.12   41.25   3.32
5297    91    43   296.25   41.25   3.31
5298    92    43   296.38   41.25   3.30
5299    93    43   296.50   41.25   3.28
5300    94    43   296.62   41.25   3.27
5301    95    43   296.75   41.25   3.26
5302    96    43   296.88   41.25   3.24
5303    97    43   297.00   41.25   3.22
5304    98    43   297.12   41.25   3.20
5305    99    43   297.25   41.25   3.18
5306   100    43   297.38   41.25   3.16
5307   101    43   297.50   41.25   3.15
5308   102    43   297.62   41.25   3.14
5309   103    43   297.75   41.25   3.12
5310   104    43   297.88   41.25   3.11
5311   105    43   298.00   41.25   3.10
5312   106    43   298.12   41.25   3.08
5313   107    43   298.25   41.25   3.07
5314   108    43   298.38   41.25   3.06
5315   109    43   298.50   41.25   3.05
5316   110    43   298.62   41.25   3.05
5317   111    43   298.75   41.25   3.05
5318   112    43   298.88   41.25   3.05
5319   113    43   299.00   41.25   3.05
5320   114    43   299.12   41.25   3.05
5321   115    43   299.25   41.25   3.04
5322   116    43   299.38   41.25   3.05
5323   117    43   299.50   41.25   3.05
5324   118    43   299.62   41.25   3.06
5325   119    43   299.75   41.25   3.07
5326   120    43   299.88   41.25   3.08
5327   121    43   300.00   41.25   3.09
5328   122    43   300.12   41.25   3.10
5329   123    43   300.25   41.25   3.12
5330   124    43   300.38   41.25   3.14
5331   125    43   300.50   41.25   3.16
5332   126    43   300.62   41.25   3.18
5333   127    43   300.75   41.25   3.20
5334   128    43   300.88   41.25   3.23
5335   129    43   301.00   41.25   3.25
5336   130    43   301.12   41.25   3.27
5337   131    43   301.25   41.25   3.30
5338   132    43   301.38   41.25   3.32
5339   133    43   301.50   41.25   3.34
5340   134    43   301.62   41.25   3.36
5341   135    43   301.75   41.25   3.38
5342   136    43   301.88   41.25   3.40
5343   137    43   302.00   41.25   NaN
5344     1    42   285.00   41.12   NaN
5345     2    42   285.12   41.12   NaN
5346     3    42   285.25   41.12   NaN
5347     4    42   285.38   41.12   NaN
5348     5    42   285.50   41.12   NaN
5349     6    42   285.62   41.12   NaN
5350     7    42   285.75   41.12   NaN
5351     8    42   285.88   41.12   NaN
5352     9    42   286.00   41.12   NaN
5353    10    42   286.12   41.12   0.00
5354    11    42   286.25   41.12   NaN
5355    12    42   286.38   41.12   NaN
5356    13    42   286.50   41.12   NaN
5357    14    42   286.62   41.12   NaN
5358    15    42   286.75   41.12   0.01
5359    16    42   286.88   41.12   0.01
5360    17    42   287.00   41.12   0.02
5361    18    42   287.12   41.12   0.04
5362    19    42   287.25   41.12   0.12
5363    20    42   287.38   41.12   0.51
5364    21    42   287.50   41.12   0.54
5365    22    42   287.62   41.12   0.58
5366    23    42   287.75   41.12   0.62
5367    24    42   287.88   41.12   0.62
5368    25    42   288.00   41.12   0.71
5369    26    42   288.12   41.12   0.77
5370    27    42   288.25   41.12   0.82
5371    28    42   288.38   41.12   0.87
5372    29    42   288.50   41.12   0.97
5373    30    42   288.62   41.12   1.04
5374    31    42   288.75   41.12   1.12
5375    32    42   288.88   41.12   1.18
5376    33    42   289.00   41.12   1.23
5377    34    42   289.12   41.12   1.22
5378    35    42   289.25   41.12   1.33
5379    36    42   289.38   41.12   1.41
5380    37    42   289.50   41.12   1.46
5381    38    42   289.62   41.12   1.56
5382    39    42   289.75   41.12   1.51
5383    40    42   289.88   41.12   1.73
5384    41    42   290.00   41.12   1.78
5385    42    42   290.12   41.12   2.07
5386    43    42   290.25   41.12   2.28
5387    44    42   290.38   41.12   2.55
5388    45    42   290.50   41.12   2.69
5389    46    42   290.62   41.12   2.92
5390    47    42   290.75   41.12   3.09
5391    48    42   290.88   41.12   3.20
5392    49    42   291.00   41.12   3.27
5393    50    42   291.12   41.12   3.32
5394    51    42   291.25   41.12   3.35
5395    52    42   291.38   41.12   3.38
5396    53    42   291.50   41.12   3.38
5397    54    42   291.62   41.12   3.38
5398    55    42   291.75   41.12   3.39
5399    56    42   291.88   41.12   3.41
5400    57    42   292.00   41.12   3.43
5401    58    42   292.12   41.12   3.45
5402    59    42   292.25   41.12   3.47
5403    60    42   292.38   41.12   3.50
5404    61    42   292.50   41.12   3.51
5405    62    42   292.62   41.12   3.52
5406    63    42   292.75   41.12   3.52
5407    64    42   292.88   41.12   3.52
5408    65    42   293.00   41.12   3.51
5409    66    42   293.12   41.12   3.50
5410    67    42   293.25   41.12   3.49
5411    68    42   293.38   41.12   3.47
5412    69    42   293.50   41.12   3.46
5413    70    42   293.62   41.12   3.44
5414    71    42   293.75   41.12   3.43
5415    72    42   293.88   41.12   3.42
5416    73    42   294.00   41.12   3.41
5417    74    42   294.12   41.12   3.41
5418    75    42   294.25   41.12   3.41
5419    76    42   294.38   41.12   3.41
5420    77    42   294.50   41.12   3.40
5421    78    42   294.62   41.12   3.40
5422    79    42   294.75   41.12   3.39
5423    80    42   294.88   41.12   3.39
5424    81    42   295.00   41.12   3.38
5425    82    42   295.12   41.12   3.37
5426    83    42   295.25   41.12   3.37
5427    84    42   295.38   41.12   3.37
5428    85    42   295.50   41.12   3.37
5429    86    42   295.62   41.12   3.37
5430    87    42   295.75   41.12   3.38
5431    88    42   295.88   41.12   3.38
5432    89    42   296.00   41.12   3.37
5433    90    42   296.12   41.12   3.37
5434    91    42   296.25   41.12   3.36
5435    92    42   296.38   41.12   3.35
5436    93    42   296.50   41.12   3.34
5437    94    42   296.62   41.12   3.32
5438    95    42   296.75   41.12   3.31
5439    96    42   296.88   41.12   3.30
5440    97    42   297.00   41.12   3.28
5441    98    42   297.12   41.12   3.26
5442    99    42   297.25   41.12   3.25
5443   100    42   297.38   41.12   3.23
5444   101    42   297.50   41.12   3.21
5445   102    42   297.62   41.12   3.20
5446   103    42   297.75   41.12   3.19
5447   104    42   297.88   41.12   3.17
5448   105    42   298.00   41.12   3.15
5449   106    42   298.12   41.12   3.14
5450   107    42   298.25   41.12   3.12
5451   108    42   298.38   41.12   3.10
5452   109    42   298.50   41.12   3.09
5453   110    42   298.62   41.12   3.08
5454   111    42   298.75   41.12   3.08
5455   112    42   298.88   41.12   3.08
5456   113    42   299.00   41.12   3.07
5457   114    42   299.12   41.12   3.07
5458   115    42   299.25   41.12   3.06
5459   116    42   299.38   41.12   3.06
5460   117    42   299.50   41.12   3.06
5461   118    42   299.62   41.12   3.07
5462   119    42   299.75   41.12   3.08
5463   120    42   299.88   41.12   3.09
5464   121    42   300.00   41.12   3.10
5465   122    42   300.12   41.12   3.11
5466   123    42   300.25   41.12   3.13
5467   124    42   300.38   41.12   3.14
5468   125    42   300.50   41.12   3.16
5469   126    42   300.62   41.12   3.18
5470   127    42   300.75   41.12   3.21
5471   128    42   300.88   41.12   3.23
5472   129    42   301.00   41.12   3.25
5473   130    42   301.12   41.12   3.28
5474   131    42   301.25   41.12   3.30
5475   132    42   301.38   41.12   3.32
5476   133    42   301.50   41.12   3.34
5477   134    42   301.62   41.12   3.36
5478   135    42   301.75   41.12   3.38
5479   136    42   301.88   41.12   3.40
5480   137    42   302.00   41.12   NaN
5481     1    41   285.00   41.00   NaN
5482     2    41   285.12   41.00   NaN
5483     3    41   285.25   41.00   NaN
5484     4    41   285.38   41.00   NaN
5485     5    41   285.50   41.00   NaN
5486     6    41   285.62   41.00   NaN
5487     7    41   285.75   41.00   NaN
5488     8    41   285.88   41.00   NaN
5489     9    41   286.00   41.00   NaN
5490    10    41   286.12   41.00   NaN
5491    11    41   286.25   41.00   NaN
5492    12    41   286.38   41.00   0.01
5493    13    41   286.50   41.00   0.06
5494    14    41   286.62   41.00   0.13
5495    15    41   286.75   41.00   0.25
5496    16    41   286.88   41.00   0.31
5497    17    41   287.00   41.00   0.38
5498    18    41   287.12   41.00   0.44
5499    19    41   287.25   41.00   0.49
5500    20    41   287.38   41.00   0.54
5501    21    41   287.50   41.00   0.48
5502    22    41   287.62   41.00   0.53
5503    23    41   287.75   41.00   NaN
5504    24    41   287.88   41.00   0.58
5505    25    41   288.00   41.00   0.80
5506    26    41   288.12   41.00   0.86
5507    27    41   288.25   41.00   1.00
5508    28    41   288.38   41.00   1.08
5509    29    41   288.50   41.00   1.18
5510    30    41   288.62   41.00   1.26
5511    31    41   288.75   41.00   1.35
5512    32    41   288.88   41.00   1.42
5513    33    41   289.00   41.00   1.47
5514    34    41   289.12   41.00   1.51
5515    35    41   289.25   41.00   1.58
5516    36    41   289.38   41.00   1.66
5517    37    41   289.50   41.00   1.73
5518    38    41   289.62   41.00   1.80
5519    39    41   289.75   41.00   1.83
5520    40    41   289.88   41.00   1.95
5521    41    41   290.00   41.00   2.06
5522    42    41   290.12   41.00   2.23
5523    43    41   290.25   41.00   2.46
5524    44    41   290.38   41.00   2.65
5525    45    41   290.50   41.00   2.77
5526    46    41   290.62   41.00   2.93
5527    47    41   290.75   41.00   3.09
5528    48    41   290.88   41.00   3.19
5529    49    41   291.00   41.00   3.25
5530    50    41   291.12   41.00   3.30
5531    51    41   291.25   41.00   3.34
5532    52    41   291.38   41.00   3.35
5533    53    41   291.50   41.00   3.36
5534    54    41   291.62   41.00   3.38
5535    55    41   291.75   41.00   3.41
5536    56    41   291.88   41.00   3.43
5537    57    41   292.00   41.00   3.46
5538    58    41   292.12   41.00   3.48
5539    59    41   292.25   41.00   3.51
5540    60    41   292.38   41.00   3.53
5541    61    41   292.50   41.00   3.54
5542    62    41   292.62   41.00   3.54
5543    63    41   292.75   41.00   3.54
5544    64    41   292.88   41.00   3.53
5545    65    41   293.00   41.00   3.53
5546    66    41   293.12   41.00   3.51
5547    67    41   293.25   41.00   3.50
5548    68    41   293.38   41.00   3.49
5549    69    41   293.50   41.00   3.47
5550    70    41   293.62   41.00   3.46
5551    71    41   293.75   41.00   3.45
5552    72    41   293.88   41.00   3.44
5553    73    41   294.00   41.00   3.43
5554    74    41   294.12   41.00   3.42
5555    75    41   294.25   41.00   3.42
5556    76    41   294.38   41.00   3.41
5557    77    41   294.50   41.00   3.41
5558    78    41   294.62   41.00   3.40
5559    79    41   294.75   41.00   3.40
5560    80    41   294.88   41.00   3.40
5561    81    41   295.00   41.00   3.39
5562    82    41   295.12   41.00   3.39
5563    83    41   295.25   41.00   3.39
5564    84    41   295.38   41.00   3.39
5565    85    41   295.50   41.00   3.39
5566    86    41   295.62   41.00   3.40
5567    87    41   295.75   41.00   3.41
5568    88    41   295.88   41.00   3.41
5569    89    41   296.00   41.00   3.42
5570    90    41   296.12   41.00   3.41
5571    91    41   296.25   41.00   3.41
5572    92    41   296.38   41.00   3.40
5573    93    41   296.50   41.00   3.39
5574    94    41   296.62   41.00   3.38
5575    95    41   296.75   41.00   3.37
5576    96    41   296.88   41.00   3.35
5577    97    41   297.00   41.00   3.34
5578    98    41   297.12   41.00   3.33
5579    99    41   297.25   41.00   3.31
5580   100    41   297.38   41.00   3.30
5581   101    41   297.50   41.00   3.28
5582   102    41   297.62   41.00   3.26
5583   103    41   297.75   41.00   3.25
5584   104    41   297.88   41.00   3.23
5585   105    41   298.00   41.00   3.21
5586   106    41   298.12   41.00   3.19
5587   107    41   298.25   41.00   3.17
5588   108    41   298.38   41.00   3.15
5589   109    41   298.50   41.00   3.14
5590   110    41   298.62   41.00   3.13
5591   111    41   298.75   41.00   3.12
5592   112    41   298.88   41.00   3.11
5593   113    41   299.00   41.00   3.10
5594   114    41   299.12   41.00   3.09
5595   115    41   299.25   41.00   3.08
5596   116    41   299.38   41.00   3.08
5597   117    41   299.50   41.00   3.08
5598   118    41   299.62   41.00   3.08
5599   119    41   299.75   41.00   3.09
5600   120    41   299.88   41.00   3.09
5601   121    41   300.00   41.00   3.10
5602   122    41   300.12   41.00   3.12
5603   123    41   300.25   41.00   3.13
5604   124    41   300.38   41.00   3.15
5605   125    41   300.50   41.00   3.17
5606   126    41   300.62   41.00   3.19
5607   127    41   300.75   41.00   3.21
5608   128    41   300.88   41.00   3.23
5609   129    41   301.00   41.00   3.25
5610   130    41   301.12   41.00   3.28
5611   131    41   301.25   41.00   3.30
5612   132    41   301.38   41.00   3.32
5613   133    41   301.50   41.00   3.34
5614   134    41   301.62   41.00   3.36
5615   135    41   301.75   41.00   3.38
5616   136    41   301.88   41.00   3.39
5617   137    41   302.00   41.00   NaN
5618     1    40   285.00   40.88   NaN
5619     2    40   285.12   40.88   NaN
5620     3    40   285.25   40.88   NaN
5621     4    40   285.38   40.88   NaN
5622     5    40   285.50   40.88   NaN
5623     6    40   285.62   40.88   NaN
5624     7    40   285.75   40.88   NaN
5625     8    40   285.88   40.88   NaN
5626     9    40   286.00   40.88   NaN
5627    10    40   286.12   40.88   NaN
5628    11    40   286.25   40.88   0.07
5629    12    40   286.38   40.88   0.20
5630    13    40   286.50   40.88   NaN
5631    14    40   286.62   40.88   NaN
5632    15    40   286.75   40.88   NaN
5633    16    40   286.88   40.88   NaN
5634    17    40   287.00   40.88   NaN
5635    18    40   287.12   40.88   NaN
5636    19    40   287.25   40.88   NaN
5637    20    40   287.38   40.88   NaN
5638    21    40   287.50   40.88   0.53
5639    22    40   287.62   40.88   0.66
5640    23    40   287.75   40.88   0.65
5641    24    40   287.88   40.88   0.76
5642    25    40   288.00   40.88   0.87
5643    26    40   288.12   40.88   1.03
5644    27    40   288.25   40.88   1.17
5645    28    40   288.38   40.88   1.27
5646    29    40   288.50   40.88   1.36
5647    30    40   288.62   40.88   1.45
5648    31    40   288.75   40.88   1.52
5649    32    40   288.88   40.88   1.58
5650    33    40   289.00   40.88   1.64
5651    34    40   289.12   40.88   1.70
5652    35    40   289.25   40.88   1.77
5653    36    40   289.38   40.88   1.85
5654    37    40   289.50   40.88   1.92
5655    38    40   289.62   40.88   1.99
5656    39    40   289.75   40.88   2.06
5657    40    40   289.88   40.88   2.16
5658    41    40   290.00   40.88   2.23
5659    42    40   290.12   40.88   2.39
5660    43    40   290.25   40.88   2.57
5661    44    40   290.38   40.88   2.72
5662    45    40   290.50   40.88   2.84
5663    46    40   290.62   40.88   2.95
5664    47    40   290.75   40.88   3.09
5665    48    40   290.88   40.88   3.18
5666    49    40   291.00   40.88   3.25
5667    50    40   291.12   40.88   3.29
5668    51    40   291.25   40.88   3.33
5669    52    40   291.38   40.88   3.35
5670    53    40   291.50   40.88   3.37
5671    54    40   291.62   40.88   3.40
5672    55    40   291.75   40.88   3.43
5673    56    40   291.88   40.88   3.46
5674    57    40   292.00   40.88   3.49
5675    58    40   292.12   40.88   3.51
5676    59    40   292.25   40.88   3.53
5677    60    40   292.38   40.88   3.55
5678    61    40   292.50   40.88   3.56
5679    62    40   292.62   40.88   3.56
5680    63    40   292.75   40.88   3.56
5681    64    40   292.88   40.88   3.55
5682    65    40   293.00   40.88   3.54
5683    66    40   293.12   40.88   3.53
5684    67    40   293.25   40.88   3.51
5685    68    40   293.38   40.88   3.50
5686    69    40   293.50   40.88   3.49
5687    70    40   293.62   40.88   3.47
5688    71    40   293.75   40.88   3.46
5689    72    40   293.88   40.88   3.45
5690    73    40   294.00   40.88   3.44
5691    74    40   294.12   40.88   3.44
5692    75    40   294.25   40.88   3.43
5693    76    40   294.38   40.88   3.43
5694    77    40   294.50   40.88   3.43
5695    78    40   294.62   40.88   3.43
5696    79    40   294.75   40.88   3.42
5697    80    40   294.88   40.88   3.42
5698    81    40   295.00   40.88   3.42
5699    82    40   295.12   40.88   3.42
5700    83    40   295.25   40.88   3.42
5701    84    40   295.38   40.88   3.42
5702    85    40   295.50   40.88   3.43
5703    86    40   295.62   40.88   3.43
5704    87    40   295.75   40.88   3.44
5705    88    40   295.88   40.88   3.45
5706    89    40   296.00   40.88   3.45
5707    90    40   296.12   40.88   3.45
5708    91    40   296.25   40.88   3.44
5709    92    40   296.38   40.88   3.43
5710    93    40   296.50   40.88   3.42
5711    94    40   296.62   40.88   3.42
5712    95    40   296.75   40.88   3.41
5713    96    40   296.88   40.88   3.39
5714    97    40   297.00   40.88   3.39
5715    98    40   297.12   40.88   3.37
5716    99    40   297.25   40.88   3.36
5717   100    40   297.38   40.88   3.34
5718   101    40   297.50   40.88   3.33
5719   102    40   297.62   40.88   3.31
5720   103    40   297.75   40.88   3.29
5721   104    40   297.88   40.88   3.28
5722   105    40   298.00   40.88   3.26
5723   106    40   298.12   40.88   3.24
5724   107    40   298.25   40.88   3.22
5725   108    40   298.38   40.88   3.20
5726   109    40   298.50   40.88   3.18
5727   110    40   298.62   40.88   3.16
5728   111    40   298.75   40.88   3.15
5729   112    40   298.88   40.88   3.14
5730   113    40   299.00   40.88   3.13
5731   114    40   299.12   40.88   3.12
5732   115    40   299.25   40.88   3.11
5733   116    40   299.38   40.88   3.10
5734   117    40   299.50   40.88   3.10
5735   118    40   299.62   40.88   3.10
5736   119    40   299.75   40.88   3.10
5737   120    40   299.88   40.88   3.11
5738   121    40   300.00   40.88   3.12
5739   122    40   300.12   40.88   3.13
5740   123    40   300.25   40.88   3.15
5741   124    40   300.38   40.88   3.16
5742   125    40   300.50   40.88   3.18
5743   126    40   300.62   40.88   3.20
5744   127    40   300.75   40.88   3.22
5745   128    40   300.88   40.88   3.24
5746   129    40   301.00   40.88   3.26
5747   130    40   301.12   40.88   3.28
5748   131    40   301.25   40.88   3.30
5749   132    40   301.38   40.88   3.32
5750   133    40   301.50   40.88   3.34
5751   134    40   301.62   40.88   3.36
5752   135    40   301.75   40.88   3.37
5753   136    40   301.88   40.88   3.39
5754   137    40   302.00   40.88   NaN
5755     1    39   285.00   40.75   NaN
5756     2    39   285.12   40.75   NaN
5757     3    39   285.25   40.75   NaN
5758     4    39   285.38   40.75   NaN
5759     5    39   285.50   40.75   NaN
5760     6    39   285.62   40.75   NaN
5761     7    39   285.75   40.75   NaN
5762     8    39   285.88   40.75   NaN
5763     9    39   286.00   40.75   NaN
5764    10    39   286.12   40.75   NaN
5765    11    39   286.25   40.75   NaN
5766    12    39   286.38   40.75   NaN
5767    13    39   286.50   40.75   NaN
5768    14    39   286.62   40.75   NaN
5769    15    39   286.75   40.75   NaN
5770    16    39   286.88   40.75   NaN
5771    17    39   287.00   40.75   0.06
5772    18    39   287.12   40.75   0.63
5773    19    39   287.25   40.75   0.61
5774    20    39   287.38   40.75   0.60
5775    21    39   287.50   40.75   0.69
5776    22    39   287.62   40.75   0.82
5777    23    39   287.75   40.75   0.89
5778    24    39   287.88   40.75   0.98
5779    25    39   288.00   40.75   1.11
5780    26    39   288.12   40.75   1.24
5781    27    39   288.25   40.75   1.35
5782    28    39   288.38   40.75   1.44
5783    29    39   288.50   40.75   1.53
5784    30    39   288.62   40.75   1.60
5785    31    39   288.75   40.75   1.67
5786    32    39   288.88   40.75   1.73
5787    33    39   289.00   40.75   1.78
5788    34    39   289.12   40.75   1.84
5789    35    39   289.25   40.75   1.91
5790    36    39   289.38   40.75   1.99
5791    37    39   289.50   40.75   2.06
5792    38    39   289.62   40.75   2.13
5793    39    39   289.75   40.75   2.22
5794    40    39   289.88   40.75   2.32
5795    41    39   290.00   40.75   2.41
5796    42    39   290.12   40.75   2.54
5797    43    39   290.25   40.75   2.67
5798    44    39   290.38   40.75   2.79
5799    45    39   290.50   40.75   2.90
5800    46    39   290.62   40.75   2.99
5801    47    39   290.75   40.75   3.10
5802    48    39   290.88   40.75   3.19
5803    49    39   291.00   40.75   3.24
5804    50    39   291.12   40.75   3.28
5805    51    39   291.25   40.75   3.32
5806    52    39   291.38   40.75   3.35
5807    53    39   291.50   40.75   3.38
5808    54    39   291.62   40.75   3.42
5809    55    39   291.75   40.75   3.45
5810    56    39   291.88   40.75   3.49
5811    57    39   292.00   40.75   3.51
5812    58    39   292.12   40.75   3.54
5813    59    39   292.25   40.75   3.55
5814    60    39   292.38   40.75   3.56
5815    61    39   292.50   40.75   3.57
5816    62    39   292.62   40.75   3.57
5817    63    39   292.75   40.75   3.57
5818    64    39   292.88   40.75   3.56
5819    65    39   293.00   40.75   3.55
5820    66    39   293.12   40.75   3.54
5821    67    39   293.25   40.75   3.52
5822    68    39   293.38   40.75   3.51
5823    69    39   293.50   40.75   3.50
5824    70    39   293.62   40.75   3.49
5825    71    39   293.75   40.75   3.48
5826    72    39   293.88   40.75   3.47
5827    73    39   294.00   40.75   3.46
5828    74    39   294.12   40.75   3.46
5829    75    39   294.25   40.75   3.45
5830    76    39   294.38   40.75   3.45
5831    77    39   294.50   40.75   3.45
5832    78    39   294.62   40.75   3.45
5833    79    39   294.75   40.75   3.45
5834    80    39   294.88   40.75   3.45
5835    81    39   295.00   40.75   3.46
5836    82    39   295.12   40.75   3.46
5837    83    39   295.25   40.75   3.46
5838    84    39   295.38   40.75   3.46
5839    85    39   295.50   40.75   3.46
5840    86    39   295.62   40.75   3.47
5841    87    39   295.75   40.75   3.48
5842    88    39   295.88   40.75   3.48
5843    89    39   296.00   40.75   3.49
5844    90    39   296.12   40.75   3.48
5845    91    39   296.25   40.75   3.47
5846    92    39   296.38   40.75   3.47
5847    93    39   296.50   40.75   3.46
5848    94    39   296.62   40.75   3.45
5849    95    39   296.75   40.75   3.44
5850    96    39   296.88   40.75   3.43
5851    97    39   297.00   40.75   3.42
5852    98    39   297.12   40.75   3.40
5853    99    39   297.25   40.75   3.39
5854   100    39   297.38   40.75   3.37
5855   101    39   297.50   40.75   3.36
5856   102    39   297.62   40.75   3.34
5857   103    39   297.75   40.75   3.33
5858   104    39   297.88   40.75   3.31
5859   105    39   298.00   40.75   3.29
5860   106    39   298.12   40.75   3.27
5861   107    39   298.25   40.75   3.25
5862   108    39   298.38   40.75   3.23
5863   109    39   298.50   40.75   3.21
5864   110    39   298.62   40.75   3.19
5865   111    39   298.75   40.75   3.18
5866   112    39   298.88   40.75   3.17
5867   113    39   299.00   40.75   3.16
5868   114    39   299.12   40.75   3.14
5869   115    39   299.25   40.75   3.13
5870   116    39   299.38   40.75   3.13
5871   117    39   299.50   40.75   3.12
5872   118    39   299.62   40.75   3.12
5873   119    39   299.75   40.75   3.12
5874   120    39   299.88   40.75   3.13
5875   121    39   300.00   40.75   3.14
5876   122    39   300.12   40.75   3.15
5877   123    39   300.25   40.75   3.16
5878   124    39   300.38   40.75   3.17
5879   125    39   300.50   40.75   3.19
5880   126    39   300.62   40.75   3.21
5881   127    39   300.75   40.75   3.23
5882   128    39   300.88   40.75   3.25
5883   129    39   301.00   40.75   3.27
5884   130    39   301.12   40.75   3.29
5885   131    39   301.25   40.75   3.31
5886   132    39   301.38   40.75   3.32
5887   133    39   301.50   40.75   3.34
5888   134    39   301.62   40.75   3.36
5889   135    39   301.75   40.75   3.37
5890   136    39   301.88   40.75   3.39
5891   137    39   302.00   40.75   NaN
5892     1    38   285.00   40.62   NaN
5893     2    38   285.12   40.62   NaN
5894     3    38   285.25   40.62   NaN
5895     4    38   285.38   40.62   NaN
5896     5    38   285.50   40.62   NaN
5897     6    38   285.62   40.62   NaN
5898     7    38   285.75   40.62   NaN
5899     8    38   285.88   40.62   NaN
5900     9    38   286.00   40.62   0.01
5901    10    38   286.12   40.62   0.02
5902    11    38   286.25   40.62   0.03
5903    12    38   286.38   40.62   0.04
5904    13    38   286.50   40.62   0.13
5905    14    38   286.62   40.62   0.61
5906    15    38   286.75   40.62   0.63
5907    16    38   286.88   40.62   0.62
5908    17    38   287.00   40.62   0.58
5909    18    38   287.12   40.62   0.65
5910    19    38   287.25   40.62   0.68
5911    20    38   287.38   40.62   0.75
5912    21    38   287.50   40.62   0.85
5913    22    38   287.62   40.62   0.98
5914    23    38   287.75   40.62   1.08
5915    24    38   287.88   40.62   1.19
5916    25    38   288.00   40.62   1.32
5917    26    38   288.12   40.62   1.43
5918    27    38   288.25   40.62   1.52
5919    28    38   288.38   40.62   1.60
5920    29    38   288.50   40.62   1.68
5921    30    38   288.62   40.62   1.74
5922    31    38   288.75   40.62   1.81
5923    32    38   288.88   40.62   1.86
5924    33    38   289.00   40.62   1.91
5925    34    38   289.12   40.62   1.97
5926    35    38   289.25   40.62   2.03
5927    36    38   289.38   40.62   2.10
5928    37    38   289.50   40.62   2.18
5929    38    38   289.62   40.62   2.26
5930    39    38   289.75   40.62   2.34
5931    40    38   289.88   40.62   2.43
5932    41    38   290.00   40.62   2.53
5933    42    38   290.12   40.62   2.63
5934    43    38   290.25   40.62   2.74
5935    44    38   290.38   40.62   2.85
5936    45    38   290.50   40.62   2.94
5937    46    38   290.62   40.62   3.02
5938    47    38   290.75   40.62   3.12
5939    48    38   290.88   40.62   3.19
5940    49    38   291.00   40.62   3.24
5941    50    38   291.12   40.62   3.29
5942    51    38   291.25   40.62   3.32
5943    52    38   291.38   40.62   3.36
5944    53    38   291.50   40.62   3.40
5945    54    38   291.62   40.62   3.44
5946    55    38   291.75   40.62   3.48
5947    56    38   291.88   40.62   3.51
5948    57    38   292.00   40.62   3.53
5949    58    38   292.12   40.62   3.55
5950    59    38   292.25   40.62   3.57
5951    60    38   292.38   40.62   3.58
5952    61    38   292.50   40.62   3.59
5953    62    38   292.62   40.62   3.58
5954    63    38   292.75   40.62   3.58
5955    64    38   292.88   40.62   3.57
5956    65    38   293.00   40.62   3.56
5957    66    38   293.12   40.62   3.55
5958    67    38   293.25   40.62   3.53
5959    68    38   293.38   40.62   3.52
5960    69    38   293.50   40.62   3.51
5961    70    38   293.62   40.62   3.50
5962    71    38   293.75   40.62   3.50
5963    72    38   293.88   40.62   3.49
5964    73    38   294.00   40.62   3.48
5965    74    38   294.12   40.62   3.48
5966    75    38   294.25   40.62   3.48
5967    76    38   294.38   40.62   3.48
5968    77    38   294.50   40.62   3.48
5969    78    38   294.62   40.62   3.48
5970    79    38   294.75   40.62   3.49
5971    80    38   294.88   40.62   3.49
5972    81    38   295.00   40.62   3.49
5973    82    38   295.12   40.62   3.49
5974    83    38   295.25   40.62   3.50
5975    84    38   295.38   40.62   3.50
5976    85    38   295.50   40.62   3.50
5977    86    38   295.62   40.62   3.51
5978    87    38   295.75   40.62   3.51
5979    88    38   295.88   40.62   3.52
5980    89    38   296.00   40.62   3.52
5981    90    38   296.12   40.62   3.52
5982    91    38   296.25   40.62   3.51
5983    92    38   296.38   40.62   3.50
5984    93    38   296.50   40.62   3.49
5985    94    38   296.62   40.62   3.47
5986    95    38   296.75   40.62   3.46
5987    96    38   296.88   40.62   3.46
5988    97    38   297.00   40.62   3.45
5989    98    38   297.12   40.62   3.43
5990    99    38   297.25   40.62   3.42
5991   100    38   297.38   40.62   3.40
5992   101    38   297.50   40.62   3.38
5993   102    38   297.62   40.62   3.37
5994   103    38   297.75   40.62   3.35
5995   104    38   297.88   40.62   3.33
5996   105    38   298.00   40.62   3.32
5997   106    38   298.12   40.62   3.30
5998   107    38   298.25   40.62   3.28
5999   108    38   298.38   40.62   3.26
6000   109    38   298.50   40.62   3.24
6001   110    38   298.62   40.62   3.22
6002   111    38   298.75   40.62   3.21
6003   112    38   298.88   40.62   3.19
6004   113    38   299.00   40.62   3.18
6005   114    38   299.12   40.62   3.17
6006   115    38   299.25   40.62   3.16
6007   116    38   299.38   40.62   3.15
6008   117    38   299.50   40.62   3.14
6009   118    38   299.62   40.62   3.14
6010   119    38   299.75   40.62   3.14
6011   120    38   299.88   40.62   3.15
6012   121    38   300.00   40.62   3.16
6013   122    38   300.12   40.62   3.17
6014   123    38   300.25   40.62   3.18
6015   124    38   300.38   40.62   3.19
6016   125    38   300.50   40.62   3.20
6017   126    38   300.62   40.62   3.22
6018   127    38   300.75   40.62   3.24
6019   128    38   300.88   40.62   3.25
6020   129    38   301.00   40.62   3.27
6021   130    38   301.12   40.62   3.29
6022   131    38   301.25   40.62   3.31
6023   132    38   301.38   40.62   3.33
6024   133    38   301.50   40.62   3.34
6025   134    38   301.62   40.62   3.36
6026   135    38   301.75   40.62   3.37
6027   136    38   301.88   40.62   3.38
6028   137    38   302.00   40.62   NaN
6029     1    37   285.00   40.50   NaN
6030     2    37   285.12   40.50   NaN
6031     3    37   285.25   40.50   NaN
6032     4    37   285.38   40.50   NaN
6033     5    37   285.50   40.50   NaN
6034     6    37   285.62   40.50   NaN
6035     7    37   285.75   40.50   0.01
6036     8    37   285.88   40.50   0.04
6037     9    37   286.00   40.50   0.07
6038    10    37   286.12   40.50   0.42
6039    11    37   286.25   40.50   0.54
6040    12    37   286.38   40.50   0.60
6041    13    37   286.50   40.50   0.63
6042    14    37   286.62   40.50   0.64
6043    15    37   286.75   40.50   0.65
6044    16    37   286.88   40.50   0.67
6045    17    37   287.00   40.50   0.70
6046    18    37   287.12   40.50   0.77
6047    19    37   287.25   40.50   0.83
6048    20    37   287.38   40.50   0.92
6049    21    37   287.50   40.50   1.03
6050    22    37   287.62   40.50   1.15
6051    23    37   287.75   40.50   1.27
6052    24    37   287.88   40.50   1.38
6053    25    37   288.00   40.50   1.48
6054    26    37   288.12   40.50   1.58
6055    27    37   288.25   40.50   1.66
6056    28    37   288.38   40.50   1.74
6057    29    37   288.50   40.50   1.81
6058    30    37   288.62   40.50   1.87
6059    31    37   288.75   40.50   1.92
6060    32    37   288.88   40.50   1.97
6061    33    37   289.00   40.50   2.02
6062    34    37   289.12   40.50   2.08
6063    35    37   289.25   40.50   2.15
6064    36    37   289.38   40.50   2.21
6065    37    37   289.50   40.50   2.28
6066    38    37   289.62   40.50   2.36
6067    39    37   289.75   40.50   2.43
6068    40    37   289.88   40.50   2.52
6069    41    37   290.00   40.50   2.60
6070    42    37   290.12   40.50   2.70
6071    43    37   290.25   40.50   2.80
6072    44    37   290.38   40.50   2.89
6073    45    37   290.50   40.50   2.97
6074    46    37   290.62   40.50   3.05
6075    47    37   290.75   40.50   3.13
6076    48    37   290.88   40.50   3.20
6077    49    37   291.00   40.50   3.25
6078    50    37   291.12   40.50   3.29
6079    51    37   291.25   40.50   3.33
6080    52    37   291.38   40.50   3.38
6081    53    37   291.50   40.50   3.42
6082    54    37   291.62   40.50   3.46
6083    55    37   291.75   40.50   3.49
6084    56    37   291.88   40.50   3.52
6085    57    37   292.00   40.50   3.55
6086    58    37   292.12   40.50   3.57
6087    59    37   292.25   40.50   3.58
6088    60    37   292.38   40.50   3.59
6089    61    37   292.50   40.50   3.60
6090    62    37   292.62   40.50   3.60
6091    63    37   292.75   40.50   3.59
6092    64    37   292.88   40.50   3.58
6093    65    37   293.00   40.50   3.57
6094    66    37   293.12   40.50   3.56
6095    67    37   293.25   40.50   3.54
6096    68    37   293.38   40.50   3.53
6097    69    37   293.50   40.50   3.52
6098    70    37   293.62   40.50   3.52
6099    71    37   293.75   40.50   3.51
6100    72    37   293.88   40.50   3.51
6101    73    37   294.00   40.50   3.50
6102    74    37   294.12   40.50   3.50
6103    75    37   294.25   40.50   3.50
6104    76    37   294.38   40.50   3.50
6105    77    37   294.50   40.50   3.51
6106    78    37   294.62   40.50   3.51
6107    79    37   294.75   40.50   3.52
6108    80    37   294.88   40.50   3.53
6109    81    37   295.00   40.50   3.53
6110    82    37   295.12   40.50   3.54
6111    83    37   295.25   40.50   3.54
6112    84    37   295.38   40.50   3.54
6113    85    37   295.50   40.50   3.54
6114    86    37   295.62   40.50   3.55
6115    87    37   295.75   40.50   3.55
6116    88    37   295.88   40.50   3.56
6117    89    37   296.00   40.50   3.56
6118    90    37   296.12   40.50   3.55
6119    91    37   296.25   40.50   3.54
6120    92    37   296.38   40.50   3.53
6121    93    37   296.50   40.50   3.51
6122    94    37   296.62   40.50   3.50
6123    95    37   296.75   40.50   3.49
6124    96    37   296.88   40.50   3.48
6125    97    37   297.00   40.50   3.47
6126    98    37   297.12   40.50   3.45
6127    99    37   297.25   40.50   3.44
6128   100    37   297.38   40.50   3.42
6129   101    37   297.50   40.50   3.41
6130   102    37   297.62   40.50   3.39
6131   103    37   297.75   40.50   3.37
6132   104    37   297.88   40.50   3.35
6133   105    37   298.00   40.50   3.34
6134   106    37   298.12   40.50   3.32
6135   107    37   298.25   40.50   3.30
6136   108    37   298.38   40.50   3.28
6137   109    37   298.50   40.50   3.26
6138   110    37   298.62   40.50   3.25
6139   111    37   298.75   40.50   3.23
6140   112    37   298.88   40.50   3.22
6141   113    37   299.00   40.50   3.21
6142   114    37   299.12   40.50   3.20
6143   115    37   299.25   40.50   3.18
6144   116    37   299.38   40.50   3.17
6145   117    37   299.50   40.50   3.17
6146   118    37   299.62   40.50   3.17
6147   119    37   299.75   40.50   3.17
6148   120    37   299.88   40.50   3.17
6149   121    37   300.00   40.50   3.17
6150   122    37   300.12   40.50   3.18
6151   123    37   300.25   40.50   3.19
6152   124    37   300.38   40.50   3.21
6153   125    37   300.50   40.50   3.22
6154   126    37   300.62   40.50   3.23
6155   127    37   300.75   40.50   3.25
6156   128    37   300.88   40.50   3.26
6157   129    37   301.00   40.50   3.28
6158   130    37   301.12   40.50   3.30
6159   131    37   301.25   40.50   3.31
6160   132    37   301.38   40.50   3.33
6161   133    37   301.50   40.50   3.34
6162   134    37   301.62   40.50   3.35
6163   135    37   301.75   40.50   3.36
6164   136    37   301.88   40.50   3.37
6165   137    37   302.00   40.50   NaN
6166     1    36   285.00   40.38   NaN
6167     2    36   285.12   40.38   NaN
6168     3    36   285.25   40.38   NaN
6169     4    36   285.38   40.38   NaN
6170     5    36   285.50   40.38   NaN
6171     6    36   285.62   40.38   NaN
6172     7    36   285.75   40.38   NaN
6173     8    36   285.88   40.38   NaN
6174     9    36   286.00   40.38   0.31
6175    10    36   286.12   40.38   0.54
6176    11    36   286.25   40.38   0.59
6177    12    36   286.38   40.38   0.61
6178    13    36   286.50   40.38   0.65
6179    14    36   286.62   40.38   0.67
6180    15    36   286.75   40.38   0.72
6181    16    36   286.88   40.38   0.77
6182    17    36   287.00   40.38   0.84
6183    18    36   287.12   40.38   0.92
6184    19    36   287.25   40.38   1.00
6185    20    36   287.38   40.38   1.09
6186    21    36   287.50   40.38   1.20
6187    22    36   287.62   40.38   1.31
6188    23    36   287.75   40.38   1.41
6189    24    36   287.88   40.38   1.51
6190    25    36   288.00   40.38   1.60
6191    26    36   288.12   40.38   1.69
6192    27    36   288.25   40.38   1.78
6193    28    36   288.38   40.38   1.85
6194    29    36   288.50   40.38   1.91
6195    30    36   288.62   40.38   1.97
6196    31    36   288.75   40.38   2.02
6197    32    36   288.88   40.38   2.07
6198    33    36   289.00   40.38   2.12
6199    34    36   289.12   40.38   2.18
6200    35    36   289.25   40.38   2.24
6201    36    36   289.38   40.38   2.30
6202    37    36   289.50   40.38   2.37
6203    38    36   289.62   40.38   2.44
6204    39    36   289.75   40.38   2.51
6205    40    36   289.88   40.38   2.59
6206    41    36   290.00   40.38   2.67
6207    42    36   290.12   40.38   2.75
6208    43    36   290.25   40.38   2.84
6209    44    36   290.38   40.38   2.92
6210    45    36   290.50   40.38   3.00
6211    46    36   290.62   40.38   3.07
6212    47    36   290.75   40.38   3.14
6213    48    36   290.88   40.38   3.21
6214    49    36   291.00   40.38   3.26
6215    50    36   291.12   40.38   3.30
6216    51    36   291.25   40.38   3.35
6217    52    36   291.38   40.38   3.39
6218    53    36   291.50   40.38   3.43
6219    54    36   291.62   40.38   3.47
6220    55    36   291.75   40.38   3.50
6221    56    36   291.88   40.38   3.53
6222    57    36   292.00   40.38   3.56
6223    58    36   292.12   40.38   3.58
6224    59    36   292.25   40.38   3.59
6225    60    36   292.38   40.38   3.60
6226    61    36   292.50   40.38   3.61
6227    62    36   292.62   40.38   3.61
6228    63    36   292.75   40.38   3.60
6229    64    36   292.88   40.38   3.59
6230    65    36   293.00   40.38   3.58
6231    66    36   293.12   40.38   3.57
6232    67    36   293.25   40.38   3.56
6233    68    36   293.38   40.38   3.55
6234    69    36   293.50   40.38   3.54
6235    70    36   293.62   40.38   3.53
6236    71    36   293.75   40.38   3.53
6237    72    36   293.88   40.38   3.53
6238    73    36   294.00   40.38   3.53
6239    74    36   294.12   40.38   3.52
6240    75    36   294.25   40.38   3.52
6241    76    36   294.38   40.38   3.53
6242    77    36   294.50   40.38   3.53
6243    78    36   294.62   40.38   3.54
6244    79    36   294.75   40.38   3.55
6245    80    36   294.88   40.38   3.56
6246    81    36   295.00   40.38   3.57
6247    82    36   295.12   40.38   3.57
6248    83    36   295.25   40.38   3.58
6249    84    36   295.38   40.38   3.58
6250    85    36   295.50   40.38   3.58
6251    86    36   295.62   40.38   3.59
6252    87    36   295.75   40.38   3.59
6253    88    36   295.88   40.38   3.59
6254    89    36   296.00   40.38   3.59
6255    90    36   296.12   40.38   3.59
6256    91    36   296.25   40.38   3.58
6257    92    36   296.38   40.38   3.56
6258    93    36   296.50   40.38   3.54
6259    94    36   296.62   40.38   3.53
6260    95    36   296.75   40.38   3.52
6261    96    36   296.88   40.38   3.51
6262    97    36   297.00   40.38   3.49
6263    98    36   297.12   40.38   3.48
6264    99    36   297.25   40.38   3.46
6265   100    36   297.38   40.38   3.45
6266   101    36   297.50   40.38   3.43
6267   102    36   297.62   40.38   3.41
6268   103    36   297.75   40.38   3.39
6269   104    36   297.88   40.38   3.38
6270   105    36   298.00   40.38   3.36
6271   106    36   298.12   40.38   3.34
6272   107    36   298.25   40.38   3.32
6273   108    36   298.38   40.38   3.31
6274   109    36   298.50   40.38   3.29
6275   110    36   298.62   40.38   3.27
6276   111    36   298.75   40.38   3.26
6277   112    36   298.88   40.38   3.24
6278   113    36   299.00   40.38   3.23
6279   114    36   299.12   40.38   3.22
6280   115    36   299.25   40.38   3.21
6281   116    36   299.38   40.38   3.20
6282   117    36   299.50   40.38   3.19
6283   118    36   299.62   40.38   3.19
6284   119    36   299.75   40.38   3.19
6285   120    36   299.88   40.38   3.19
6286   121    36   300.00   40.38   3.19
6287   122    36   300.12   40.38   3.20
6288   123    36   300.25   40.38   3.21
6289   124    36   300.38   40.38   3.22
6290   125    36   300.50   40.38   3.23
6291   126    36   300.62   40.38   3.24
6292   127    36   300.75   40.38   3.26
6293   128    36   300.88   40.38   3.27
6294   129    36   301.00   40.38   3.28
6295   130    36   301.12   40.38   3.30
6296   131    36   301.25   40.38   3.31
6297   132    36   301.38   40.38   3.32
6298   133    36   301.50   40.38   3.34
6299   134    36   301.62   40.38   3.34
6300   135    36   301.75   40.38   3.35
6301   136    36   301.88   40.38   3.36
6302   137    36   302.00   40.38   NaN
6303     1    35   285.00   40.25   NaN
6304     2    35   285.12   40.25   NaN
6305     3    35   285.25   40.25   NaN
6306     4    35   285.38   40.25   NaN
6307     5    35   285.50   40.25   NaN
6308     6    35   285.62   40.25   NaN
6309     7    35   285.75   40.25   NaN
6310     8    35   285.88   40.25   NaN
6311     9    35   286.00   40.25   0.48
6312    10    35   286.12   40.25   0.55
6313    11    35   286.25   40.25   0.58
6314    12    35   286.38   40.25   0.62
6315    13    35   286.50   40.25   0.69
6316    14    35   286.62   40.25   0.76
6317    15    35   286.75   40.25   0.84
6318    16    35   286.88   40.25   0.91
6319    17    35   287.00   40.25   1.00
6320    18    35   287.12   40.25   1.08
6321    19    35   287.25   40.25   1.18
6322    20    35   287.38   40.25   1.27
6323    21    35   287.50   40.25   1.36
6324    22    35   287.62   40.25   1.45
6325    23    35   287.75   40.25   1.54
6326    24    35   287.88   40.25   1.62
6327    25    35   288.00   40.25   1.71
6328    26    35   288.12   40.25   1.80
6329    27    35   288.25   40.25   1.88
6330    28    35   288.38   40.25   1.95
6331    29    35   288.50   40.25   2.01
6332    30    35   288.62   40.25   2.06
6333    31    35   288.75   40.25   2.12
6334    32    35   288.88   40.25   2.16
6335    33    35   289.00   40.25   2.21
6336    34    35   289.12   40.25   2.27
6337    35    35   289.25   40.25   2.32
6338    36    35   289.38   40.25   2.39
6339    37    35   289.50   40.25   2.45
6340    38    35   289.62   40.25   2.52
6341    39    35   289.75   40.25   2.59
6342    40    35   289.88   40.25   2.65
6343    41    35   290.00   40.25   2.72
6344    42    35   290.12   40.25   2.80
6345    43    35   290.25   40.25   2.87
6346    44    35   290.38   40.25   2.94
6347    45    35   290.50   40.25   3.02
6348    46    35   290.62   40.25   3.09
6349    47    35   290.75   40.25   3.16
6350    48    35   290.88   40.25   3.22
6351    49    35   291.00   40.25   3.27
6352    50    35   291.12   40.25   3.32
6353    51    35   291.25   40.25   3.36
6354    52    35   291.38   40.25   3.40
6355    53    35   291.50   40.25   3.44
6356    54    35   291.62   40.25   3.48
6357    55    35   291.75   40.25   3.52
6358    56    35   291.88   40.25   3.54
6359    57    35   292.00   40.25   3.57
6360    58    35   292.12   40.25   3.59
6361    59    35   292.25   40.25   3.60
6362    60    35   292.38   40.25   3.61
6363    61    35   292.50   40.25   3.62
6364    62    35   292.62   40.25   3.62
6365    63    35   292.75   40.25   3.61
6366    64    35   292.88   40.25   3.61
6367    65    35   293.00   40.25   3.59
6368    66    35   293.12   40.25   3.58
6369    67    35   293.25   40.25   3.57
6370    68    35   293.38   40.25   3.56
6371    69    35   293.50   40.25   3.55
6372    70    35   293.62   40.25   3.55
6373    71    35   293.75   40.25   3.55
6374    72    35   293.88   40.25   3.55
6375    73    35   294.00   40.25   3.55
6376    74    35   294.12   40.25   3.55
6377    75    35   294.25   40.25   3.55
6378    76    35   294.38   40.25   3.55
6379    77    35   294.50   40.25   3.56
6380    78    35   294.62   40.25   3.57
6381    79    35   294.75   40.25   3.58
6382    80    35   294.88   40.25   3.59
6383    81    35   295.00   40.25   3.60
6384    82    35   295.12   40.25   3.61
6385    83    35   295.25   40.25   3.61
6386    84    35   295.38   40.25   3.62
6387    85    35   295.50   40.25   3.62
6388    86    35   295.62   40.25   3.62
6389    87    35   295.75   40.25   3.63
6390    88    35   295.88   40.25   3.63
6391    89    35   296.00   40.25   3.63
6392    90    35   296.12   40.25   3.62
6393    91    35   296.25   40.25   3.61
6394    92    35   296.38   40.25   3.59
6395    93    35   296.50   40.25   3.58
6396    94    35   296.62   40.25   3.56
6397    95    35   296.75   40.25   3.55
6398    96    35   296.88   40.25   3.53
6399    97    35   297.00   40.25   3.52
6400    98    35   297.12   40.25   3.50
6401    99    35   297.25   40.25   3.48
6402   100    35   297.38   40.25   3.47
6403   101    35   297.50   40.25   3.45
6404   102    35   297.62   40.25   3.43
6405   103    35   297.75   40.25   3.41
6406   104    35   297.88   40.25   3.40
6407   105    35   298.00   40.25   3.38
6408   106    35   298.12   40.25   3.36
6409   107    35   298.25   40.25   3.34
6410   108    35   298.38   40.25   3.33
6411   109    35   298.50   40.25   3.31
6412   110    35   298.62   40.25   3.30
6413   111    35   298.75   40.25   3.28
6414   112    35   298.88   40.25   3.27
6415   113    35   299.00   40.25   3.26
6416   114    35   299.12   40.25   3.24
6417   115    35   299.25   40.25   3.23
6418   116    35   299.38   40.25   3.22
6419   117    35   299.50   40.25   3.22
6420   118    35   299.62   40.25   3.21
6421   119    35   299.75   40.25   3.21
6422   120    35   299.88   40.25   3.21
6423   121    35   300.00   40.25   3.21
6424   122    35   300.12   40.25   3.22
6425   123    35   300.25   40.25   3.23
6426   124    35   300.38   40.25   3.23
6427   125    35   300.50   40.25   3.24
6428   126    35   300.62   40.25   3.25
6429   127    35   300.75   40.25   3.26
6430   128    35   300.88   40.25   3.28
6431   129    35   301.00   40.25   3.29
6432   130    35   301.12   40.25   3.30
6433   131    35   301.25   40.25   3.31
6434   132    35   301.38   40.25   3.32
6435   133    35   301.50   40.25   3.33
6436   134    35   301.62   40.25   3.34
6437   135    35   301.75   40.25   3.34
6438   136    35   301.88   40.25   3.35
6439   137    35   302.00   40.25   NaN
6440     1    34   285.00   40.12   NaN
6441     2    34   285.12   40.12   NaN
6442     3    34   285.25   40.12   NaN
6443     4    34   285.38   40.12   NaN
6444     5    34   285.50   40.12   NaN
6445     6    34   285.62   40.12   NaN
6446     7    34   285.75   40.12   NaN
6447     8    34   285.88   40.12   NaN
6448     9    34   286.00   40.12   0.50
6449    10    34   286.12   40.12   0.56
6450    11    34   286.25   40.12   0.62
6451    12    34   286.38   40.12   0.69
6452    13    34   286.50   40.12   0.79
6453    14    34   286.62   40.12   0.88
6454    15    34   286.75   40.12   0.97
6455    16    34   286.88   40.12   1.06
6456    17    34   287.00   40.12   1.15
6457    18    34   287.12   40.12   1.24
6458    19    34   287.25   40.12   1.33
6459    20    34   287.38   40.12   1.41
6460    21    34   287.50   40.12   1.49
6461    22    34   287.62   40.12   1.56
6462    23    34   287.75   40.12   1.64
6463    24    34   287.88   40.12   1.72
6464    25    34   288.00   40.12   1.80
6465    26    34   288.12   40.12   1.88
6466    27    34   288.25   40.12   1.96
6467    28    34   288.38   40.12   2.03
6468    29    34   288.50   40.12   2.09
6469    30    34   288.62   40.12   2.14
6470    31    34   288.75   40.12   2.19
6471    32    34   288.88   40.12   2.23
6472    33    34   289.00   40.12   2.28
6473    34    34   289.12   40.12   2.34
6474    35    34   289.25   40.12   2.40
6475    36    34   289.38   40.12   2.46
6476    37    34   289.50   40.12   2.52
6477    38    34   289.62   40.12   2.59
6478    39    34   289.75   40.12   2.65
6479    40    34   289.88   40.12   2.71
6480    41    34   290.00   40.12   2.77
6481    42    34   290.12   40.12   2.84
6482    43    34   290.25   40.12   2.91
6483    44    34   290.38   40.12   2.98
6484    45    34   290.50   40.12   3.04
6485    46    34   290.62   40.12   3.11
6486    47    34   290.75   40.12   3.17
6487    48    34   290.88   40.12   3.23
6488    49    34   291.00   40.12   3.28
6489    50    34   291.12   40.12   3.32
6490    51    34   291.25   40.12   3.37
6491    52    34   291.38   40.12   3.41
6492    53    34   291.50   40.12   3.45
6493    54    34   291.62   40.12   3.49
6494    55    34   291.75   40.12   3.53
6495    56    34   291.88   40.12   3.55
6496    57    34   292.00   40.12   3.58
6497    58    34   292.12   40.12   3.60
6498    59    34   292.25   40.12   3.61
6499    60    34   292.38   40.12   3.62
6500    61    34   292.50   40.12   3.63
6501    62    34   292.62   40.12   3.63
6502    63    34   292.75   40.12   3.63
6503    64    34   292.88   40.12   3.62
6504    65    34   293.00   40.12   3.61
6505    66    34   293.12   40.12   3.60
6506    67    34   293.25   40.12   3.59
6507    68    34   293.38   40.12   3.58
6508    69    34   293.50   40.12   3.58
6509    70    34   293.62   40.12   3.57
6510    71    34   293.75   40.12   3.57
6511    72    34   293.88   40.12   3.57
6512    73    34   294.00   40.12   3.57
6513    74    34   294.12   40.12   3.57
6514    75    34   294.25   40.12   3.57
6515    76    34   294.38   40.12   3.57
6516    77    34   294.50   40.12   3.58
6517    78    34   294.62   40.12   3.59
6518    79    34   294.75   40.12   3.60
6519    80    34   294.88   40.12   3.61
6520    81    34   295.00   40.12   3.63
6521    82    34   295.12   40.12   3.63
6522    83    34   295.25   40.12   3.64
6523    84    34   295.38   40.12   3.64
6524    85    34   295.50   40.12   3.65
6525    86    34   295.62   40.12   3.65
6526    87    34   295.75   40.12   3.66
6527    88    34   295.88   40.12   3.66
6528    89    34   296.00   40.12   3.66
6529    90    34   296.12   40.12   3.65
6530    91    34   296.25   40.12   3.64
6531    92    34   296.38   40.12   3.62
6532    93    34   296.50   40.12   3.61
6533    94    34   296.62   40.12   3.59
6534    95    34   296.75   40.12   3.58
6535    96    34   296.88   40.12   3.56
6536    97    34   297.00   40.12   3.55
6537    98    34   297.12   40.12   3.53
6538    99    34   297.25   40.12   3.51
6539   100    34   297.38   40.12   3.49
6540   101    34   297.50   40.12   3.48
6541   102    34   297.62   40.12   3.46
6542   103    34   297.75   40.12   3.44
6543   104    34   297.88   40.12   3.42
6544   105    34   298.00   40.12   3.41
6545   106    34   298.12   40.12   3.39
6546   107    34   298.25   40.12   3.37
6547   108    34   298.38   40.12   3.35
6548   109    34   298.50   40.12   3.34
6549   110    34   298.62   40.12   3.32
6550   111    34   298.75   40.12   3.31
6551   112    34   298.88   40.12   3.30
6552   113    34   299.00   40.12   3.28
6553   114    34   299.12   40.12   3.27
6554   115    34   299.25   40.12   3.26
6555   116    34   299.38   40.12   3.25
6556   117    34   299.50   40.12   3.24
6557   118    34   299.62   40.12   3.23
6558   119    34   299.75   40.12   3.23
6559   120    34   299.88   40.12   3.23
6560   121    34   300.00   40.12   3.23
6561   122    34   300.12   40.12   3.24
6562   123    34   300.25   40.12   3.24
6563   124    34   300.38   40.12   3.25
6564   125    34   300.50   40.12   3.25
6565   126    34   300.62   40.12   3.26
6566   127    34   300.75   40.12   3.27
6567   128    34   300.88   40.12   3.28
6568   129    34   301.00   40.12   3.29
6569   130    34   301.12   40.12   3.30
6570   131    34   301.25   40.12   3.31
6571   132    34   301.38   40.12   3.32
6572   133    34   301.50   40.12   3.32
6573   134    34   301.62   40.12   3.33
6574   135    34   301.75   40.12   3.33
6575   136    34   301.88   40.12   3.34
6576   137    34   302.00   40.12   NaN
6577     1    33   285.00   40.00   NaN
6578     2    33   285.12   40.00   NaN
6579     3    33   285.25   40.00   NaN
6580     4    33   285.38   40.00   NaN
6581     5    33   285.50   40.00   NaN
6582     6    33   285.62   40.00   NaN
6583     7    33   285.75   40.00   NaN
6584     8    33   285.88   40.00   0.07
6585     9    33   286.00   40.00   0.54
6586    10    33   286.12   40.00   0.63
6587    11    33   286.25   40.00   0.71
6588    12    33   286.38   40.00   0.81
6589    13    33   286.50   40.00   0.91
6590    14    33   286.62   40.00   1.01
6591    15    33   286.75   40.00   1.11
6592    16    33   286.88   40.00   1.21
6593    17    33   287.00   40.00   1.30
6594    18    33   287.12   40.00   1.38
6595    19    33   287.25   40.00   1.46
6596    20    33   287.38   40.00   1.53
6597    21    33   287.50   40.00   1.60
6598    22    33   287.62   40.00   1.66
6599    23    33   287.75   40.00   1.73
6600    24    33   287.88   40.00   1.80
6601    25    33   288.00   40.00   1.87
6602    26    33   288.12   40.00   1.95
6603    27    33   288.25   40.00   2.03
6604    28    33   288.38   40.00   2.09
6605    29    33   288.50   40.00   2.15
6606    30    33   288.62   40.00   2.20
6607    31    33   288.75   40.00   2.24
6608    32    33   288.88   40.00   2.30
6609    33    33   289.00   40.00   2.35
6610    34    33   289.12   40.00   2.41
6611    35    33   289.25   40.00   2.47
6612    36    33   289.38   40.00   2.53
6613    37    33   289.50   40.00   2.59
6614    38    33   289.62   40.00   2.64
6615    39    33   289.75   40.00   2.70
6616    40    33   289.88   40.00   2.76
6617    41    33   290.00   40.00   2.82
6618    42    33   290.12   40.00   2.88
6619    43    33   290.25   40.00   2.95
6620    44    33   290.38   40.00   3.01
6621    45    33   290.50   40.00   3.07
6622    46    33   290.62   40.00   3.13
6623    47    33   290.75   40.00   3.19
6624    48    33   290.88   40.00   3.24
6625    49    33   291.00   40.00   3.29
6626    50    33   291.12   40.00   3.33
6627    51    33   291.25   40.00   3.38
6628    52    33   291.38   40.00   3.42
6629    53    33   291.50   40.00   3.46
6630    54    33   291.62   40.00   3.50
6631    55    33   291.75   40.00   3.53
6632    56    33   291.88   40.00   3.56
6633    57    33   292.00   40.00   3.59
6634    58    33   292.12   40.00   3.61
6635    59    33   292.25   40.00   3.62
6636    60    33   292.38   40.00   3.64
6637    61    33   292.50   40.00   3.65
6638    62    33   292.62   40.00   3.65
6639    63    33   292.75   40.00   3.65
6640    64    33   292.88   40.00   3.64
6641    65    33   293.00   40.00   3.63
6642    66    33   293.12   40.00   3.62
6643    67    33   293.25   40.00   3.61
6644    68    33   293.38   40.00   3.61
6645    69    33   293.50   40.00   3.60
6646    70    33   293.62   40.00   3.60
6647    71    33   293.75   40.00   3.60
6648    72    33   293.88   40.00   3.60
6649    73    33   294.00   40.00   3.60
6650    74    33   294.12   40.00   3.59
6651    75    33   294.25   40.00   3.59
6652    76    33   294.38   40.00   3.59
6653    77    33   294.50   40.00   3.60
6654    78    33   294.62   40.00   3.61
6655    79    33   294.75   40.00   3.62
6656    80    33   294.88   40.00   3.63
6657    81    33   295.00   40.00   3.65
6658    82    33   295.12   40.00   3.65
6659    83    33   295.25   40.00   3.66
6660    84    33   295.38   40.00   3.66
6661    85    33   295.50   40.00   3.67
6662    86    33   295.62   40.00   3.67
6663    87    33   295.75   40.00   3.68
6664    88    33   295.88   40.00   3.68
6665    89    33   296.00   40.00   3.68
6666    90    33   296.12   40.00   3.67
6667    91    33   296.25   40.00   3.67
6668    92    33   296.38   40.00   3.65
6669    93    33   296.50   40.00   3.64
6670    94    33   296.62   40.00   3.62
6671    95    33   296.75   40.00   3.61
6672    96    33   296.88   40.00   3.59
6673    97    33   297.00   40.00   3.57
6674    98    33   297.12   40.00   3.56
6675    99    33   297.25   40.00   3.54
6676   100    33   297.38   40.00   3.52
6677   101    33   297.50   40.00   3.51
6678   102    33   297.62   40.00   3.49
6679   103    33   297.75   40.00   3.47
6680   104    33   297.88   40.00   3.45
6681   105    33   298.00   40.00   3.44
6682   106    33   298.12   40.00   3.42
6683   107    33   298.25   40.00   3.40
6684   108    33   298.38   40.00   3.38
6685   109    33   298.50   40.00   3.37
6686   110    33   298.62   40.00   3.35
6687   111    33   298.75   40.00   3.34
6688   112    33   298.88   40.00   3.32
6689   113    33   299.00   40.00   3.31
6690   114    33   299.12   40.00   3.30
6691   115    33   299.25   40.00   3.28
6692   116    33   299.38   40.00   3.27
6693   117    33   299.50   40.00   3.26
6694   118    33   299.62   40.00   3.26
6695   119    33   299.75   40.00   3.25
6696   120    33   299.88   40.00   3.25
6697   121    33   300.00   40.00   3.25
6698   122    33   300.12   40.00   3.25
6699   123    33   300.25   40.00   3.26
6700   124    33   300.38   40.00   3.26
6701   125    33   300.50   40.00   3.27
6702   126    33   300.62   40.00   3.27
6703   127    33   300.75   40.00   3.28
6704   128    33   300.88   40.00   3.29
6705   129    33   301.00   40.00   3.29
6706   130    33   301.12   40.00   3.30
6707   131    33   301.25   40.00   3.30
6708   132    33   301.38   40.00   3.31
6709   133    33   301.50   40.00   3.31
6710   134    33   301.62   40.00   3.32
6711   135    33   301.75   40.00   3.32
6712   136    33   301.88   40.00   3.33
6713   137    33   302.00   40.00   NaN
6714     1    32   285.00   39.88   NaN
6715     2    32   285.12   39.88   NaN
6716     3    32   285.25   39.88   NaN
6717     4    32   285.38   39.88   NaN
6718     5    32   285.50   39.88   NaN
6719     6    32   285.62   39.88   NaN
6720     7    32   285.75   39.88   NaN
6721     8    32   285.88   39.88   0.14
6722     9    32   286.00   39.88   0.61
6723    10    32   286.12   39.88   0.73
6724    11    32   286.25   39.88   0.83
6725    12    32   286.38   39.88   0.94
6726    13    32   286.50   39.88   1.05
6727    14    32   286.62   39.88   1.16
6728    15    32   286.75   39.88   1.26
6729    16    32   286.88   39.88   1.35
6730    17    32   287.00   39.88   1.44
6731    18    32   287.12   39.88   1.51
6732    19    32   287.25   39.88   1.58
6733    20    32   287.38   39.88   1.64
6734    21    32   287.50   39.88   1.70
6735    22    32   287.62   39.88   1.76
6736    23    32   287.75   39.88   1.82
6737    24    32   287.88   39.88   1.88
6738    25    32   288.00   39.88   1.94
6739    26    32   288.12   39.88   2.02
6740    27    32   288.25   39.88   2.09
6741    28    32   288.38   39.88   2.15
6742    29    32   288.50   39.88   2.20
6743    30    32   288.62   39.88   2.25
6744    31    32   288.75   39.88   2.30
6745    32    32   288.88   39.88   2.36
6746    33    32   289.00   39.88   2.42
6747    34    32   289.12   39.88   2.47
6748    35    32   289.25   39.88   2.53
6749    36    32   289.38   39.88   2.58
6750    37    32   289.50   39.88   2.64
6751    38    32   289.62   39.88   2.69
6752    39    32   289.75   39.88   2.75
6753    40    32   289.88   39.88   2.81
6754    41    32   290.00   39.88   2.86
6755    42    32   290.12   39.88   2.92
6756    43    32   290.25   39.88   2.98
6757    44    32   290.38   39.88   3.04
6758    45    32   290.50   39.88   3.10
6759    46    32   290.62   39.88   3.15
6760    47    32   290.75   39.88   3.21
6761    48    32   290.88   39.88   3.25
6762    49    32   291.00   39.88   3.30
6763    50    32   291.12   39.88   3.34
6764    51    32   291.25   39.88   3.39
6765    52    32   291.38   39.88   3.43
6766    53    32   291.50   39.88   3.47
6767    54    32   291.62   39.88   3.51
6768    55    32   291.75   39.88   3.54
6769    56    32   291.88   39.88   3.57
6770    57    32   292.00   39.88   3.60
6771    58    32   292.12   39.88   3.62
6772    59    32   292.25   39.88   3.64
6773    60    32   292.38   39.88   3.65
6774    61    32   292.50   39.88   3.67
6775    62    32   292.62   39.88   3.67
6776    63    32   292.75   39.88   3.67
6777    64    32   292.88   39.88   3.66
6778    65    32   293.00   39.88   3.66
6779    66    32   293.12   39.88   3.65
6780    67    32   293.25   39.88   3.64
6781    68    32   293.38   39.88   3.63
6782    69    32   293.50   39.88   3.63
6783    70    32   293.62   39.88   3.63
6784    71    32   293.75   39.88   3.63
6785    72    32   293.88   39.88   3.62
6786    73    32   294.00   39.88   3.62
6787    74    32   294.12   39.88   3.62
6788    75    32   294.25   39.88   3.62
6789    76    32   294.38   39.88   3.62
6790    77    32   294.50   39.88   3.62
6791    78    32   294.62   39.88   3.63
6792    79    32   294.75   39.88   3.64
6793    80    32   294.88   39.88   3.65
6794    81    32   295.00   39.88   3.66
6795    82    32   295.12   39.88   3.67
6796    83    32   295.25   39.88   3.68
6797    84    32   295.38   39.88   3.68
6798    85    32   295.50   39.88   3.69
6799    86    32   295.62   39.88   3.69
6800    87    32   295.75   39.88   3.70
6801    88    32   295.88   39.88   3.70
6802    89    32   296.00   39.88   3.70
6803    90    32   296.12   39.88   3.69
6804    91    32   296.25   39.88   3.69
6805    92    32   296.38   39.88   3.68
6806    93    32   296.50   39.88   3.66
6807    94    32   296.62   39.88   3.65
6808    95    32   296.75   39.88   3.63
6809    96    32   296.88   39.88   3.62
6810    97    32   297.00   39.88   3.60
6811    98    32   297.12   39.88   3.59
6812    99    32   297.25   39.88   3.57
6813   100    32   297.38   39.88   3.56
6814   101    32   297.50   39.88   3.54
6815   102    32   297.62   39.88   3.52
6816   103    32   297.75   39.88   3.50
6817   104    32   297.88   39.88   3.49
6818   105    32   298.00   39.88   3.47
6819   106    32   298.12   39.88   3.45
6820   107    32   298.25   39.88   3.43
6821   108    32   298.38   39.88   3.42
6822   109    32   298.50   39.88   3.40
6823   110    32   298.62   39.88   3.38
6824   111    32   298.75   39.88   3.37
6825   112    32   298.88   39.88   3.35
6826   113    32   299.00   39.88   3.34
6827   114    32   299.12   39.88   3.32
6828   115    32   299.25   39.88   3.31
6829   116    32   299.38   39.88   3.30
6830   117    32   299.50   39.88   3.29
6831   118    32   299.62   39.88   3.28
6832   119    32   299.75   39.88   3.28
6833   120    32   299.88   39.88   3.27
6834   121    32   300.00   39.88   3.27
6835   122    32   300.12   39.88   3.27
6836   123    32   300.25   39.88   3.27
6837   124    32   300.38   39.88   3.27
6838   125    32   300.50   39.88   3.28
6839   126    32   300.62   39.88   3.28
6840   127    32   300.75   39.88   3.28
6841   128    32   300.88   39.88   3.29
6842   129    32   301.00   39.88   3.29
6843   130    32   301.12   39.88   3.30
6844   131    32   301.25   39.88   3.30
6845   132    32   301.38   39.88   3.30
6846   133    32   301.50   39.88   3.30
6847   134    32   301.62   39.88   3.31
6848   135    32   301.75   39.88   3.32
6849   136    32   301.88   39.88   3.32
6850   137    32   302.00   39.88   NaN
6851     1    31   285.00   39.75   NaN
6852     2    31   285.12   39.75   NaN
6853     3    31   285.25   39.75   NaN
6854     4    31   285.38   39.75   NaN
6855     5    31   285.50   39.75   NaN
6856     6    31   285.62   39.75   NaN
6857     7    31   285.75   39.75   NaN
6858     8    31   285.88   39.75   0.40
6859     9    31   286.00   39.75   0.72
6860    10    31   286.12   39.75   0.86
6861    11    31   286.25   39.75   0.97
6862    12    31   286.38   39.75   1.08
6863    13    31   286.50   39.75   1.19
6864    14    31   286.62   39.75   1.30
6865    15    31   286.75   39.75   1.41
6866    16    31   286.88   39.75   1.49
6867    17    31   287.00   39.75   1.56
6868    18    31   287.12   39.75   1.62
6869    19    31   287.25   39.75   1.68
6870    20    31   287.38   39.75   1.74
6871    21    31   287.50   39.75   1.80
6872    22    31   287.62   39.75   1.85
6873    23    31   287.75   39.75   1.91
6874    24    31   287.88   39.75   1.96
6875    25    31   288.00   39.75   2.02
6876    26    31   288.12   39.75   2.08
6877    27    31   288.25   39.75   2.14
6878    28    31   288.38   39.75   2.20
6879    29    31   288.50   39.75   2.25
6880    30    31   288.62   39.75   2.31
6881    31    31   288.75   39.75   2.36
6882    32    31   288.88   39.75   2.42
6883    33    31   289.00   39.75   2.47
6884    34    31   289.12   39.75   2.53
6885    35    31   289.25   39.75   2.58
6886    36    31   289.38   39.75   2.63
6887    37    31   289.50   39.75   2.69
6888    38    31   289.62   39.75   2.74
6889    39    31   289.75   39.75   2.80
6890    40    31   289.88   39.75   2.85
6891    41    31   290.00   39.75   2.91
6892    42    31   290.12   39.75   2.96
6893    43    31   290.25   39.75   3.02
6894    44    31   290.38   39.75   3.07
6895    45    31   290.50   39.75   3.12
6896    46    31   290.62   39.75   3.18
6897    47    31   290.75   39.75   3.22
6898    48    31   290.88   39.75   3.27
6899    49    31   291.00   39.75   3.31
6900    50    31   291.12   39.75   3.36
6901    51    31   291.25   39.75   3.40
6902    52    31   291.38   39.75   3.44
6903    53    31   291.50   39.75   3.48
6904    54    31   291.62   39.75   3.52
6905    55    31   291.75   39.75   3.56
6906    56    31   291.88   39.75   3.59
6907    57    31   292.00   39.75   3.61
6908    58    31   292.12   39.75   3.63
6909    59    31   292.25   39.75   3.65
6910    60    31   292.38   39.75   3.67
6911    61    31   292.50   39.75   3.69
6912    62    31   292.62   39.75   3.69
6913    63    31   292.75   39.75   3.69
6914    64    31   292.88   39.75   3.69
6915    65    31   293.00   39.75   3.68
6916    66    31   293.12   39.75   3.68
6917    67    31   293.25   39.75   3.67
6918    68    31   293.38   39.75   3.66
6919    69    31   293.50   39.75   3.66
6920    70    31   293.62   39.75   3.66
6921    71    31   293.75   39.75   3.65
6922    72    31   293.88   39.75   3.65
6923    73    31   294.00   39.75   3.64
6924    74    31   294.12   39.75   3.64
6925    75    31   294.25   39.75   3.64
6926    76    31   294.38   39.75   3.64
6927    77    31   294.50   39.75   3.64
6928    78    31   294.62   39.75   3.65
6929    79    31   294.75   39.75   3.66
6930    80    31   294.88   39.75   3.67
6931    81    31   295.00   39.75   3.68
6932    82    31   295.12   39.75   3.69
6933    83    31   295.25   39.75   3.70
6934    84    31   295.38   39.75   3.70
6935    85    31   295.50   39.75   3.71
6936    86    31   295.62   39.75   3.71
6937    87    31   295.75   39.75   3.72
6938    88    31   295.88   39.75   3.72
6939    89    31   296.00   39.75   3.72
6940    90    31   296.12   39.75   3.71
6941    91    31   296.25   39.75   3.71
6942    92    31   296.38   39.75   3.70
6943    93    31   296.50   39.75   3.69
6944    94    31   296.62   39.75   3.68
6945    95    31   296.75   39.75   3.66
6946    96    31   296.88   39.75   3.65
6947    97    31   297.00   39.75   3.64
6948    98    31   297.12   39.75   3.62
6949    99    31   297.25   39.75   3.61
6950   100    31   297.38   39.75   3.59
6951   101    31   297.50   39.75   3.57
6952   102    31   297.62   39.75   3.56
6953   103    31   297.75   39.75   3.54
6954   104    31   297.88   39.75   3.52
6955   105    31   298.00   39.75   3.50
6956   106    31   298.12   39.75   3.49
6957   107    31   298.25   39.75   3.47
6958   108    31   298.38   39.75   3.45
6959   109    31   298.50   39.75   3.43
6960   110    31   298.62   39.75   3.42
6961   111    31   298.75   39.75   3.40
6962   112    31   298.88   39.75   3.38
6963   113    31   299.00   39.75   3.37
6964   114    31   299.12   39.75   3.35
6965   115    31   299.25   39.75   3.34
6966   116    31   299.38   39.75   3.33
6967   117    31   299.50   39.75   3.32
6968   118    31   299.62   39.75   3.31
6969   119    31   299.75   39.75   3.30
6970   120    31   299.88   39.75   3.29
6971   121    31   300.00   39.75   3.29
6972   122    31   300.12   39.75   3.29
6973   123    31   300.25   39.75   3.28
6974   124    31   300.38   39.75   3.29
6975   125    31   300.50   39.75   3.29
6976   126    31   300.62   39.75   3.29
6977   127    31   300.75   39.75   3.29
6978   128    31   300.88   39.75   3.29
6979   129    31   301.00   39.75   3.29
6980   130    31   301.12   39.75   3.29
6981   131    31   301.25   39.75   3.29
6982   132    31   301.38   39.75   3.29
6983   133    31   301.50   39.75   3.30
6984   134    31   301.62   39.75   3.30
6985   135    31   301.75   39.75   3.31
6986   136    31   301.88   39.75   3.32
6987   137    31   302.00   39.75   NaN
6988     1    30   285.00   39.62   NaN
6989     2    30   285.12   39.62   NaN
6990     3    30   285.25   39.62   NaN
6991     4    30   285.38   39.62   NaN
6992     5    30   285.50   39.62   NaN
6993     6    30   285.62   39.62   NaN
6994     7    30   285.75   39.62   0.08
6995     8    30   285.88   39.62   0.65
6996     9    30   286.00   39.62   0.86
6997    10    30   286.12   39.62   0.99
6998    11    30   286.25   39.62   1.10
6999    12    30   286.38   39.62   1.22
7000    13    30   286.50   39.62   1.33
7001    14    30   286.62   39.62   1.43
7002    15    30   286.75   39.62   1.53
7003    16    30   286.88   39.62   1.59
7004    17    30   287.00   39.62   1.66
7005    18    30   287.12   39.62   1.72
7006    19    30   287.25   39.62   1.78
7007    20    30   287.38   39.62   1.83
7008    21    30   287.50   39.62   1.88
7009    22    30   287.62   39.62   1.93
7010    23    30   287.75   39.62   1.98
7011    24    30   287.88   39.62   2.04
7012    25    30   288.00   39.62   2.09
7013    26    30   288.12   39.62   2.14
7014    27    30   288.25   39.62   2.20
7015    28    30   288.38   39.62   2.25
7016    29    30   288.50   39.62   2.31
7017    30    30   288.62   39.62   2.36
7018    31    30   288.75   39.62   2.42
7019    32    30   288.88   39.62   2.47
7020    33    30   289.00   39.62   2.52
7021    34    30   289.12   39.62   2.58
7022    35    30   289.25   39.62   2.63
7023    36    30   289.38   39.62   2.68
7024    37    30   289.50   39.62   2.73
7025    38    30   289.62   39.62   2.79
7026    39    30   289.75   39.62   2.84
7027    40    30   289.88   39.62   2.89
7028    41    30   290.00   39.62   2.94
7029    42    30   290.12   39.62   3.00
7030    43    30   290.25   39.62   3.05
7031    44    30   290.38   39.62   3.10
7032    45    30   290.50   39.62   3.15
7033    46    30   290.62   39.62   3.20
7034    47    30   290.75   39.62   3.24
7035    48    30   290.88   39.62   3.28
7036    49    30   291.00   39.62   3.32
7037    50    30   291.12   39.62   3.37
7038    51    30   291.25   39.62   3.41
7039    52    30   291.38   39.62   3.45
7040    53    30   291.50   39.62   3.49
7041    54    30   291.62   39.62   3.53
7042    55    30   291.75   39.62   3.57
7043    56    30   291.88   39.62   3.60
7044    57    30   292.00   39.62   3.63
7045    58    30   292.12   39.62   3.65
7046    59    30   292.25   39.62   3.67
7047    60    30   292.38   39.62   3.69
7048    61    30   292.50   39.62   3.71
7049    62    30   292.62   39.62   3.71
7050    63    30   292.75   39.62   3.72
7051    64    30   292.88   39.62   3.71
7052    65    30   293.00   39.62   3.71
7053    66    30   293.12   39.62   3.70
7054    67    30   293.25   39.62   3.70
7055    68    30   293.38   39.62   3.69
7056    69    30   293.50   39.62   3.69
7057    70    30   293.62   39.62   3.68
7058    71    30   293.75   39.62   3.68
7059    72    30   293.88   39.62   3.67
7060    73    30   294.00   39.62   3.67
7061    74    30   294.12   39.62   3.67
7062    75    30   294.25   39.62   3.67
7063    76    30   294.38   39.62   3.67
7064    77    30   294.50   39.62   3.67
7065    78    30   294.62   39.62   3.68
7066    79    30   294.75   39.62   3.68
7067    80    30   294.88   39.62   3.69
7068    81    30   295.00   39.62   3.70
7069    82    30   295.12   39.62   3.71
7070    83    30   295.25   39.62   3.72
7071    84    30   295.38   39.62   3.72
7072    85    30   295.50   39.62   3.73
7073    86    30   295.62   39.62   3.73
7074    87    30   295.75   39.62   3.73
7075    88    30   295.88   39.62   3.74
7076    89    30   296.00   39.62   3.74
7077    90    30   296.12   39.62   3.73
7078    91    30   296.25   39.62   3.73
7079    92    30   296.38   39.62   3.72
7080    93    30   296.50   39.62   3.71
7081    94    30   296.62   39.62   3.70
7082    95    30   296.75   39.62   3.69
7083    96    30   296.88   39.62   3.68
7084    97    30   297.00   39.62   3.67
7085    98    30   297.12   39.62   3.65
7086    99    30   297.25   39.62   3.64
7087   100    30   297.38   39.62   3.62
7088   101    30   297.50   39.62   3.61
7089   102    30   297.62   39.62   3.59
7090   103    30   297.75   39.62   3.57
7091   104    30   297.88   39.62   3.56
7092   105    30   298.00   39.62   3.54
7093   106    30   298.12   39.62   3.52
7094   107    30   298.25   39.62   3.50
7095   108    30   298.38   39.62   3.49
7096   109    30   298.50   39.62   3.47
7097   110    30   298.62   39.62   3.45
7098   111    30   298.75   39.62   3.43
7099   112    30   298.88   39.62   3.42
7100   113    30   299.00   39.62   3.40
7101   114    30   299.12   39.62   3.39
7102   115    30   299.25   39.62   3.37
7103   116    30   299.38   39.62   3.36
7104   117    30   299.50   39.62   3.35
7105   118    30   299.62   39.62   3.34
7106   119    30   299.75   39.62   3.33
7107   120    30   299.88   39.62   3.32
7108   121    30   300.00   39.62   3.31
7109   122    30   300.12   39.62   3.31
7110   123    30   300.25   39.62   3.30
7111   124    30   300.38   39.62   3.30
7112   125    30   300.50   39.62   3.30
7113   126    30   300.62   39.62   3.30
7114   127    30   300.75   39.62   3.29
7115   128    30   300.88   39.62   3.29
7116   129    30   301.00   39.62   3.29
7117   130    30   301.12   39.62   3.29
7118   131    30   301.25   39.62   3.29
7119   132    30   301.38   39.62   3.29
7120   133    30   301.50   39.62   3.30
7121   134    30   301.62   39.62   3.30
7122   135    30   301.75   39.62   3.31
7123   136    30   301.88   39.62   3.31
7124   137    30   302.00   39.62   NaN
7125     1    29   285.00   39.50   NaN
7126     2    29   285.12   39.50   NaN
7127     3    29   285.25   39.50   NaN
7128     4    29   285.38   39.50   NaN
7129     5    29   285.50   39.50   NaN
7130     6    29   285.62   39.50   0.09
7131     7    29   285.75   39.50   0.61
7132     8    29   285.88   39.50   0.83
7133     9    29   286.00   39.50   1.00
7134    10    29   286.12   39.50   1.13
7135    11    29   286.25   39.50   1.24
7136    12    29   286.38   39.50   1.36
7137    13    29   286.50   39.50   1.47
7138    14    29   286.62   39.50   1.55
7139    15    29   286.75   39.50   1.62
7140    16    29   286.88   39.50   1.69
7141    17    29   287.00   39.50   1.75
7142    18    29   287.12   39.50   1.80
7143    19    29   287.25   39.50   1.85
7144    20    29   287.38   39.50   1.91
7145    21    29   287.50   39.50   1.96
7146    22    29   287.62   39.50   2.01
7147    23    29   287.75   39.50   2.06
7148    24    29   287.88   39.50   2.10
7149    25    29   288.00   39.50   2.15
7150    26    29   288.12   39.50   2.20
7151    27    29   288.25   39.50   2.25
7152    28    29   288.38   39.50   2.31
7153    29    29   288.50   39.50   2.36
7154    30    29   288.62   39.50   2.41
7155    31    29   288.75   39.50   2.47
7156    32    29   288.88   39.50   2.52
7157    33    29   289.00   39.50   2.57
7158    34    29   289.12   39.50   2.62
7159    35    29   289.25   39.50   2.67
7160    36    29   289.38   39.50   2.73
7161    37    29   289.50   39.50   2.78
7162    38    29   289.62   39.50   2.83
7163    39    29   289.75   39.50   2.88
7164    40    29   289.88   39.50   2.93
7165    41    29   290.00   39.50   2.98
7166    42    29   290.12   39.50   3.03
7167    43    29   290.25   39.50   3.08
7168    44    29   290.38   39.50   3.12
7169    45    29   290.50   39.50   3.17
7170    46    29   290.62   39.50   3.22
7171    47    29   290.75   39.50   3.26
7172    48    29   290.88   39.50   3.30
7173    49    29   291.00   39.50   3.34
7174    50    29   291.12   39.50   3.38
7175    51    29   291.25   39.50   3.42
7176    52    29   291.38   39.50   3.47
7177    53    29   291.50   39.50   3.51
7178    54    29   291.62   39.50   3.55
7179    55    29   291.75   39.50   3.58
7180    56    29   291.88   39.50   3.61
7181    57    29   292.00   39.50   3.64
7182    58    29   292.12   39.50   3.67
7183    59    29   292.25   39.50   3.69
7184    60    29   292.38   39.50   3.71
7185    61    29   292.50   39.50   3.73
7186    62    29   292.62   39.50   3.74
7187    63    29   292.75   39.50   3.74
7188    64    29   292.88   39.50   3.74
7189    65    29   293.00   39.50   3.74
7190    66    29   293.12   39.50   3.73
7191    67    29   293.25   39.50   3.73
7192    68    29   293.38   39.50   3.72
7193    69    29   293.50   39.50   3.72
7194    70    29   293.62   39.50   3.71
7195    71    29   293.75   39.50   3.71
7196    72    29   293.88   39.50   3.70
7197    73    29   294.00   39.50   3.70
7198    74    29   294.12   39.50   3.70
7199    75    29   294.25   39.50   3.69
7200    76    29   294.38   39.50   3.69
7201    77    29   294.50   39.50   3.70
7202    78    29   294.62   39.50   3.70
7203    79    29   294.75   39.50   3.71
7204    80    29   294.88   39.50   3.72
7205    81    29   295.00   39.50   3.73
7206    82    29   295.12   39.50   3.73
7207    83    29   295.25   39.50   3.74
7208    84    29   295.38   39.50   3.74
7209    85    29   295.50   39.50   3.75
7210    86    29   295.62   39.50   3.75
7211    87    29   295.75   39.50   3.75
7212    88    29   295.88   39.50   3.76
7213    89    29   296.00   39.50   3.76
7214    90    29   296.12   39.50   3.75
7215    91    29   296.25   39.50   3.75
7216    92    29   296.38   39.50   3.74
7217    93    29   296.50   39.50   3.73
7218    94    29   296.62   39.50   3.72
7219    95    29   296.75   39.50   3.71
7220    96    29   296.88   39.50   3.70
7221    97    29   297.00   39.50   3.69
7222    98    29   297.12   39.50   3.68
7223    99    29   297.25   39.50   3.67
7224   100    29   297.38   39.50   3.66
7225   101    29   297.50   39.50   3.64
7226   102    29   297.62   39.50   3.63
7227   103    29   297.75   39.50   3.61
7228   104    29   297.88   39.50   3.59
7229   105    29   298.00   39.50   3.57
7230   106    29   298.12   39.50   3.55
7231   107    29   298.25   39.50   3.54
7232   108    29   298.38   39.50   3.52
7233   109    29   298.50   39.50   3.50
7234   110    29   298.62   39.50   3.49
7235   111    29   298.75   39.50   3.47
7236   112    29   298.88   39.50   3.45
7237   113    29   299.00   39.50   3.44
7238   114    29   299.12   39.50   3.42
7239   115    29   299.25   39.50   3.41
7240   116    29   299.38   39.50   3.39
7241   117    29   299.50   39.50   3.38
7242   118    29   299.62   39.50   3.37
7243   119    29   299.75   39.50   3.35
7244   120    29   299.88   39.50   3.34
7245   121    29   300.00   39.50   3.33
7246   122    29   300.12   39.50   3.33
7247   123    29   300.25   39.50   3.32
7248   124    29   300.38   39.50   3.32
7249   125    29   300.50   39.50   3.31
7250   126    29   300.62   39.50   3.31
7251   127    29   300.75   39.50   3.30
7252   128    29   300.88   39.50   3.30
7253   129    29   301.00   39.50   3.29
7254   130    29   301.12   39.50   3.29
7255   131    29   301.25   39.50   3.29
7256   132    29   301.38   39.50   3.30
7257   133    29   301.50   39.50   3.30
7258   134    29   301.62   39.50   3.31
7259   135    29   301.75   39.50   3.31
7260   136    29   301.88   39.50   3.32
7261   137    29   302.00   39.50   NaN
7262     1    28   285.00   39.38   NaN
7263     2    28   285.12   39.38   NaN
7264     3    28   285.25   39.38   NaN
7265     4    28   285.38   39.38   NaN
7266     5    28   285.50   39.38   0.09
7267     6    28   285.62   39.38   0.60
7268     7    28   285.75   39.38   0.80
7269     8    28   285.88   39.38   0.98
7270     9    28   286.00   39.38   1.13
7271    10    28   286.12   39.38   1.26
7272    11    28   286.25   39.38   1.37
7273    12    28   286.38   39.38   1.47
7274    13    28   286.50   39.38   1.57
7275    14    28   286.62   39.38   1.64
7276    15    28   286.75   39.38   1.70
7277    16    28   286.88   39.38   1.76
7278    17    28   287.00   39.38   1.82
7279    18    28   287.12   39.38   1.87
7280    19    28   287.25   39.38   1.92
7281    20    28   287.38   39.38   1.97
7282    21    28   287.50   39.38   2.02
7283    22    28   287.62   39.38   2.07
7284    23    28   287.75   39.38   2.11
7285    24    28   287.88   39.38   2.16
7286    25    28   288.00   39.38   2.21
7287    26    28   288.12   39.38   2.26
7288    27    28   288.25   39.38   2.31
7289    28    28   288.38   39.38   2.36
7290    29    28   288.50   39.38   2.41
7291    30    28   288.62   39.38   2.46
7292    31    28   288.75   39.38   2.51
7293    32    28   288.88   39.38   2.56
7294    33    28   289.00   39.38   2.62
7295    34    28   289.12   39.38   2.67
7296    35    28   289.25   39.38   2.72
7297    36    28   289.38   39.38   2.77
7298    37    28   289.50   39.38   2.82
7299    38    28   289.62   39.38   2.87
7300    39    28   289.75   39.38   2.92
7301    40    28   289.88   39.38   2.97
7302    41    28   290.00   39.38   3.01
7303    42    28   290.12   39.38   3.06
7304    43    28   290.25   39.38   3.10
7305    44    28   290.38   39.38   3.15
7306    45    28   290.50   39.38   3.19
7307    46    28   290.62   39.38   3.23
7308    47    28   290.75   39.38   3.28
7309    48    28   290.88   39.38   3.31
7310    49    28   291.00   39.38   3.36
7311    50    28   291.12   39.38   3.40
7312    51    28   291.25   39.38   3.44
7313    52    28   291.38   39.38   3.48
7314    53    28   291.50   39.38   3.52
7315    54    28   291.62   39.38   3.56
7316    55    28   291.75   39.38   3.59
7317    56    28   291.88   39.38   3.63
7318    57    28   292.00   39.38   3.66
7319    58    28   292.12   39.38   3.68
7320    59    28   292.25   39.38   3.71
7321    60    28   292.38   39.38   3.73
7322    61    28   292.50   39.38   3.75
7323    62    28   292.62   39.38   3.76
7324    63    28   292.75   39.38   3.76
7325    64    28   292.88   39.38   3.77
7326    65    28   293.00   39.38   3.76
7327    66    28   293.12   39.38   3.76
7328    67    28   293.25   39.38   3.76
7329    68    28   293.38   39.38   3.75
7330    69    28   293.50   39.38   3.75
7331    70    28   293.62   39.38   3.74
7332    71    28   293.75   39.38   3.74
7333    72    28   293.88   39.38   3.73
7334    73    28   294.00   39.38   3.73
7335    74    28   294.12   39.38   3.73
7336    75    28   294.25   39.38   3.72
7337    76    28   294.38   39.38   3.73
7338    77    28   294.50   39.38   3.73
7339    78    28   294.62   39.38   3.73
7340    79    28   294.75   39.38   3.74
7341    80    28   294.88   39.38   3.75
7342    81    28   295.00   39.38   3.75
7343    82    28   295.12   39.38   3.76
7344    83    28   295.25   39.38   3.76
7345    84    28   295.38   39.38   3.77
7346    85    28   295.50   39.38   3.77
7347    86    28   295.62   39.38   3.77
7348    87    28   295.75   39.38   3.78
7349    88    28   295.88   39.38   3.78
7350    89    28   296.00   39.38   3.78
7351    90    28   296.12   39.38   3.77
7352    91    28   296.25   39.38   3.77
7353    92    28   296.38   39.38   3.76
7354    93    28   296.50   39.38   3.75
7355    94    28   296.62   39.38   3.74
7356    95    28   296.75   39.38   3.74
7357    96    28   296.88   39.38   3.73
7358    97    28   297.00   39.38   3.72
7359    98    28   297.12   39.38   3.71
7360    99    28   297.25   39.38   3.70
7361   100    28   297.38   39.38   3.69
7362   101    28   297.50   39.38   3.67
7363   102    28   297.62   39.38   3.66
7364   103    28   297.75   39.38   3.64
7365   104    28   297.88   39.38   3.62
7366   105    28   298.00   39.38   3.60
7367   106    28   298.12   39.38   3.59
7368   107    28   298.25   39.38   3.57
7369   108    28   298.38   39.38   3.56
7370   109    28   298.50   39.38   3.54
7371   110    28   298.62   39.38   3.52
7372   111    28   298.75   39.38   3.51
7373   112    28   298.88   39.38   3.49
7374   113    28   299.00   39.38   3.48
7375   114    28   299.12   39.38   3.46
7376   115    28   299.25   39.38   3.44
7377   116    28   299.38   39.38   3.43
7378   117    28   299.50   39.38   3.41
7379   118    28   299.62   39.38   3.40
7380   119    28   299.75   39.38   3.39
7381   120    28   299.88   39.38   3.37
7382   121    28   300.00   39.38   3.36
7383   122    28   300.12   39.38   3.35
7384   123    28   300.25   39.38   3.34
7385   124    28   300.38   39.38   3.33
7386   125    28   300.50   39.38   3.32
7387   126    28   300.62   39.38   3.32
7388   127    28   300.75   39.38   3.31
7389   128    28   300.88   39.38   3.30
7390   129    28   301.00   39.38   3.30
7391   130    28   301.12   39.38   3.30
7392   131    28   301.25   39.38   3.30
7393   132    28   301.38   39.38   3.31
7394   133    28   301.50   39.38   3.31
7395   134    28   301.62   39.38   3.31
7396   135    28   301.75   39.38   3.32
7397   136    28   301.88   39.38   3.32
7398   137    28   302.00   39.38   NaN
7399     1    27   285.00   39.25   NaN
7400     2    27   285.12   39.25   NaN
7401     3    27   285.25   39.25   NaN
7402     4    27   285.38   39.25   0.54
7403     5    27   285.50   39.25   0.64
7404     6    27   285.62   39.25   0.80
7405     7    27   285.75   39.25   0.97
7406     8    27   285.88   39.25   1.13
7407     9    27   286.00   39.25   1.26
7408    10    27   286.12   39.25   1.38
7409    11    27   286.25   39.25   1.49
7410    12    27   286.38   39.25   1.57
7411    13    27   286.50   39.25   1.64
7412    14    27   286.62   39.25   1.70
7413    15    27   286.75   39.25   1.76
7414    16    27   286.88   39.25   1.82
7415    17    27   287.00   39.25   1.87
7416    18    27   287.12   39.25   1.92
7417    19    27   287.25   39.25   1.97
7418    20    27   287.38   39.25   2.02
7419    21    27   287.50   39.25   2.07
7420    22    27   287.62   39.25   2.11
7421    23    27   287.75   39.25   2.16
7422    24    27   287.88   39.25   2.21
7423    25    27   288.00   39.25   2.25
7424    26    27   288.12   39.25   2.31
7425    27    27   288.25   39.25   2.36
7426    28    27   288.38   39.25   2.41
7427    29    27   288.50   39.25   2.46
7428    30    27   288.62   39.25   2.51
7429    31    27   288.75   39.25   2.56
7430    32    27   288.88   39.25   2.61
7431    33    27   289.00   39.25   2.66
7432    34    27   289.12   39.25   2.71
7433    35    27   289.25   39.25   2.76
7434    36    27   289.38   39.25   2.81
7435    37    27   289.50   39.25   2.86
7436    38    27   289.62   39.25   2.91
7437    39    27   289.75   39.25   2.95
7438    40    27   289.88   39.25   3.00
7439    41    27   290.00   39.25   3.04
7440    42    27   290.12   39.25   3.08
7441    43    27   290.25   39.25   3.12
7442    44    27   290.38   39.25   3.17
7443    45    27   290.50   39.25   3.21
7444    46    27   290.62   39.25   3.25
7445    47    27   290.75   39.25   3.30
7446    48    27   290.88   39.25   3.33
7447    49    27   291.00   39.25   3.37
7448    50    27   291.12   39.25   3.41
7449    51    27   291.25   39.25   3.45
7450    52    27   291.38   39.25   3.49
7451    53    27   291.50   39.25   3.53
7452    54    27   291.62   39.25   3.57
7453    55    27   291.75   39.25   3.61
7454    56    27   291.88   39.25   3.64
7455    57    27   292.00   39.25   3.67
7456    58    27   292.12   39.25   3.70
7457    59    27   292.25   39.25   3.73
7458    60    27   292.38   39.25   3.75
7459    61    27   292.50   39.25   3.77
7460    62    27   292.62   39.25   3.78
7461    63    27   292.75   39.25   3.79
7462    64    27   292.88   39.25   3.79
7463    65    27   293.00   39.25   3.79
7464    66    27   293.12   39.25   3.79
7465    67    27   293.25   39.25   3.79
7466    68    27   293.38   39.25   3.78
7467    69    27   293.50   39.25   3.78
7468    70    27   293.62   39.25   3.77
7469    71    27   293.75   39.25   3.77
7470    72    27   293.88   39.25   3.76
7471    73    27   294.00   39.25   3.76
7472    74    27   294.12   39.25   3.76
7473    75    27   294.25   39.25   3.75
7474    76    27   294.38   39.25   3.76
7475    77    27   294.50   39.25   3.76
7476    78    27   294.62   39.25   3.77
7477    79    27   294.75   39.25   3.77
7478    80    27   294.88   39.25   3.78
7479    81    27   295.00   39.25   3.78
7480    82    27   295.12   39.25   3.79
7481    83    27   295.25   39.25   3.79
7482    84    27   295.38   39.25   3.79
7483    85    27   295.50   39.25   3.79
7484    86    27   295.62   39.25   3.79
7485    87    27   295.75   39.25   3.80
7486    88    27   295.88   39.25   3.80
7487    89    27   296.00   39.25   3.80
7488    90    27   296.12   39.25   3.79
7489    91    27   296.25   39.25   3.79
7490    92    27   296.38   39.25   3.78
7491    93    27   296.50   39.25   3.77
7492    94    27   296.62   39.25   3.77
7493    95    27   296.75   39.25   3.76
7494    96    27   296.88   39.25   3.75
7495    97    27   297.00   39.25   3.75
7496    98    27   297.12   39.25   3.74
7497    99    27   297.25   39.25   3.73
7498   100    27   297.38   39.25   3.71
7499   101    27   297.50   39.25   3.70
7500   102    27   297.62   39.25   3.69
7501   103    27   297.75   39.25   3.67
7502   104    27   297.88   39.25   3.65
7503   105    27   298.00   39.25   3.64
7504   106    27   298.12   39.25   3.62
7505   107    27   298.25   39.25   3.60
7506   108    27   298.38   39.25   3.59
7507   109    27   298.50   39.25   3.58
7508   110    27   298.62   39.25   3.56
7509   111    27   298.75   39.25   3.55
7510   112    27   298.88   39.25   3.53
7511   113    27   299.00   39.25   3.52
7512   114    27   299.12   39.25   3.50
7513   115    27   299.25   39.25   3.48
7514   116    27   299.38   39.25   3.46
7515   117    27   299.50   39.25   3.45
7516   118    27   299.62   39.25   3.43
7517   119    27   299.75   39.25   3.42
7518   120    27   299.88   39.25   3.40
7519   121    27   300.00   39.25   3.39
7520   122    27   300.12   39.25   3.38
7521   123    27   300.25   39.25   3.36
7522   124    27   300.38   39.25   3.35
7523   125    27   300.50   39.25   3.34
7524   126    27   300.62   39.25   3.33
7525   127    27   300.75   39.25   3.32
7526   128    27   300.88   39.25   3.32
7527   129    27   301.00   39.25   3.31
7528   130    27   301.12   39.25   3.31
7529   131    27   301.25   39.25   3.32
7530   132    27   301.38   39.25   3.32
7531   133    27   301.50   39.25   3.32
7532   134    27   301.62   39.25   3.33
7533   135    27   301.75   39.25   3.33
7534   136    27   301.88   39.25   3.33
7535   137    27   302.00   39.25   NaN
7536     1    26   285.00   39.12   NaN
7537     2    26   285.12   39.12   0.03
7538     3    26   285.25   39.12   0.09
7539     4    26   285.38   39.12   0.67
7540     5    26   285.50   39.12   0.80
7541     6    26   285.62   39.12   0.95
7542     7    26   285.75   39.12   1.11
7543     8    26   285.88   39.12   1.24
7544     9    26   286.00   39.12   1.37
7545    10    26   286.12   39.12   1.47
7546    11    26   286.25   39.12   1.56
7547    12    26   286.38   39.12   1.63
7548    13    26   286.50   39.12   1.70
7549    14    26   286.62   39.12   1.75
7550    15    26   286.75   39.12   1.81
7551    16    26   286.88   39.12   1.86
7552    17    26   287.00   39.12   1.92
7553    18    26   287.12   39.12   1.97
7554    19    26   287.25   39.12   2.02
7555    20    26   287.38   39.12   2.06
7556    21    26   287.50   39.12   2.11
7557    22    26   287.62   39.12   2.16
7558    23    26   287.75   39.12   2.20
7559    24    26   287.88   39.12   2.25
7560    25    26   288.00   39.12   2.30
7561    26    26   288.12   39.12   2.36
7562    27    26   288.25   39.12   2.41
7563    28    26   288.38   39.12   2.46
7564    29    26   288.50   39.12   2.51
7565    30    26   288.62   39.12   2.56
7566    31    26   288.75   39.12   2.60
7567    32    26   288.88   39.12   2.65
7568    33    26   289.00   39.12   2.70
7569    34    26   289.12   39.12   2.75
7570    35    26   289.25   39.12   2.80
7571    36    26   289.38   39.12   2.85
7572    37    26   289.50   39.12   2.90
7573    38    26   289.62   39.12   2.94
7574    39    26   289.75   39.12   2.99
7575    40    26   289.88   39.12   3.03
7576    41    26   290.00   39.12   3.06
7577    42    26   290.12   39.12   3.11
7578    43    26   290.25   39.12   3.15
7579    44    26   290.38   39.12   3.19
7580    45    26   290.50   39.12   3.23
7581    46    26   290.62   39.12   3.27
7582    47    26   290.75   39.12   3.31
7583    48    26   290.88   39.12   3.35
7584    49    26   291.00   39.12   3.39
7585    50    26   291.12   39.12   3.43
7586    51    26   291.25   39.12   3.47
7587    52    26   291.38   39.12   3.51
7588    53    26   291.50   39.12   3.55
7589    54    26   291.62   39.12   3.58
7590    55    26   291.75   39.12   3.62
7591    56    26   291.88   39.12   3.65
7592    57    26   292.00   39.12   3.68
7593    58    26   292.12   39.12   3.71
7594    59    26   292.25   39.12   3.74
7595    60    26   292.38   39.12   3.77
7596    61    26   292.50   39.12   3.79
7597    62    26   292.62   39.12   3.80
7598    63    26   292.75   39.12   3.81
7599    64    26   292.88   39.12   3.81
7600    65    26   293.00   39.12   3.82
7601    66    26   293.12   39.12   3.82
7602    67    26   293.25   39.12   3.82
7603    68    26   293.38   39.12   3.81
7604    69    26   293.50   39.12   3.81
7605    70    26   293.62   39.12   3.80
7606    71    26   293.75   39.12   3.80
7607    72    26   293.88   39.12   3.79
7608    73    26   294.00   39.12   3.79
7609    74    26   294.12   39.12   3.79
7610    75    26   294.25   39.12   3.79
7611    76    26   294.38   39.12   3.79
7612    77    26   294.50   39.12   3.79
7613    78    26   294.62   39.12   3.79
7614    79    26   294.75   39.12   3.80
7615    80    26   294.88   39.12   3.80
7616    81    26   295.00   39.12   3.81
7617    82    26   295.12   39.12   3.81
7618    83    26   295.25   39.12   3.81
7619    84    26   295.38   39.12   3.81
7620    85    26   295.50   39.12   3.82
7621    86    26   295.62   39.12   3.82
7622    87    26   295.75   39.12   3.82
7623    88    26   295.88   39.12   3.82
7624    89    26   296.00   39.12   3.82
7625    90    26   296.12   39.12   3.82
7626    91    26   296.25   39.12   3.81
7627    92    26   296.38   39.12   3.80
7628    93    26   296.50   39.12   3.80
7629    94    26   296.62   39.12   3.79
7630    95    26   296.75   39.12   3.78
7631    96    26   296.88   39.12   3.78
7632    97    26   297.00   39.12   3.77
7633    98    26   297.12   39.12   3.76
7634    99    26   297.25   39.12   3.75
7635   100    26   297.38   39.12   3.74
7636   101    26   297.50   39.12   3.73
7637   102    26   297.62   39.12   3.71
7638   103    26   297.75   39.12   3.70
7639   104    26   297.88   39.12   3.68
7640   105    26   298.00   39.12   3.67
7641   106    26   298.12   39.12   3.65
7642   107    26   298.25   39.12   3.64
7643   108    26   298.38   39.12   3.63
7644   109    26   298.50   39.12   3.61
7645   110    26   298.62   39.12   3.60
7646   111    26   298.75   39.12   3.58
7647   112    26   298.88   39.12   3.57
7648   113    26   299.00   39.12   3.55
7649   114    26   299.12   39.12   3.54
7650   115    26   299.25   39.12   3.52
7651   116    26   299.38   39.12   3.50
7652   117    26   299.50   39.12   3.48
7653   118    26   299.62   39.12   3.47
7654   119    26   299.75   39.12   3.45
7655   120    26   299.88   39.12   3.43
7656   121    26   300.00   39.12   3.42
7657   122    26   300.12   39.12   3.40
7658   123    26   300.25   39.12   3.38
7659   124    26   300.38   39.12   3.37
7660   125    26   300.50   39.12   3.36
7661   126    26   300.62   39.12   3.35
7662   127    26   300.75   39.12   3.34
7663   128    26   300.88   39.12   3.33
7664   129    26   301.00   39.12   3.33
7665   130    26   301.12   39.12   3.33
7666   131    26   301.25   39.12   3.33
7667   132    26   301.38   39.12   3.33
7668   133    26   301.50   39.12   3.34
7669   134    26   301.62   39.12   3.34
7670   135    26   301.75   39.12   3.34
7671   136    26   301.88   39.12   3.34
7672   137    26   302.00   39.12   NaN
7673     1    25   285.00   39.00   NaN
7674     2    25   285.12   39.00   0.08
7675     3    25   285.25   39.00   0.59
7676     4    25   285.38   39.00   0.80
7677     5    25   285.50   39.00   0.95
7678     6    25   285.62   39.00   1.10
7679     7    25   285.75   39.00   1.23
7680     8    25   285.88   39.00   1.36
7681     9    25   286.00   39.00   1.46
7682    10    25   286.12   39.00   1.54
7683    11    25   286.25   39.00   1.62
7684    12    25   286.38   39.00   1.68
7685    13    25   286.50   39.00   1.74
7686    14    25   286.62   39.00   1.79
7687    15    25   286.75   39.00   1.84
7688    16    25   286.88   39.00   1.90
7689    17    25   287.00   39.00   1.95
7690    18    25   287.12   39.00   2.00
7691    19    25   287.25   39.00   2.05
7692    20    25   287.38   39.00   2.10
7693    21    25   287.50   39.00   2.15
7694    22    25   287.62   39.00   2.20
7695    23    25   287.75   39.00   2.25
7696    24    25   287.88   39.00   2.30
7697    25    25   288.00   39.00   2.35
7698    26    25   288.12   39.00   2.41
7699    27    25   288.25   39.00   2.46
7700    28    25   288.38   39.00   2.51
7701    29    25   288.50   39.00   2.56
7702    30    25   288.62   39.00   2.60
7703    31    25   288.75   39.00   2.65
7704    32    25   288.88   39.00   2.70
7705    33    25   289.00   39.00   2.74
7706    34    25   289.12   39.00   2.79
7707    35    25   289.25   39.00   2.84
7708    36    25   289.38   39.00   2.89
7709    37    25   289.50   39.00   2.93
7710    38    25   289.62   39.00   2.97
7711    39    25   289.75   39.00   3.01
7712    40    25   289.88   39.00   3.05
7713    41    25   290.00   39.00   3.09
7714    42    25   290.12   39.00   3.13
7715    43    25   290.25   39.00   3.17
7716    44    25   290.38   39.00   3.21
7717    45    25   290.50   39.00   3.26
7718    46    25   290.62   39.00   3.29
7719    47    25   290.75   39.00   3.33
7720    48    25   290.88   39.00   3.37
7721    49    25   291.00   39.00   3.41
7722    50    25   291.12   39.00   3.45
7723    51    25   291.25   39.00   3.48
7724    52    25   291.38   39.00   3.52
7725    53    25   291.50   39.00   3.56
7726    54    25   291.62   39.00   3.60
7727    55    25   291.75   39.00   3.63
7728    56    25   291.88   39.00   3.66
7729    57    25   292.00   39.00   3.70
7730    58    25   292.12   39.00   3.73
7731    59    25   292.25   39.00   3.76
7732    60    25   292.38   39.00   3.78
7733    61    25   292.50   39.00   3.81
7734    62    25   292.62   39.00   3.82
7735    63    25   292.75   39.00   3.83
7736    64    25   292.88   39.00   3.84
7737    65    25   293.00   39.00   3.84
7738    66    25   293.12   39.00   3.85
7739    67    25   293.25   39.00   3.85
7740    68    25   293.38   39.00   3.85
7741    69    25   293.50   39.00   3.84
7742    70    25   293.62   39.00   3.84
7743    71    25   293.75   39.00   3.83
7744    72    25   293.88   39.00   3.83
7745    73    25   294.00   39.00   3.82
7746    74    25   294.12   39.00   3.82
7747    75    25   294.25   39.00   3.82
7748    76    25   294.38   39.00   3.82
7749    77    25   294.50   39.00   3.82
7750    78    25   294.62   39.00   3.82
7751    79    25   294.75   39.00   3.82
7752    80    25   294.88   39.00   3.83
7753    81    25   295.00   39.00   3.83
7754    82    25   295.12   39.00   3.83
7755    83    25   295.25   39.00   3.84
7756    84    25   295.38   39.00   3.84
7757    85    25   295.50   39.00   3.84
7758    86    25   295.62   39.00   3.84
7759    87    25   295.75   39.00   3.84
7760    88    25   295.88   39.00   3.84
7761    89    25   296.00   39.00   3.84
7762    90    25   296.12   39.00   3.84
7763    91    25   296.25   39.00   3.83
7764    92    25   296.38   39.00   3.82
7765    93    25   296.50   39.00   3.82
7766    94    25   296.62   39.00   3.81
7767    95    25   296.75   39.00   3.81
7768    96    25   296.88   39.00   3.80
7769    97    25   297.00   39.00   3.79
7770    98    25   297.12   39.00   3.79
7771    99    25   297.25   39.00   3.78
7772   100    25   297.38   39.00   3.77
7773   101    25   297.50   39.00   3.75
7774   102    25   297.62   39.00   3.74
7775   103    25   297.75   39.00   3.73
7776   104    25   297.88   39.00   3.71
7777   105    25   298.00   39.00   3.70
7778   106    25   298.12   39.00   3.69
7779   107    25   298.25   39.00   3.67
7780   108    25   298.38   39.00   3.66
7781   109    25   298.50   39.00   3.65
7782   110    25   298.62   39.00   3.63
7783   111    25   298.75   39.00   3.62
7784   112    25   298.88   39.00   3.61
7785   113    25   299.00   39.00   3.59
7786   114    25   299.12   39.00   3.57
7787   115    25   299.25   39.00   3.56
7788   116    25   299.38   39.00   3.54
7789   117    25   299.50   39.00   3.52
7790   118    25   299.62   39.00   3.50
7791   119    25   299.75   39.00   3.48
7792   120    25   299.88   39.00   3.46
7793   121    25   300.00   39.00   3.44
7794   122    25   300.12   39.00   3.42
7795   123    25   300.25   39.00   3.41
7796   124    25   300.38   39.00   3.39
7797   125    25   300.50   39.00   3.38
7798   126    25   300.62   39.00   3.37
7799   127    25   300.75   39.00   3.36
7800   128    25   300.88   39.00   3.35
7801   129    25   301.00   39.00   3.35
7802   130    25   301.12   39.00   3.35
7803   131    25   301.25   39.00   3.35
7804   132    25   301.38   39.00   3.35
7805   133    25   301.50   39.00   3.35
7806   134    25   301.62   39.00   3.35
7807   135    25   301.75   39.00   3.36
7808   136    25   301.88   39.00   3.36
7809   137    25   302.00   39.00   NaN
7810     1    24   285.00   38.88   NaN
7811     2    24   285.12   38.88   0.57
7812     3    24   285.25   38.88   0.78
7813     4    24   285.38   38.88   0.94
7814     5    24   285.50   38.88   1.08
7815     6    24   285.62   38.88   1.22
7816     7    24   285.75   38.88   1.34
7817     8    24   285.88   38.88   1.44
7818     9    24   286.00   38.88   1.53
7819    10    24   286.12   38.88   1.60
7820    11    24   286.25   38.88   1.66
7821    12    24   286.38   38.88   1.72
7822    13    24   286.50   38.88   1.77
7823    14    24   286.62   38.88   1.82
7824    15    24   286.75   38.88   1.87
7825    16    24   286.88   38.88   1.93
7826    17    24   287.00   38.88   1.98
7827    18    24   287.12   38.88   2.03
7828    19    24   287.25   38.88   2.08
7829    20    24   287.38   38.88   2.13
7830    21    24   287.50   38.88   2.18
7831    22    24   287.62   38.88   2.23
7832    23    24   287.75   38.88   2.28
7833    24    24   287.88   38.88   2.34
7834    25    24   288.00   38.88   2.39
7835    26    24   288.12   38.88   2.45
7836    27    24   288.25   38.88   2.50
7837    28    24   288.38   38.88   2.55
7838    29    24   288.50   38.88   2.60
7839    30    24   288.62   38.88   2.64
7840    31    24   288.75   38.88   2.69
7841    32    24   288.88   38.88   2.73
7842    33    24   289.00   38.88   2.78
7843    34    24   289.12   38.88   2.83
7844    35    24   289.25   38.88   2.88
7845    36    24   289.38   38.88   2.92
7846    37    24   289.50   38.88   2.96
7847    38    24   289.62   38.88   3.00
7848    39    24   289.75   38.88   3.04
7849    40    24   289.88   38.88   3.08
7850    41    24   290.00   38.88   3.12
7851    42    24   290.12   38.88   3.16
7852    43    24   290.25   38.88   3.20
7853    44    24   290.38   38.88   3.24
7854    45    24   290.50   38.88   3.28
7855    46    24   290.62   38.88   3.32
7856    47    24   290.75   38.88   3.35
7857    48    24   290.88   38.88   3.39
7858    49    24   291.00   38.88   3.43
7859    50    24   291.12   38.88   3.46
7860    51    24   291.25   38.88   3.50
7861    52    24   291.38   38.88   3.54
7862    53    24   291.50   38.88   3.58
7863    54    24   291.62   38.88   3.61
7864    55    24   291.75   38.88   3.65
7865    56    24   291.88   38.88   3.68
7866    57    24   292.00   38.88   3.71
7867    58    24   292.12   38.88   3.74
7868    59    24   292.25   38.88   3.77
7869    60    24   292.38   38.88   3.80
7870    61    24   292.50   38.88   3.82
7871    62    24   292.62   38.88   3.84
7872    63    24   292.75   38.88   3.85
7873    64    24   292.88   38.88   3.86
7874    65    24   293.00   38.88   3.86
7875    66    24   293.12   38.88   3.86
7876    67    24   293.25   38.88   3.87
7877    68    24   293.38   38.88   3.87
7878    69    24   293.50   38.88   3.86
7879    70    24   293.62   38.88   3.86
7880    71    24   293.75   38.88   3.85
7881    72    24   293.88   38.88   3.85
7882    73    24   294.00   38.88   3.85
7883    74    24   294.12   38.88   3.84
7884    75    24   294.25   38.88   3.84
7885    76    24   294.38   38.88   3.84
7886    77    24   294.50   38.88   3.84
7887    78    24   294.62   38.88   3.85
7888    79    24   294.75   38.88   3.85
7889    80    24   294.88   38.88   3.85
7890    81    24   295.00   38.88   3.86
7891    82    24   295.12   38.88   3.86
7892    83    24   295.25   38.88   3.86
7893    84    24   295.38   38.88   3.86
7894    85    24   295.50   38.88   3.86
7895    86    24   295.62   38.88   3.86
7896    87    24   295.75   38.88   3.87
7897    88    24   295.88   38.88   3.86
7898    89    24   296.00   38.88   3.86
7899    90    24   296.12   38.88   3.86
7900    91    24   296.25   38.88   3.86
7901    92    24   296.38   38.88   3.85
7902    93    24   296.50   38.88   3.85
7903    94    24   296.62   38.88   3.84
7904    95    24   296.75   38.88   3.84
7905    96    24   296.88   38.88   3.83
7906    97    24   297.00   38.88   3.82
7907    98    24   297.12   38.88   3.81
7908    99    24   297.25   38.88   3.80
7909   100    24   297.38   38.88   3.79
7910   101    24   297.50   38.88   3.78
7911   102    24   297.62   38.88   3.77
7912   103    24   297.75   38.88   3.76
7913   104    24   297.88   38.88   3.75
7914   105    24   298.00   38.88   3.74
7915   106    24   298.12   38.88   3.72
7916   107    24   298.25   38.88   3.71
7917   108    24   298.38   38.88   3.70
7918   109    24   298.50   38.88   3.69
7919   110    24   298.62   38.88   3.67
7920   111    24   298.75   38.88   3.66
7921   112    24   298.88   38.88   3.64
7922   113    24   299.00   38.88   3.63
7923   114    24   299.12   38.88   3.61
7924   115    24   299.25   38.88   3.59
7925   116    24   299.38   38.88   3.57
7926   117    24   299.50   38.88   3.55
7927   118    24   299.62   38.88   3.53
7928   119    24   299.75   38.88   3.51
7929   120    24   299.88   38.88   3.49
7930   121    24   300.00   38.88   3.47
7931   122    24   300.12   38.88   3.45
7932   123    24   300.25   38.88   3.43
7933   124    24   300.38   38.88   3.41
7934   125    24   300.50   38.88   3.39
7935   126    24   300.62   38.88   3.38
7936   127    24   300.75   38.88   3.37
7937   128    24   300.88   38.88   3.37
7938   129    24   301.00   38.88   3.36
7939   130    24   301.12   38.88   3.36
7940   131    24   301.25   38.88   3.36
7941   132    24   301.38   38.88   3.36
7942   133    24   301.50   38.88   3.36
7943   134    24   301.62   38.88   3.36
7944   135    24   301.75   38.88   3.36
7945   136    24   301.88   38.88   3.36
7946   137    24   302.00   38.88   NaN
7947     1    23   285.00   38.75   NaN
7948     2    23   285.12   38.75   0.76
7949     3    23   285.25   38.75   0.92
7950     4    23   285.38   38.75   1.07
7951     5    23   285.50   38.75   1.20
7952     6    23   285.62   38.75   1.32
7953     7    23   285.75   38.75   1.42
7954     8    23   285.88   38.75   1.50
7955     9    23   286.00   38.75   1.58
7956    10    23   286.12   38.75   1.64
7957    11    23   286.25   38.75   1.70
7958    12    23   286.38   38.75   1.75
7959    13    23   286.50   38.75   1.80
7960    14    23   286.62   38.75   1.85
7961    15    23   286.75   38.75   1.90
7962    16    23   286.88   38.75   1.95
7963    17    23   287.00   38.75   2.00
7964    18    23   287.12   38.75   2.06
7965    19    23   287.25   38.75   2.11
7966    20    23   287.38   38.75   2.16
7967    21    23   287.50   38.75   2.21
7968    22    23   287.62   38.75   2.26
7969    23    23   287.75   38.75   2.32
7970    24    23   287.88   38.75   2.37
7971    25    23   288.00   38.75   2.43
7972    26    23   288.12   38.75   2.48
7973    27    23   288.25   38.75   2.53
7974    28    23   288.38   38.75   2.58
7975    29    23   288.50   38.75   2.63
7976    30    23   288.62   38.75   2.68
7977    31    23   288.75   38.75   2.72
7978    32    23   288.88   38.75   2.77
7979    33    23   289.00   38.75   2.81
7980    34    23   289.12   38.75   2.86
7981    35    23   289.25   38.75   2.91
7982    36    23   289.38   38.75   2.95
7983    37    23   289.50   38.75   2.99
7984    38    23   289.62   38.75   3.03
7985    39    23   289.75   38.75   3.07
7986    40    23   289.88   38.75   3.11
7987    41    23   290.00   38.75   3.15
7988    42    23   290.12   38.75   3.19
7989    43    23   290.25   38.75   3.23
7990    44    23   290.38   38.75   3.27
7991    45    23   290.50   38.75   3.31
7992    46    23   290.62   38.75   3.34
7993    47    23   290.75   38.75   3.38
7994    48    23   290.88   38.75   3.41
7995    49    23   291.00   38.75   3.45
7996    50    23   291.12   38.75   3.48
7997    51    23   291.25   38.75   3.52
7998    52    23   291.38   38.75   3.55
7999    53    23   291.50   38.75   3.59
8000    54    23   291.62   38.75   3.63
8001    55    23   291.75   38.75   3.66
8002    56    23   291.88   38.75   3.69
8003    57    23   292.00   38.75   3.73
8004    58    23   292.12   38.75   3.76
8005    59    23   292.25   38.75   3.79
8006    60    23   292.38   38.75   3.81
8007    61    23   292.50   38.75   3.84
8008    62    23   292.62   38.75   3.85
8009    63    23   292.75   38.75   3.86
8010    64    23   292.88   38.75   3.87
8011    65    23   293.00   38.75   3.88
8012    66    23   293.12   38.75   3.88
8013    67    23   293.25   38.75   3.88
8014    68    23   293.38   38.75   3.88
8015    69    23   293.50   38.75   3.88
8016    70    23   293.62   38.75   3.88
8017    71    23   293.75   38.75   3.87
8018    72    23   293.88   38.75   3.87
8019    73    23   294.00   38.75   3.87
8020    74    23   294.12   38.75   3.86
8021    75    23   294.25   38.75   3.87
8022    76    23   294.38   38.75   3.87
8023    77    23   294.50   38.75   3.87
8024    78    23   294.62   38.75   3.87
8025    79    23   294.75   38.75   3.87
8026    80    23   294.88   38.75   3.88
8027    81    23   295.00   38.75   3.88
8028    82    23   295.12   38.75   3.88
8029    83    23   295.25   38.75   3.88
8030    84    23   295.38   38.75   3.88
8031    85    23   295.50   38.75   3.89
8032    86    23   295.62   38.75   3.89
8033    87    23   295.75   38.75   3.89
8034    88    23   295.88   38.75   3.89
8035    89    23   296.00   38.75   3.89
8036    90    23   296.12   38.75   3.89
8037    91    23   296.25   38.75   3.88
8038    92    23   296.38   38.75   3.88
8039    93    23   296.50   38.75   3.88
8040    94    23   296.62   38.75   3.87
8041    95    23   296.75   38.75   3.87
8042    96    23   296.88   38.75   3.86
8043    97    23   297.00   38.75   3.85
8044    98    23   297.12   38.75   3.85
8045    99    23   297.25   38.75   3.84
8046   100    23   297.38   38.75   3.83
8047   101    23   297.50   38.75   3.82
8048   102    23   297.62   38.75   3.81
8049   103    23   297.75   38.75   3.80
8050   104    23   297.88   38.75   3.79
8051   105    23   298.00   38.75   3.78
8052   106    23   298.12   38.75   3.76
8053   107    23   298.25   38.75   3.75
8054   108    23   298.38   38.75   3.74
8055   109    23   298.50   38.75   3.73
8056   110    23   298.62   38.75   3.71
8057   111    23   298.75   38.75   3.70
8058   112    23   298.88   38.75   3.68
8059   113    23   299.00   38.75   3.66
8060   114    23   299.12   38.75   3.65
8061   115    23   299.25   38.75   3.62
8062   116    23   299.38   38.75   3.60
8063   117    23   299.50   38.75   3.58
8064   118    23   299.62   38.75   3.56
8065   119    23   299.75   38.75   3.54
8066   120    23   299.88   38.75   3.51
8067   121    23   300.00   38.75   3.49
8068   122    23   300.12   38.75   3.46
8069   123    23   300.25   38.75   3.44
8070   124    23   300.38   38.75   3.43
8071   125    23   300.50   38.75   3.41
8072   126    23   300.62   38.75   3.40
8073   127    23   300.75   38.75   3.39
8074   128    23   300.88   38.75   3.38
8075   129    23   301.00   38.75   3.37
8076   130    23   301.12   38.75   3.37
8077   131    23   301.25   38.75   3.36
8078   132    23   301.38   38.75   3.36
8079   133    23   301.50   38.75   3.36
8080   134    23   301.62   38.75   3.36
8081   135    23   301.75   38.75   3.37
8082   136    23   301.88   38.75   3.37
8083   137    23   302.00   38.75   NaN
8084     1    22   285.00   38.62   NaN
8085     2    22   285.12   38.62   0.87
8086     3    22   285.25   38.62   1.03
8087     4    22   285.38   38.62   1.17
8088     5    22   285.50   38.62   1.29
8089     6    22   285.62   38.62   1.39
8090     7    22   285.75   38.62   1.48
8091     8    22   285.88   38.62   1.56
8092     9    22   286.00   38.62   1.62
8093    10    22   286.12   38.62   1.68
8094    11    22   286.25   38.62   1.73
8095    12    22   286.38   38.62   1.78
8096    13    22   286.50   38.62   1.83
8097    14    22   286.62   38.62   1.88
8098    15    22   286.75   38.62   1.92
8099    16    22   286.88   38.62   1.98
8100    17    22   287.00   38.62   2.03
8101    18    22   287.12   38.62   2.08
8102    19    22   287.25   38.62   2.14
8103    20    22   287.38   38.62   2.19
8104    21    22   287.50   38.62   2.25
8105    22    22   287.62   38.62   2.30
8106    23    22   287.75   38.62   2.35
8107    24    22   287.88   38.62   2.40
8108    25    22   288.00   38.62   2.45
8109    26    22   288.12   38.62   2.51
8110    27    22   288.25   38.62   2.56
8111    28    22   288.38   38.62   2.61
8112    29    22   288.50   38.62   2.66
8113    30    22   288.62   38.62   2.71
8114    31    22   288.75   38.62   2.75
8115    32    22   288.88   38.62   2.80
8116    33    22   289.00   38.62   2.84
8117    34    22   289.12   38.62   2.89
8118    35    22   289.25   38.62   2.93
8119    36    22   289.38   38.62   2.98
8120    37    22   289.50   38.62   3.02
8121    38    22   289.62   38.62   3.06
8122    39    22   289.75   38.62   3.10
8123    40    22   289.88   38.62   3.14
8124    41    22   290.00   38.62   3.18
8125    42    22   290.12   38.62   3.22
8126    43    22   290.25   38.62   3.26
8127    44    22   290.38   38.62   3.29
8128    45    22   290.50   38.62   3.33
8129    46    22   290.62   38.62   3.37
8130    47    22   290.75   38.62   3.40
8131    48    22   290.88   38.62   3.43
8132    49    22   291.00   38.62   3.47
8133    50    22   291.12   38.62   3.50
8134    51    22   291.25   38.62   3.54
8135    52    22   291.38   38.62   3.57
8136    53    22   291.50   38.62   3.61
8137    54    22   291.62   38.62   3.64
8138    55    22   291.75   38.62   3.68
8139    56    22   291.88   38.62   3.71
8140    57    22   292.00   38.62   3.74
8141    58    22   292.12   38.62   3.77
8142    59    22   292.25   38.62   3.80
8143    60    22   292.38   38.62   3.83
8144    61    22   292.50   38.62   3.85
8145    62    22   292.62   38.62   3.86
8146    63    22   292.75   38.62   3.88
8147    64    22   292.88   38.62   3.88
8148    65    22   293.00   38.62   3.89
8149    66    22   293.12   38.62   3.89
8150    67    22   293.25   38.62   3.90
8151    68    22   293.38   38.62   3.89
8152    69    22   293.50   38.62   3.89
8153    70    22   293.62   38.62   3.89
8154    71    22   293.75   38.62   3.89
8155    72    22   293.88   38.62   3.89
8156    73    22   294.00   38.62   3.88
8157    74    22   294.12   38.62   3.88
8158    75    22   294.25   38.62   3.89
8159    76    22   294.38   38.62   3.89
8160    77    22   294.50   38.62   3.89
8161    78    22   294.62   38.62   3.89
8162    79    22   294.75   38.62   3.90
8163    80    22   294.88   38.62   3.90
8164    81    22   295.00   38.62   3.90
8165    82    22   295.12   38.62   3.90
8166    83    22   295.25   38.62   3.91
8167    84    22   295.38   38.62   3.91
8168    85    22   295.50   38.62   3.91
8169    86    22   295.62   38.62   3.91
8170    87    22   295.75   38.62   3.91
8171    88    22   295.88   38.62   3.91
8172    89    22   296.00   38.62   3.91
8173    90    22   296.12   38.62   3.91
8174    91    22   296.25   38.62   3.91
8175    92    22   296.38   38.62   3.91
8176    93    22   296.50   38.62   3.91
8177    94    22   296.62   38.62   3.90
8178    95    22   296.75   38.62   3.90
8179    96    22   296.88   38.62   3.89
8180    97    22   297.00   38.62   3.89
8181    98    22   297.12   38.62   3.88
8182    99    22   297.25   38.62   3.87
8183   100    22   297.38   38.62   3.86
8184   101    22   297.50   38.62   3.86
8185   102    22   297.62   38.62   3.85
8186   103    22   297.75   38.62   3.84
8187   104    22   297.88   38.62   3.83
8188   105    22   298.00   38.62   3.82
8189   106    22   298.12   38.62   3.81
8190   107    22   298.25   38.62   3.80
8191   108    22   298.38   38.62   3.78
8192   109    22   298.50   38.62   3.77
8193   110    22   298.62   38.62   3.75
8194   111    22   298.75   38.62   3.74
8195   112    22   298.88   38.62   3.72
8196   113    22   299.00   38.62   3.70
8197   114    22   299.12   38.62   3.68
8198   115    22   299.25   38.62   3.66
8199   116    22   299.38   38.62   3.64
8200   117    22   299.50   38.62   3.61
8201   118    22   299.62   38.62   3.59
8202   119    22   299.75   38.62   3.56
8203   120    22   299.88   38.62   3.53
8204   121    22   300.00   38.62   3.51
8205   122    22   300.12   38.62   3.48
8206   123    22   300.25   38.62   3.46
8207   124    22   300.38   38.62   3.44
8208   125    22   300.50   38.62   3.43
8209   126    22   300.62   38.62   3.41
8210   127    22   300.75   38.62   3.40
8211   128    22   300.88   38.62   3.39
8212   129    22   301.00   38.62   3.38
8213   130    22   301.12   38.62   3.37
8214   131    22   301.25   38.62   3.37
8215   132    22   301.38   38.62   3.36
8216   133    22   301.50   38.62   3.36
8217   134    22   301.62   38.62   3.37
8218   135    22   301.75   38.62   3.37
8219   136    22   301.88   38.62   3.37
8220   137    22   302.00   38.62   NaN
8221     1    21   285.00   38.50   NaN
8222     2    21   285.12   38.50   0.96
8223     3    21   285.25   38.50   1.12
8224     4    21   285.38   38.50   1.25
8225     5    21   285.50   38.50   1.36
8226     6    21   285.62   38.50   1.45
8227     7    21   285.75   38.50   1.53
8228     8    21   285.88   38.50   1.60
8229     9    21   286.00   38.50   1.66
8230    10    21   286.12   38.50   1.71
8231    11    21   286.25   38.50   1.76
8232    12    21   286.38   38.50   1.81
8233    13    21   286.50   38.50   1.85
8234    14    21   286.62   38.50   1.90
8235    15    21   286.75   38.50   1.95
8236    16    21   286.88   38.50   2.00
8237    17    21   287.00   38.50   2.05
8238    18    21   287.12   38.50   2.11
8239    19    21   287.25   38.50   2.16
8240    20    21   287.38   38.50   2.22
8241    21    21   287.50   38.50   2.28
8242    22    21   287.62   38.50   2.33
8243    23    21   287.75   38.50   2.38
8244    24    21   287.88   38.50   2.43
8245    25    21   288.00   38.50   2.48
8246    26    21   288.12   38.50   2.53
8247    27    21   288.25   38.50   2.58
8248    28    21   288.38   38.50   2.63
8249    29    21   288.50   38.50   2.68
8250    30    21   288.62   38.50   2.73
8251    31    21   288.75   38.50   2.78
8252    32    21   288.88   38.50   2.82
8253    33    21   289.00   38.50   2.87
8254    34    21   289.12   38.50   2.91
8255    35    21   289.25   38.50   2.96
8256    36    21   289.38   38.50   3.00
8257    37    21   289.50   38.50   3.04
8258    38    21   289.62   38.50   3.08
8259    39    21   289.75   38.50   3.13
8260    40    21   289.88   38.50   3.16
8261    41    21   290.00   38.50   3.20
8262    42    21   290.12   38.50   3.24
8263    43    21   290.25   38.50   3.28
8264    44    21   290.38   38.50   3.32
8265    45    21   290.50   38.50   3.36
8266    46    21   290.62   38.50   3.39
8267    47    21   290.75   38.50   3.42
8268    48    21   290.88   38.50   3.46
8269    49    21   291.00   38.50   3.49
8270    50    21   291.12   38.50   3.52
8271    51    21   291.25   38.50   3.56
8272    52    21   291.38   38.50   3.59
8273    53    21   291.50   38.50   3.63
8274    54    21   291.62   38.50   3.66
8275    55    21   291.75   38.50   3.70
8276    56    21   291.88   38.50   3.73
8277    57    21   292.00   38.50   3.76
8278    58    21   292.12   38.50   3.79
8279    59    21   292.25   38.50   3.81
8280    60    21   292.38   38.50   3.84
8281    61    21   292.50   38.50   3.86
8282    62    21   292.62   38.50   3.88
8283    63    21   292.75   38.50   3.89
8284    64    21   292.88   38.50   3.89
8285    65    21   293.00   38.50   3.90
8286    66    21   293.12   38.50   3.90
8287    67    21   293.25   38.50   3.90
8288    68    21   293.38   38.50   3.90
8289    69    21   293.50   38.50   3.90
8290    70    21   293.62   38.50   3.90
8291    71    21   293.75   38.50   3.90
8292    72    21   293.88   38.50   3.90
8293    73    21   294.00   38.50   3.90
8294    74    21   294.12   38.50   3.90
8295    75    21   294.25   38.50   3.90
8296    76    21   294.38   38.50   3.91
8297    77    21   294.50   38.50   3.91
8298    78    21   294.62   38.50   3.91
8299    79    21   294.75   38.50   3.92
8300    80    21   294.88   38.50   3.92
8301    81    21   295.00   38.50   3.93
8302    82    21   295.12   38.50   3.93
8303    83    21   295.25   38.50   3.93
8304    84    21   295.38   38.50   3.93
8305    85    21   295.50   38.50   3.93
8306    86    21   295.62   38.50   3.93
8307    87    21   295.75   38.50   3.94
8308    88    21   295.88   38.50   3.94
8309    89    21   296.00   38.50   3.94
8310    90    21   296.12   38.50   3.94
8311    91    21   296.25   38.50   3.94
8312    92    21   296.38   38.50   3.94
8313    93    21   296.50   38.50   3.94
8314    94    21   296.62   38.50   3.94
8315    95    21   296.75   38.50   3.93
8316    96    21   296.88   38.50   3.93
8317    97    21   297.00   38.50   3.92
8318    98    21   297.12   38.50   3.91
8319    99    21   297.25   38.50   3.91
8320   100    21   297.38   38.50   3.90
8321   101    21   297.50   38.50   3.90
8322   102    21   297.62   38.50   3.89
8323   103    21   297.75   38.50   3.88
8324   104    21   297.88   38.50   3.87
8325   105    21   298.00   38.50   3.87
8326   106    21   298.12   38.50   3.85
8327   107    21   298.25   38.50   3.84
8328   108    21   298.38   38.50   3.83
8329   109    21   298.50   38.50   3.81
8330   110    21   298.62   38.50   3.80
8331   111    21   298.75   38.50   3.78
8332   112    21   298.88   38.50   3.76
8333   113    21   299.00   38.50   3.74
8334   114    21   299.12   38.50   3.72
8335   115    21   299.25   38.50   3.69
8336   116    21   299.38   38.50   3.67
8337   117    21   299.50   38.50   3.64
8338   118    21   299.62   38.50   3.61
8339   119    21   299.75   38.50   3.58
8340   120    21   299.88   38.50   3.56
8341   121    21   300.00   38.50   3.53
8342   122    21   300.12   38.50   3.50
8343   123    21   300.25   38.50   3.48
8344   124    21   300.38   38.50   3.46
8345   125    21   300.50   38.50   3.44
8346   126    21   300.62   38.50   3.43
8347   127    21   300.75   38.50   3.41
8348   128    21   300.88   38.50   3.40
8349   129    21   301.00   38.50   3.39
8350   130    21   301.12   38.50   3.38
8351   131    21   301.25   38.50   3.37
8352   132    21   301.38   38.50   3.36
8353   133    21   301.50   38.50   3.36
8354   134    21   301.62   38.50   3.36
8355   135    21   301.75   38.50   3.37
8356   136    21   301.88   38.50   3.37
8357   137    21   302.00   38.50   NaN
8358     1    20   285.00   38.38   NaN
8359     2    20   285.12   38.38   1.03
8360     3    20   285.25   38.38   1.19
8361     4    20   285.38   38.38   1.31
8362     5    20   285.50   38.38   1.40
8363     6    20   285.62   38.38   1.49
8364     7    20   285.75   38.38   1.57
8365     8    20   285.88   38.38   1.63
8366     9    20   286.00   38.38   1.69
8367    10    20   286.12   38.38   1.74
8368    11    20   286.25   38.38   1.78
8369    12    20   286.38   38.38   1.83
8370    13    20   286.50   38.38   1.88
8371    14    20   286.62   38.38   1.92
8372    15    20   286.75   38.38   1.97
8373    16    20   286.88   38.38   2.02
8374    17    20   287.00   38.38   2.08
8375    18    20   287.12   38.38   2.13
8376    19    20   287.25   38.38   2.19
8377    20    20   287.38   38.38   2.25
8378    21    20   287.50   38.38   2.31
8379    22    20   287.62   38.38   2.36
8380    23    20   287.75   38.38   2.41
8381    24    20   287.88   38.38   2.45
8382    25    20   288.00   38.38   2.50
8383    26    20   288.12   38.38   2.55
8384    27    20   288.25   38.38   2.60
8385    28    20   288.38   38.38   2.65
8386    29    20   288.50   38.38   2.70
8387    30    20   288.62   38.38   2.75
8388    31    20   288.75   38.38   2.80
8389    32    20   288.88   38.38   2.84
8390    33    20   289.00   38.38   2.89
8391    34    20   289.12   38.38   2.93
8392    35    20   289.25   38.38   2.97
8393    36    20   289.38   38.38   3.02
8394    37    20   289.50   38.38   3.06
8395    38    20   289.62   38.38   3.10
8396    39    20   289.75   38.38   3.15
8397    40    20   289.88   38.38   3.19
8398    41    20   290.00   38.38   3.23
8399    42    20   290.12   38.38   3.27
8400    43    20   290.25   38.38   3.31
8401    44    20   290.38   38.38   3.34
8402    45    20   290.50   38.38   3.38
8403    46    20   290.62   38.38   3.41
8404    47    20   290.75   38.38   3.44
8405    48    20   290.88   38.38   3.48
8406    49    20   291.00   38.38   3.51
8407    50    20   291.12   38.38   3.54
8408    51    20   291.25   38.38   3.57
8409    52    20   291.38   38.38   3.61
8410    53    20   291.50   38.38   3.64
8411    54    20   291.62   38.38   3.68
8412    55    20   291.75   38.38   3.71
8413    56    20   291.88   38.38   3.74
8414    57    20   292.00   38.38   3.77
8415    58    20   292.12   38.38   3.80
8416    59    20   292.25   38.38   3.83
8417    60    20   292.38   38.38   3.85
8418    61    20   292.50   38.38   3.87
8419    62    20   292.62   38.38   3.89
8420    63    20   292.75   38.38   3.89
8421    64    20   292.88   38.38   3.90
8422    65    20   293.00   38.38   3.90
8423    66    20   293.12   38.38   3.91
8424    67    20   293.25   38.38   3.91
8425    68    20   293.38   38.38   3.91
8426    69    20   293.50   38.38   3.91
8427    70    20   293.62   38.38   3.91
8428    71    20   293.75   38.38   3.91
8429    72    20   293.88   38.38   3.91
8430    73    20   294.00   38.38   3.92
8431    74    20   294.12   38.38   3.92
8432    75    20   294.25   38.38   3.92
8433    76    20   294.38   38.38   3.93
8434    77    20   294.50   38.38   3.93
8435    78    20   294.62   38.38   3.93
8436    79    20   294.75   38.38   3.94
8437    80    20   294.88   38.38   3.94
8438    81    20   295.00   38.38   3.95
8439    82    20   295.12   38.38   3.95
8440    83    20   295.25   38.38   3.95
8441    84    20   295.38   38.38   3.95
8442    85    20   295.50   38.38   3.96
8443    86    20   295.62   38.38   3.96
8444    87    20   295.75   38.38   3.96
8445    88    20   295.88   38.38   3.96
8446    89    20   296.00   38.38   3.97
8447    90    20   296.12   38.38   3.97
8448    91    20   296.25   38.38   3.97
8449    92    20   296.38   38.38   3.97
8450    93    20   296.50   38.38   3.97
8451    94    20   296.62   38.38   3.97
8452    95    20   296.75   38.38   3.97
8453    96    20   296.88   38.38   3.96
8454    97    20   297.00   38.38   3.96
8455    98    20   297.12   38.38   3.95
8456    99    20   297.25   38.38   3.95
8457   100    20   297.38   38.38   3.94
8458   101    20   297.50   38.38   3.94
8459   102    20   297.62   38.38   3.93
8460   103    20   297.75   38.38   3.93
8461   104    20   297.88   38.38   3.92
8462   105    20   298.00   38.38   3.91
8463   106    20   298.12   38.38   3.90
8464   107    20   298.25   38.38   3.89
8465   108    20   298.38   38.38   3.88
8466   109    20   298.50   38.38   3.86
8467   110    20   298.62   38.38   3.84
8468   111    20   298.75   38.38   3.82
8469   112    20   298.88   38.38   3.80
8470   113    20   299.00   38.38   3.78
8471   114    20   299.12   38.38   3.75
8472   115    20   299.25   38.38   3.73
8473   116    20   299.38   38.38   3.70
8474   117    20   299.50   38.38   3.67
8475   118    20   299.62   38.38   3.64
8476   119    20   299.75   38.38   3.61
8477   120    20   299.88   38.38   3.58
8478   121    20   300.00   38.38   3.55
8479   122    20   300.12   38.38   3.53
8480   123    20   300.25   38.38   3.50
8481   124    20   300.38   38.38   3.48
8482   125    20   300.50   38.38   3.46
8483   126    20   300.62   38.38   3.44
8484   127    20   300.75   38.38   3.42
8485   128    20   300.88   38.38   3.40
8486   129    20   301.00   38.38   3.39
8487   130    20   301.12   38.38   3.38
8488   131    20   301.25   38.38   3.37
8489   132    20   301.38   38.38   3.36
8490   133    20   301.50   38.38   3.36
8491   134    20   301.62   38.38   3.36
8492   135    20   301.75   38.38   3.37
8493   136    20   301.88   38.38   3.38
8494   137    20   302.00   38.38   NaN
8495     1    19   285.00   38.25   NaN
8496     2    19   285.12   38.25   1.10
8497     3    19   285.25   38.25   1.24
8498     4    19   285.38   38.25   1.35
8499     5    19   285.50   38.25   1.44
8500     6    19   285.62   38.25   1.52
8501     7    19   285.75   38.25   1.60
8502     8    19   285.88   38.25   1.66
8503     9    19   286.00   38.25   1.71
8504    10    19   286.12   38.25   1.76
8505    11    19   286.25   38.25   1.81
8506    12    19   286.38   38.25   1.85
8507    13    19   286.50   38.25   1.90
8508    14    19   286.62   38.25   1.94
8509    15    19   286.75   38.25   1.99
8510    16    19   286.88   38.25   2.05
8511    17    19   287.00   38.25   2.10
8512    18    19   287.12   38.25   2.16
8513    19    19   287.25   38.25   2.22
8514    20    19   287.38   38.25   2.28
8515    21    19   287.50   38.25   2.34
8516    22    19   287.62   38.25   2.39
8517    23    19   287.75   38.25   2.43
8518    24    19   287.88   38.25   2.48
8519    25    19   288.00   38.25   2.53
8520    26    19   288.12   38.25   2.58
8521    27    19   288.25   38.25   2.62
8522    28    19   288.38   38.25   2.67
8523    29    19   288.50   38.25   2.72
8524    30    19   288.62   38.25   2.77
8525    31    19   288.75   38.25   2.81
8526    32    19   288.88   38.25   2.86
8527    33    19   289.00   38.25   2.90
8528    34    19   289.12   38.25   2.94
8529    35    19   289.25   38.25   2.99
8530    36    19   289.38   38.25   3.03
8531    37    19   289.50   38.25   3.08
8532    38    19   289.62   38.25   3.12
8533    39    19   289.75   38.25   3.17
8534    40    19   289.88   38.25   3.21
8535    41    19   290.00   38.25   3.25
8536    42    19   290.12   38.25   3.29
8537    43    19   290.25   38.25   3.33
8538    44    19   290.38   38.25   3.36
8539    45    19   290.50   38.25   3.40
8540    46    19   290.62   38.25   3.43
8541    47    19   290.75   38.25   3.46
8542    48    19   290.88   38.25   3.50
8543    49    19   291.00   38.25   3.53
8544    50    19   291.12   38.25   3.56
8545    51    19   291.25   38.25   3.59
8546    52    19   291.38   38.25   3.63
8547    53    19   291.50   38.25   3.66
8548    54    19   291.62   38.25   3.69
8549    55    19   291.75   38.25   3.73
8550    56    19   291.88   38.25   3.76
8551    57    19   292.00   38.25   3.78
8552    58    19   292.12   38.25   3.81
8553    59    19   292.25   38.25   3.83
8554    60    19   292.38   38.25   3.86
8555    61    19   292.50   38.25   3.88
8556    62    19   292.62   38.25   3.89
8557    63    19   292.75   38.25   3.90
8558    64    19   292.88   38.25   3.91
8559    65    19   293.00   38.25   3.91
8560    66    19   293.12   38.25   3.91
8561    67    19   293.25   38.25   3.91
8562    68    19   293.38   38.25   3.92
8563    69    19   293.50   38.25   3.92
8564    70    19   293.62   38.25   3.92
8565    71    19   293.75   38.25   3.92
8566    72    19   293.88   38.25   3.93
8567    73    19   294.00   38.25   3.93
8568    74    19   294.12   38.25   3.93
8569    75    19   294.25   38.25   3.94
8570    76    19   294.38   38.25   3.94
8571    77    19   294.50   38.25   3.95
8572    78    19   294.62   38.25   3.95
8573    79    19   294.75   38.25   3.96
8574    80    19   294.88   38.25   3.97
8575    81    19   295.00   38.25   3.97
8576    82    19   295.12   38.25   3.97
8577    83    19   295.25   38.25   3.98
8578    84    19   295.38   38.25   3.98
8579    85    19   295.50   38.25   3.98
8580    86    19   295.62   38.25   3.98
8581    87    19   295.75   38.25   3.99
8582    88    19   295.88   38.25   3.99
8583    89    19   296.00   38.25   4.00
8584    90    19   296.12   38.25   4.00
8585    91    19   296.25   38.25   4.00
8586    92    19   296.38   38.25   4.00
8587    93    19   296.50   38.25   4.00
8588    94    19   296.62   38.25   4.00
8589    95    19   296.75   38.25   4.00
8590    96    19   296.88   38.25   4.00
8591    97    19   297.00   38.25   4.00
8592    98    19   297.12   38.25   3.99
8593    99    19   297.25   38.25   3.99
8594   100    19   297.38   38.25   3.98
8595   101    19   297.50   38.25   3.98
8596   102    19   297.62   38.25   3.97
8597   103    19   297.75   38.25   3.97
8598   104    19   297.88   38.25   3.96
8599   105    19   298.00   38.25   3.96
8600   106    19   298.12   38.25   3.95
8601   107    19   298.25   38.25   3.94
8602   108    19   298.38   38.25   3.92
8603   109    19   298.50   38.25   3.91
8604   110    19   298.62   38.25   3.89
8605   111    19   298.75   38.25   3.87
8606   112    19   298.88   38.25   3.84
8607   113    19   299.00   38.25   3.82
8608   114    19   299.12   38.25   3.79
8609   115    19   299.25   38.25   3.76
8610   116    19   299.38   38.25   3.73
8611   117    19   299.50   38.25   3.70
8612   118    19   299.62   38.25   3.67
8613   119    19   299.75   38.25   3.64
8614   120    19   299.88   38.25   3.61
8615   121    19   300.00   38.25   3.58
8616   122    19   300.12   38.25   3.55
8617   123    19   300.25   38.25   3.52
8618   124    19   300.38   38.25   3.49
8619   125    19   300.50   38.25   3.47
8620   126    19   300.62   38.25   3.45
8621   127    19   300.75   38.25   3.43
8622   128    19   300.88   38.25   3.41
8623   129    19   301.00   38.25   3.39
8624   130    19   301.12   38.25   3.38
8625   131    19   301.25   38.25   3.37
8626   132    19   301.38   38.25   3.36
8627   133    19   301.50   38.25   3.36
8628   134    19   301.62   38.25   3.36
8629   135    19   301.75   38.25   3.37
8630   136    19   301.88   38.25   3.38
8631   137    19   302.00   38.25   NaN
8632     1    18   285.00   38.12   NaN
8633     2    18   285.12   38.12   1.15
8634     3    18   285.25   38.12   1.27
8635     4    18   285.38   38.12   1.38
8636     5    18   285.50   38.12   1.46
8637     6    18   285.62   38.12   1.54
8638     7    18   285.75   38.12   1.62
8639     8    18   285.88   38.12   1.68
8640     9    18   286.00   38.12   1.73
8641    10    18   286.12   38.12   1.78
8642    11    18   286.25   38.12   1.82
8643    12    18   286.38   38.12   1.87
8644    13    18   286.50   38.12   1.92
8645    14    18   286.62   38.12   1.96
8646    15    18   286.75   38.12   2.01
8647    16    18   286.88   38.12   2.07
8648    17    18   287.00   38.12   2.12
8649    18    18   287.12   38.12   2.18
8650    19    18   287.25   38.12   2.24
8651    20    18   287.38   38.12   2.30
8652    21    18   287.50   38.12   2.36
8653    22    18   287.62   38.12   2.41
8654    23    18   287.75   38.12   2.45
8655    24    18   287.88   38.12   2.50
8656    25    18   288.00   38.12   2.55
8657    26    18   288.12   38.12   2.60
8658    27    18   288.25   38.12   2.64
8659    28    18   288.38   38.12   2.69
8660    29    18   288.50   38.12   2.74
8661    30    18   288.62   38.12   2.79
8662    31    18   288.75   38.12   2.83
8663    32    18   288.88   38.12   2.88
8664    33    18   289.00   38.12   2.92
8665    34    18   289.12   38.12   2.96
8666    35    18   289.25   38.12   3.01
8667    36    18   289.38   38.12   3.05
8668    37    18   289.50   38.12   3.09
8669    38    18   289.62   38.12   3.14
8670    39    18   289.75   38.12   3.19
8671    40    18   289.88   38.12   3.23
8672    41    18   290.00   38.12   3.27
8673    42    18   290.12   38.12   3.31
8674    43    18   290.25   38.12   3.35
8675    44    18   290.38   38.12   3.38
8676    45    18   290.50   38.12   3.41
8677    46    18   290.62   38.12   3.45
8678    47    18   290.75   38.12   3.48
8679    48    18   290.88   38.12   3.51
8680    49    18   291.00   38.12   3.54
8681    50    18   291.12   38.12   3.57
8682    51    18   291.25   38.12   3.61
8683    52    18   291.38   38.12   3.64
8684    53    18   291.50   38.12   3.67
8685    54    18   291.62   38.12   3.71
8686    55    18   291.75   38.12   3.74
8687    56    18   291.88   38.12   3.77
8688    57    18   292.00   38.12   3.79
8689    58    18   292.12   38.12   3.82
8690    59    18   292.25   38.12   3.84
8691    60    18   292.38   38.12   3.87
8692    61    18   292.50   38.12   3.89
8693    62    18   292.62   38.12   3.90
8694    63    18   292.75   38.12   3.91
8695    64    18   292.88   38.12   3.92
8696    65    18   293.00   38.12   3.92
8697    66    18   293.12   38.12   3.92
8698    67    18   293.25   38.12   3.92
8699    68    18   293.38   38.12   3.93
8700    69    18   293.50   38.12   3.93
8701    70    18   293.62   38.12   3.93
8702    71    18   293.75   38.12   3.94
8703    72    18   293.88   38.12   3.94
8704    73    18   294.00   38.12   3.95
8705    74    18   294.12   38.12   3.95
8706    75    18   294.25   38.12   3.96
8707    76    18   294.38   38.12   3.97
8708    77    18   294.50   38.12   3.97
8709    78    18   294.62   38.12   3.98
8710    79    18   294.75   38.12   3.98
8711    80    18   294.88   38.12   3.99
8712    81    18   295.00   38.12   3.99
8713    82    18   295.12   38.12   4.00
8714    83    18   295.25   38.12   4.00
8715    84    18   295.38   38.12   4.00
8716    85    18   295.50   38.12   4.01
8717    86    18   295.62   38.12   4.01
8718    87    18   295.75   38.12   4.01
8719    88    18   295.88   38.12   4.02
8720    89    18   296.00   38.12   4.02
8721    90    18   296.12   38.12   4.03
8722    91    18   296.25   38.12   4.03
8723    92    18   296.38   38.12   4.03
8724    93    18   296.50   38.12   4.03
8725    94    18   296.62   38.12   4.03
8726    95    18   296.75   38.12   4.04
8727    96    18   296.88   38.12   4.04
8728    97    18   297.00   38.12   4.03
8729    98    18   297.12   38.12   4.03
8730    99    18   297.25   38.12   4.03
8731   100    18   297.38   38.12   4.02
8732   101    18   297.50   38.12   4.02
8733   102    18   297.62   38.12   4.01
8734   103    18   297.75   38.12   4.01
8735   104    18   297.88   38.12   4.01
8736   105    18   298.00   38.12   4.00
8737   106    18   298.12   38.12   3.99
8738   107    18   298.25   38.12   3.98
8739   108    18   298.38   38.12   3.97
8740   109    18   298.50   38.12   3.95
8741   110    18   298.62   38.12   3.93
8742   111    18   298.75   38.12   3.91
8743   112    18   298.88   38.12   3.89
8744   113    18   299.00   38.12   3.86
8745   114    18   299.12   38.12   3.83
8746   115    18   299.25   38.12   3.80
8747   116    18   299.38   38.12   3.77
8748   117    18   299.50   38.12   3.74
8749   118    18   299.62   38.12   3.71
8750   119    18   299.75   38.12   3.67
8751   120    18   299.88   38.12   3.64
8752   121    18   300.00   38.12   3.61
8753   122    18   300.12   38.12   3.57
8754   123    18   300.25   38.12   3.54
8755   124    18   300.38   38.12   3.51
8756   125    18   300.50   38.12   3.48
8757   126    18   300.62   38.12   3.45
8758   127    18   300.75   38.12   3.43
8759   128    18   300.88   38.12   3.41
8760   129    18   301.00   38.12   3.39
8761   130    18   301.12   38.12   3.38
8762   131    18   301.25   38.12   3.37
8763   132    18   301.38   38.12   3.36
8764   133    18   301.50   38.12   3.36
8765   134    18   301.62   38.12   3.36
8766   135    18   301.75   38.12   3.37
8767   136    18   301.88   38.12   3.38
8768   137    18   302.00   38.12   NaN
8769     1    17   285.00   38.00   NaN
8770     2    17   285.12   38.00   1.19
8771     3    17   285.25   38.00   1.30
8772     4    17   285.38   38.00   1.39
8773     5    17   285.50   38.00   1.47
8774     6    17   285.62   38.00   1.56
8775     7    17   285.75   38.00   1.63
8776     8    17   285.88   38.00   1.69
8777     9    17   286.00   38.00   1.74
8778    10    17   286.12   38.00   1.79
8779    11    17   286.25   38.00   1.84
8780    12    17   286.38   38.00   1.88
8781    13    17   286.50   38.00   1.93
8782    14    17   286.62   38.00   1.98
8783    15    17   286.75   38.00   2.03
8784    16    17   286.88   38.00   2.08
8785    17    17   287.00   38.00   2.14
8786    18    17   287.12   38.00   2.20
8787    19    17   287.25   38.00   2.26
8788    20    17   287.38   38.00   2.32
8789    21    17   287.50   38.00   2.37
8790    22    17   287.62   38.00   2.42
8791    23    17   287.75   38.00   2.47
8792    24    17   287.88   38.00   2.52
8793    25    17   288.00   38.00   2.56
8794    26    17   288.12   38.00   2.61
8795    27    17   288.25   38.00   2.66
8796    28    17   288.38   38.00   2.71
8797    29    17   288.50   38.00   2.76
8798    30    17   288.62   38.00   2.80
8799    31    17   288.75   38.00   2.85
8800    32    17   288.88   38.00   2.89
8801    33    17   289.00   38.00   2.94
8802    34    17   289.12   38.00   2.98
8803    35    17   289.25   38.00   3.02
8804    36    17   289.38   38.00   3.07
8805    37    17   289.50   38.00   3.11
8806    38    17   289.62   38.00   3.16
8807    39    17   289.75   38.00   3.21
8808    40    17   289.88   38.00   3.25
8809    41    17   290.00   38.00   3.29
8810    42    17   290.12   38.00   3.33
8811    43    17   290.25   38.00   3.36
8812    44    17   290.38   38.00   3.39
8813    45    17   290.50   38.00   3.43
8814    46    17   290.62   38.00   3.46
8815    47    17   290.75   38.00   3.49
8816    48    17   290.88   38.00   3.52
8817    49    17   291.00   38.00   3.55
8818    50    17   291.12   38.00   3.58
8819    51    17   291.25   38.00   3.62
8820    52    17   291.38   38.00   3.65
8821    53    17   291.50   38.00   3.68
8822    54    17   291.62   38.00   3.72
8823    55    17   291.75   38.00   3.75
8824    56    17   291.88   38.00   3.78
8825    57    17   292.00   38.00   3.80
8826    58    17   292.12   38.00   3.83
8827    59    17   292.25   38.00   3.85
8828    60    17   292.38   38.00   3.87
8829    61    17   292.50   38.00   3.90
8830    62    17   292.62   38.00   3.91
8831    63    17   292.75   38.00   3.92
8832    64    17   292.88   38.00   3.92
8833    65    17   293.00   38.00   3.92
8834    66    17   293.12   38.00   3.93
8835    67    17   293.25   38.00   3.93
8836    68    17   293.38   38.00   3.94
8837    69    17   293.50   38.00   3.94
8838    70    17   293.62   38.00   3.95
8839    71    17   293.75   38.00   3.95
8840    72    17   293.88   38.00   3.96
8841    73    17   294.00   38.00   3.97
8842    74    17   294.12   38.00   3.98
8843    75    17   294.25   38.00   3.98
8844    76    17   294.38   38.00   3.99
8845    77    17   294.50   38.00   3.99
8846    78    17   294.62   38.00   4.00
8847    79    17   294.75   38.00   4.00
8848    80    17   294.88   38.00   4.01
8849    81    17   295.00   38.00   4.01
8850    82    17   295.12   38.00   4.02
8851    83    17   295.25   38.00   4.02
8852    84    17   295.38   38.00   4.02
8853    85    17   295.50   38.00   4.03
8854    86    17   295.62   38.00   4.03
8855    87    17   295.75   38.00   4.04
8856    88    17   295.88   38.00   4.04
8857    89    17   296.00   38.00   4.05
8858    90    17   296.12   38.00   4.05
8859    91    17   296.25   38.00   4.05
8860    92    17   296.38   38.00   4.06
8861    93    17   296.50   38.00   4.06
8862    94    17   296.62   38.00   4.06
8863    95    17   296.75   38.00   4.07
8864    96    17   296.88   38.00   4.07
8865    97    17   297.00   38.00   4.07
8866    98    17   297.12   38.00   4.07
8867    99    17   297.25   38.00   4.07
8868   100    17   297.38   38.00   4.06
8869   101    17   297.50   38.00   4.06
8870   102    17   297.62   38.00   4.06
8871   103    17   297.75   38.00   4.05
8872   104    17   297.88   38.00   4.04
8873   105    17   298.00   38.00   4.04
8874   106    17   298.12   38.00   4.03
8875   107    17   298.25   38.00   4.02
8876   108    17   298.38   38.00   4.01
8877   109    17   298.50   38.00   3.99
8878   110    17   298.62   38.00   3.98
8879   111    17   298.75   38.00   3.96
8880   112    17   298.88   38.00   3.93
8881   113    17   299.00   38.00   3.90
8882   114    17   299.12   38.00   3.87
8883   115    17   299.25   38.00   3.84
8884   116    17   299.38   38.00   3.81
8885   117    17   299.50   38.00   3.78
8886   118    17   299.62   38.00   3.74
8887   119    17   299.75   38.00   3.71
8888   120    17   299.88   38.00   3.67
8889   121    17   300.00   38.00   3.64
8890   122    17   300.12   38.00   3.60
8891   123    17   300.25   38.00   3.56
8892   124    17   300.38   38.00   3.52
8893   125    17   300.50   38.00   3.49
8894   126    17   300.62   38.00   3.46
8895   127    17   300.75   38.00   3.44
8896   128    17   300.88   38.00   3.41
8897   129    17   301.00   38.00   3.40
8898   130    17   301.12   38.00   3.38
8899   131    17   301.25   38.00   3.37
8900   132    17   301.38   38.00   3.36
8901   133    17   301.50   38.00   3.36
8902   134    17   301.62   38.00   3.37
8903   135    17   301.75   38.00   3.38
8904   136    17   301.88   38.00   3.39
8905   137    17   302.00   38.00   NaN
8906     1    16   285.00   37.88   NaN
8907     2    16   285.12   37.88   1.23
8908     3    16   285.25   37.88   1.33
8909     4    16   285.38   37.88   1.41
8910     5    16   285.50   37.88   1.49
8911     6    16   285.62   37.88   1.56
8912     7    16   285.75   37.88   1.64
8913     8    16   285.88   37.88   1.69
8914     9    16   286.00   37.88   1.75
8915    10    16   286.12   37.88   1.80
8916    11    16   286.25   37.88   1.84
8917    12    16   286.38   37.88   1.89
8918    13    16   286.50   37.88   1.94
8919    14    16   286.62   37.88   1.99
8920    15    16   286.75   37.88   2.05
8921    16    16   286.88   37.88   2.10
8922    17    16   287.00   37.88   2.15
8923    18    16   287.12   37.88   2.21
8924    19    16   287.25   37.88   2.27
8925    20    16   287.38   37.88   2.33
8926    21    16   287.50   37.88   2.38
8927    22    16   287.62   37.88   2.43
8928    23    16   287.75   37.88   2.48
8929    24    16   287.88   37.88   2.53
8930    25    16   288.00   37.88   2.58
8931    26    16   288.12   37.88   2.62
8932    27    16   288.25   37.88   2.67
8933    28    16   288.38   37.88   2.72
8934    29    16   288.50   37.88   2.77
8935    30    16   288.62   37.88   2.82
8936    31    16   288.75   37.88   2.87
8937    32    16   288.88   37.88   2.91
8938    33    16   289.00   37.88   2.96
8939    34    16   289.12   37.88   3.00
8940    35    16   289.25   37.88   3.04
8941    36    16   289.38   37.88   3.09
8942    37    16   289.50   37.88   3.13
8943    38    16   289.62   37.88   3.18
8944    39    16   289.75   37.88   3.22
8945    40    16   289.88   37.88   3.26
8946    41    16   290.00   37.88   3.30
8947    42    16   290.12   37.88   3.34
8948    43    16   290.25   37.88   3.37
8949    44    16   290.38   37.88   3.40
8950    45    16   290.50   37.88   3.44
8951    46    16   290.62   37.88   3.47
8952    47    16   290.75   37.88   3.50
8953    48    16   290.88   37.88   3.53
8954    49    16   291.00   37.88   3.56
8955    50    16   291.12   37.88   3.59
8956    51    16   291.25   37.88   3.62
8957    52    16   291.38   37.88   3.66
8958    53    16   291.50   37.88   3.69
8959    54    16   291.62   37.88   3.72
8960    55    16   291.75   37.88   3.76
8961    56    16   291.88   37.88   3.78
8962    57    16   292.00   37.88   3.81
8963    58    16   292.12   37.88   3.83
8964    59    16   292.25   37.88   3.86
8965    60    16   292.38   37.88   3.88
8966    61    16   292.50   37.88   3.90
8967    62    16   292.62   37.88   3.91
8968    63    16   292.75   37.88   3.92
8969    64    16   292.88   37.88   3.93
8970    65    16   293.00   37.88   3.93
8971    66    16   293.12   37.88   3.94
8972    67    16   293.25   37.88   3.94
8973    68    16   293.38   37.88   3.95
8974    69    16   293.50   37.88   3.96
8975    70    16   293.62   37.88   3.96
8976    71    16   293.75   37.88   3.97
8977    72    16   293.88   37.88   3.98
8978    73    16   294.00   37.88   3.99
8979    74    16   294.12   37.88   4.00
8980    75    16   294.25   37.88   4.00
8981    76    16   294.38   37.88   4.01
8982    77    16   294.50   37.88   4.02
8983    78    16   294.62   37.88   4.02
8984    79    16   294.75   37.88   4.03
8985    80    16   294.88   37.88   4.03
8986    81    16   295.00   37.88   4.03
8987    82    16   295.12   37.88   4.04
8988    83    16   295.25   37.88   4.04
8989    84    16   295.38   37.88   4.05
8990    85    16   295.50   37.88   4.05
8991    86    16   295.62   37.88   4.06
8992    87    16   295.75   37.88   4.06
8993    88    16   295.88   37.88   4.07
8994    89    16   296.00   37.88   4.07
8995    90    16   296.12   37.88   4.08
8996    91    16   296.25   37.88   4.08
8997    92    16   296.38   37.88   4.09
8998    93    16   296.50   37.88   4.09
8999    94    16   296.62   37.88   4.10
9000    95    16   296.75   37.88   4.10
9001    96    16   296.88   37.88   4.10
9002    97    16   297.00   37.88   4.11
9003    98    16   297.12   37.88   4.11
9004    99    16   297.25   37.88   4.10
9005   100    16   297.38   37.88   4.10
9006   101    16   297.50   37.88   4.10
9007   102    16   297.62   37.88   4.10
9008   103    16   297.75   37.88   4.09
9009   104    16   297.88   37.88   4.08
9010   105    16   298.00   37.88   4.08
9011   106    16   298.12   37.88   4.07
9012   107    16   298.25   37.88   4.06
9013   108    16   298.38   37.88   4.05
9014   109    16   298.50   37.88   4.04
9015   110    16   298.62   37.88   4.02
9016   111    16   298.75   37.88   4.00
9017   112    16   298.88   37.88   3.97
9018   113    16   299.00   37.88   3.95
9019   114    16   299.12   37.88   3.92
9020   115    16   299.25   37.88   3.88
9021   116    16   299.38   37.88   3.85
9022   117    16   299.50   37.88   3.82
9023   118    16   299.62   37.88   3.78
9024   119    16   299.75   37.88   3.75
9025   120    16   299.88   37.88   3.71
9026   121    16   300.00   37.88   3.67
9027   122    16   300.12   37.88   3.63
9028   123    16   300.25   37.88   3.58
9029   124    16   300.38   37.88   3.54
9030   125    16   300.50   37.88   3.51
9031   126    16   300.62   37.88   3.47
9032   127    16   300.75   37.88   3.45
9033   128    16   300.88   37.88   3.42
9034   129    16   301.00   37.88   3.40
9035   130    16   301.12   37.88   3.38
9036   131    16   301.25   37.88   3.37
9037   132    16   301.38   37.88   3.37
9038   133    16   301.50   37.88   3.37
9039   134    16   301.62   37.88   3.37
9040   135    16   301.75   37.88   3.38
9041   136    16   301.88   37.88   3.40
9042   137    16   302.00   37.88   NaN
9043     1    15   285.00   37.75   NaN
9044     2    15   285.12   37.75   1.27
9045     3    15   285.25   37.75   1.36
9046     4    15   285.38   37.75   1.43
9047     5    15   285.50   37.75   1.50
9048     6    15   285.62   37.75   1.57
9049     7    15   285.75   37.75   1.64
9050     8    15   285.88   37.75   1.69
9051     9    15   286.00   37.75   1.75
9052    10    15   286.12   37.75   1.80
9053    11    15   286.25   37.75   1.85
9054    12    15   286.38   37.75   1.90
9055    13    15   286.50   37.75   1.95
9056    14    15   286.62   37.75   2.01
9057    15    15   286.75   37.75   2.06
9058    16    15   286.88   37.75   2.11
9059    17    15   287.00   37.75   2.17
9060    18    15   287.12   37.75   2.22
9061    19    15   287.25   37.75   2.28
9062    20    15   287.38   37.75   2.33
9063    21    15   287.50   37.75   2.39
9064    22    15   287.62   37.75   2.44
9065    23    15   287.75   37.75   2.49
9066    24    15   287.88   37.75   2.54
9067    25    15   288.00   37.75   2.59
9068    26    15   288.12   37.75   2.64
9069    27    15   288.25   37.75   2.69
9070    28    15   288.38   37.75   2.74
9071    29    15   288.50   37.75   2.79
9072    30    15   288.62   37.75   2.84
9073    31    15   288.75   37.75   2.88
9074    32    15   288.88   37.75   2.93
9075    33    15   289.00   37.75   2.98
9076    34    15   289.12   37.75   3.02
9077    35    15   289.25   37.75   3.06
9078    36    15   289.38   37.75   3.11
9079    37    15   289.50   37.75   3.15
9080    38    15   289.62   37.75   3.20
9081    39    15   289.75   37.75   3.24
9082    40    15   289.88   37.75   3.28
9083    41    15   290.00   37.75   3.32
9084    42    15   290.12   37.75   3.35
9085    43    15   290.25   37.75   3.38
9086    44    15   290.38   37.75   3.41
9087    45    15   290.50   37.75   3.44
9088    46    15   290.62   37.75   3.47
9089    47    15   290.75   37.75   3.50
9090    48    15   290.88   37.75   3.53
9091    49    15   291.00   37.75   3.56
9092    50    15   291.12   37.75   3.59
9093    51    15   291.25   37.75   3.63
9094    52    15   291.38   37.75   3.66
9095    53    15   291.50   37.75   3.70
9096    54    15   291.62   37.75   3.73
9097    55    15   291.75   37.75   3.76
9098    56    15   291.88   37.75   3.79
9099    57    15   292.00   37.75   3.81
9100    58    15   292.12   37.75   3.84
9101    59    15   292.25   37.75   3.86
9102    60    15   292.38   37.75   3.88
9103    61    15   292.50   37.75   3.90
9104    62    15   292.62   37.75   3.92
9105    63    15   292.75   37.75   3.93
9106    64    15   292.88   37.75   3.93
9107    65    15   293.00   37.75   3.94
9108    66    15   293.12   37.75   3.95
9109    67    15   293.25   37.75   3.96
9110    68    15   293.38   37.75   3.96
9111    69    15   293.50   37.75   3.97
9112    70    15   293.62   37.75   3.98
9113    71    15   293.75   37.75   3.99
9114    72    15   293.88   37.75   4.00
9115    73    15   294.00   37.75   4.01
9116    74    15   294.12   37.75   4.01
9117    75    15   294.25   37.75   4.02
9118    76    15   294.38   37.75   4.03
9119    77    15   294.50   37.75   4.04
9120    78    15   294.62   37.75   4.04
9121    79    15   294.75   37.75   4.04
9122    80    15   294.88   37.75   4.05
9123    81    15   295.00   37.75   4.05
9124    82    15   295.12   37.75   4.06
9125    83    15   295.25   37.75   4.06
9126    84    15   295.38   37.75   4.07
9127    85    15   295.50   37.75   4.07
9128    86    15   295.62   37.75   4.08
9129    87    15   295.75   37.75   4.08
9130    88    15   295.88   37.75   4.09
9131    89    15   296.00   37.75   4.10
9132    90    15   296.12   37.75   4.10
9133    91    15   296.25   37.75   4.11
9134    92    15   296.38   37.75   4.11
9135    93    15   296.50   37.75   4.12
9136    94    15   296.62   37.75   4.13
9137    95    15   296.75   37.75   4.13
9138    96    15   296.88   37.75   4.14
9139    97    15   297.00   37.75   4.14
9140    98    15   297.12   37.75   4.14
9141    99    15   297.25   37.75   4.14
9142   100    15   297.38   37.75   4.14
9143   101    15   297.50   37.75   4.14
9144   102    15   297.62   37.75   4.14
9145   103    15   297.75   37.75   4.13
9146   104    15   297.88   37.75   4.12
9147   105    15   298.00   37.75   4.11
9148   106    15   298.12   37.75   4.11
9149   107    15   298.25   37.75   4.10
9150   108    15   298.38   37.75   4.08
9151   109    15   298.50   37.75   4.07
9152   110    15   298.62   37.75   4.06
9153   111    15   298.75   37.75   4.04
9154   112    15   298.88   37.75   4.01
9155   113    15   299.00   37.75   3.99
9156   114    15   299.12   37.75   3.96
9157   115    15   299.25   37.75   3.93
9158   116    15   299.38   37.75   3.89
9159   117    15   299.50   37.75   3.86
9160   118    15   299.62   37.75   3.82
9161   119    15   299.75   37.75   3.78
9162   120    15   299.88   37.75   3.74
9163   121    15   300.00   37.75   3.70
9164   122    15   300.12   37.75   3.66
9165   123    15   300.25   37.75   3.61
9166   124    15   300.38   37.75   3.57
9167   125    15   300.50   37.75   3.53
9168   126    15   300.62   37.75   3.49
9169   127    15   300.75   37.75   3.46
9170   128    15   300.88   37.75   3.43
9171   129    15   301.00   37.75   3.41
9172   130    15   301.12   37.75   3.39
9173   131    15   301.25   37.75   3.38
9174   132    15   301.38   37.75   3.38
9175   133    15   301.50   37.75   3.38
9176   134    15   301.62   37.75   3.39
9177   135    15   301.75   37.75   3.40
9178   136    15   301.88   37.75   3.41
9179   137    15   302.00   37.75   NaN
9180     1    14   285.00   37.62   NaN
9181     2    14   285.12   37.62   1.31
9182     3    14   285.25   37.62   1.39
9183     4    14   285.38   37.62   1.45
9184     5    14   285.50   37.62   1.51
9185     6    14   285.62   37.62   1.58
9186     7    14   285.75   37.62   1.64
9187     8    14   285.88   37.62   1.70
9188     9    14   286.00   37.62   1.75
9189    10    14   286.12   37.62   1.80
9190    11    14   286.25   37.62   1.86
9191    12    14   286.38   37.62   1.91
9192    13    14   286.50   37.62   1.96
9193    14    14   286.62   37.62   2.02
9194    15    14   286.75   37.62   2.07
9195    16    14   286.88   37.62   2.13
9196    17    14   287.00   37.62   2.18
9197    18    14   287.12   37.62   2.23
9198    19    14   287.25   37.62   2.28
9199    20    14   287.38   37.62   2.34
9200    21    14   287.50   37.62   2.40
9201    22    14   287.62   37.62   2.45
9202    23    14   287.75   37.62   2.50
9203    24    14   287.88   37.62   2.55
9204    25    14   288.00   37.62   2.60
9205    26    14   288.12   37.62   2.65
9206    27    14   288.25   37.62   2.70
9207    28    14   288.38   37.62   2.75
9208    29    14   288.50   37.62   2.80
9209    30    14   288.62   37.62   2.85
9210    31    14   288.75   37.62   2.90
9211    32    14   288.88   37.62   2.94
9212    33    14   289.00   37.62   2.99
9213    34    14   289.12   37.62   3.04
9214    35    14   289.25   37.62   3.08
9215    36    14   289.38   37.62   3.13
9216    37    14   289.50   37.62   3.17
9217    38    14   289.62   37.62   3.21
9218    39    14   289.75   37.62   3.25
9219    40    14   289.88   37.62   3.29
9220    41    14   290.00   37.62   3.33
9221    42    14   290.12   37.62   3.36
9222    43    14   290.25   37.62   3.39
9223    44    14   290.38   37.62   3.42
9224    45    14   290.50   37.62   3.45
9225    46    14   290.62   37.62   3.48
9226    47    14   290.75   37.62   3.51
9227    48    14   290.88   37.62   3.54
9228    49    14   291.00   37.62   3.57
9229    50    14   291.12   37.62   3.60
9230    51    14   291.25   37.62   3.63
9231    52    14   291.38   37.62   3.66
9232    53    14   291.50   37.62   3.70
9233    54    14   291.62   37.62   3.73
9234    55    14   291.75   37.62   3.76
9235    56    14   291.88   37.62   3.79
9236    57    14   292.00   37.62   3.81
9237    58    14   292.12   37.62   3.84
9238    59    14   292.25   37.62   3.86
9239    60    14   292.38   37.62   3.88
9240    61    14   292.50   37.62   3.90
9241    62    14   292.62   37.62   3.92
9242    63    14   292.75   37.62   3.93
9243    64    14   292.88   37.62   3.94
9244    65    14   293.00   37.62   3.95
9245    66    14   293.12   37.62   3.96
9246    67    14   293.25   37.62   3.97
9247    68    14   293.38   37.62   3.97
9248    69    14   293.50   37.62   3.98
9249    70    14   293.62   37.62   3.99
9250    71    14   293.75   37.62   4.00
9251    72    14   293.88   37.62   4.01
9252    73    14   294.00   37.62   4.02
9253    74    14   294.12   37.62   4.03
9254    75    14   294.25   37.62   4.04
9255    76    14   294.38   37.62   4.05
9256    77    14   294.50   37.62   4.05
9257    78    14   294.62   37.62   4.06
9258    79    14   294.75   37.62   4.06
9259    80    14   294.88   37.62   4.06
9260    81    14   295.00   37.62   4.07
9261    82    14   295.12   37.62   4.07
9262    83    14   295.25   37.62   4.08
9263    84    14   295.38   37.62   4.08
9264    85    14   295.50   37.62   4.09
9265    86    14   295.62   37.62   4.10
9266    87    14   295.75   37.62   4.10
9267    88    14   295.88   37.62   4.11
9268    89    14   296.00   37.62   4.12
9269    90    14   296.12   37.62   4.12
9270    91    14   296.25   37.62   4.13
9271    92    14   296.38   37.62   4.14
9272    93    14   296.50   37.62   4.15
9273    94    14   296.62   37.62   4.15
9274    95    14   296.75   37.62   4.16
9275    96    14   296.88   37.62   4.16
9276    97    14   297.00   37.62   4.17
9277    98    14   297.12   37.62   4.17
9278    99    14   297.25   37.62   4.17
9279   100    14   297.38   37.62   4.17
9280   101    14   297.50   37.62   4.17
9281   102    14   297.62   37.62   4.17
9282   103    14   297.75   37.62   4.17
9283   104    14   297.88   37.62   4.16
9284   105    14   298.00   37.62   4.15
9285   106    14   298.12   37.62   4.14
9286   107    14   298.25   37.62   4.14
9287   108    14   298.38   37.62   4.12
9288   109    14   298.50   37.62   4.11
9289   110    14   298.62   37.62   4.09
9290   111    14   298.75   37.62   4.07
9291   112    14   298.88   37.62   4.05
9292   113    14   299.00   37.62   4.03
9293   114    14   299.12   37.62   4.00
9294   115    14   299.25   37.62   3.97
9295   116    14   299.38   37.62   3.94
9296   117    14   299.50   37.62   3.90
9297   118    14   299.62   37.62   3.86
9298   119    14   299.75   37.62   3.82
9299   120    14   299.88   37.62   3.78
9300   121    14   300.00   37.62   3.74
9301   122    14   300.12   37.62   3.69
9302   123    14   300.25   37.62   3.64
9303   124    14   300.38   37.62   3.60
9304   125    14   300.50   37.62   3.55
9305   126    14   300.62   37.62   3.51
9306   127    14   300.75   37.62   3.48
9307   128    14   300.88   37.62   3.45
9308   129    14   301.00   37.62   3.42
9309   130    14   301.12   37.62   3.41
9310   131    14   301.25   37.62   3.40
9311   132    14   301.38   37.62   3.39
9312   133    14   301.50   37.62   3.40
9313   134    14   301.62   37.62   3.40
9314   135    14   301.75   37.62   3.42
9315   136    14   301.88   37.62   3.43
9316   137    14   302.00   37.62   NaN
9317     1    13   285.00   37.50   NaN
9318     2    13   285.12   37.50   1.35
9319     3    13   285.25   37.50   1.43
9320     4    13   285.38   37.50   1.48
9321     5    13   285.50   37.50   1.54
9322     6    13   285.62   37.50   1.60
9323     7    13   285.75   37.50   1.65
9324     8    13   285.88   37.50   1.70
9325     9    13   286.00   37.50   1.75
9326    10    13   286.12   37.50   1.81
9327    11    13   286.25   37.50   1.86
9328    12    13   286.38   37.50   1.92
9329    13    13   286.50   37.50   1.97
9330    14    13   286.62   37.50   2.03
9331    15    13   286.75   37.50   2.08
9332    16    13   286.88   37.50   2.14
9333    17    13   287.00   37.50   2.19
9334    18    13   287.12   37.50   2.24
9335    19    13   287.25   37.50   2.30
9336    20    13   287.38   37.50   2.35
9337    21    13   287.50   37.50   2.40
9338    22    13   287.62   37.50   2.45
9339    23    13   287.75   37.50   2.51
9340    24    13   287.88   37.50   2.56
9341    25    13   288.00   37.50   2.61
9342    26    13   288.12   37.50   2.66
9343    27    13   288.25   37.50   2.71
9344    28    13   288.38   37.50   2.76
9345    29    13   288.50   37.50   2.81
9346    30    13   288.62   37.50   2.86
9347    31    13   288.75   37.50   2.91
9348    32    13   288.88   37.50   2.96
9349    33    13   289.00   37.50   3.01
9350    34    13   289.12   37.50   3.05
9351    35    13   289.25   37.50   3.10
9352    36    13   289.38   37.50   3.14
9353    37    13   289.50   37.50   3.18
9354    38    13   289.62   37.50   3.22
9355    39    13   289.75   37.50   3.26
9356    40    13   289.88   37.50   3.30
9357    41    13   290.00   37.50   3.34
9358    42    13   290.12   37.50   3.37
9359    43    13   290.25   37.50   3.40
9360    44    13   290.38   37.50   3.43
9361    45    13   290.50   37.50   3.46
9362    46    13   290.62   37.50   3.48
9363    47    13   290.75   37.50   3.51
9364    48    13   290.88   37.50   3.54
9365    49    13   291.00   37.50   3.57
9366    50    13   291.12   37.50   3.60
9367    51    13   291.25   37.50   3.63
9368    52    13   291.38   37.50   3.66
9369    53    13   291.50   37.50   3.70
9370    54    13   291.62   37.50   3.73
9371    55    13   291.75   37.50   3.76
9372    56    13   291.88   37.50   3.79
9373    57    13   292.00   37.50   3.81
9374    58    13   292.12   37.50   3.83
9375    59    13   292.25   37.50   3.86
9376    60    13   292.38   37.50   3.88
9377    61    13   292.50   37.50   3.90
9378    62    13   292.62   37.50   3.92
9379    63    13   292.75   37.50   3.93
9380    64    13   292.88   37.50   3.94
9381    65    13   293.00   37.50   3.95
9382    66    13   293.12   37.50   3.96
9383    67    13   293.25   37.50   3.97
9384    68    13   293.38   37.50   3.98
9385    69    13   293.50   37.50   3.99
9386    70    13   293.62   37.50   4.00
9387    71    13   293.75   37.50   4.01
9388    72    13   293.88   37.50   4.02
9389    73    13   294.00   37.50   4.03
9390    74    13   294.12   37.50   4.04
9391    75    13   294.25   37.50   4.05
9392    76    13   294.38   37.50   4.06
9393    77    13   294.50   37.50   4.06
9394    78    13   294.62   37.50   4.07
9395    79    13   294.75   37.50   4.07
9396    80    13   294.88   37.50   4.08
9397    81    13   295.00   37.50   4.08
9398    82    13   295.12   37.50   4.09
9399    83    13   295.25   37.50   4.09
9400    84    13   295.38   37.50   4.10
9401    85    13   295.50   37.50   4.11
9402    86    13   295.62   37.50   4.11
9403    87    13   295.75   37.50   4.12
9404    88    13   295.88   37.50   4.13
9405    89    13   296.00   37.50   4.14
9406    90    13   296.12   37.50   4.15
9407    91    13   296.25   37.50   4.15
9408    92    13   296.38   37.50   4.16
9409    93    13   296.50   37.50   4.17
9410    94    13   296.62   37.50   4.18
9411    95    13   296.75   37.50   4.19
9412    96    13   296.88   37.50   4.19
9413    97    13   297.00   37.50   4.20
9414    98    13   297.12   37.50   4.20
9415    99    13   297.25   37.50   4.20
9416   100    13   297.38   37.50   4.20
9417   101    13   297.50   37.50   4.20
9418   102    13   297.62   37.50   4.20
9419   103    13   297.75   37.50   4.20
9420   104    13   297.88   37.50   4.20
9421   105    13   298.00   37.50   4.19
9422   106    13   298.12   37.50   4.18
9423   107    13   298.25   37.50   4.17
9424   108    13   298.38   37.50   4.16
9425   109    13   298.50   37.50   4.15
9426   110    13   298.62   37.50   4.13
9427   111    13   298.75   37.50   4.11
9428   112    13   298.88   37.50   4.09
9429   113    13   299.00   37.50   4.07
9430   114    13   299.12   37.50   4.04
9431   115    13   299.25   37.50   4.01
9432   116    13   299.38   37.50   3.98
9433   117    13   299.50   37.50   3.95
9434   118    13   299.62   37.50   3.91
9435   119    13   299.75   37.50   3.87
9436   120    13   299.88   37.50   3.82
9437   121    13   300.00   37.50   3.78
9438   122    13   300.12   37.50   3.73
9439   123    13   300.25   37.50   3.68
9440   124    13   300.38   37.50   3.63
9441   125    13   300.50   37.50   3.58
9442   126    13   300.62   37.50   3.54
9443   127    13   300.75   37.50   3.50
9444   128    13   300.88   37.50   3.47
9445   129    13   301.00   37.50   3.45
9446   130    13   301.12   37.50   3.43
9447   131    13   301.25   37.50   3.42
9448   132    13   301.38   37.50   3.42
9449   133    13   301.50   37.50   3.42
9450   134    13   301.62   37.50   3.43
9451   135    13   301.75   37.50   3.44
9452   136    13   301.88   37.50   3.46
9453   137    13   302.00   37.50   NaN
9454     1    12   285.00   37.38   NaN
9455     2    12   285.12   37.38   1.38
9456     3    12   285.25   37.38   1.46
9457     4    12   285.38   37.38   1.51
9458     5    12   285.50   37.38   1.56
9459     6    12   285.62   37.38   1.61
9460     7    12   285.75   37.38   1.66
9461     8    12   285.88   37.38   1.71
9462     9    12   286.00   37.38   1.76
9463    10    12   286.12   37.38   1.81
9464    11    12   286.25   37.38   1.87
9465    12    12   286.38   37.38   1.93
9466    13    12   286.50   37.38   1.98
9467    14    12   286.62   37.38   2.04
9468    15    12   286.75   37.38   2.10
9469    16    12   286.88   37.38   2.15
9470    17    12   287.00   37.38   2.20
9471    18    12   287.12   37.38   2.25
9472    19    12   287.25   37.38   2.31
9473    20    12   287.38   37.38   2.36
9474    21    12   287.50   37.38   2.41
9475    22    12   287.62   37.38   2.46
9476    23    12   287.75   37.38   2.51
9477    24    12   287.88   37.38   2.56
9478    25    12   288.00   37.38   2.61
9479    26    12   288.12   37.38   2.67
9480    27    12   288.25   37.38   2.72
9481    28    12   288.38   37.38   2.77
9482    29    12   288.50   37.38   2.82
9483    30    12   288.62   37.38   2.87
9484    31    12   288.75   37.38   2.92
9485    32    12   288.88   37.38   2.97
9486    33    12   289.00   37.38   3.02
9487    34    12   289.12   37.38   3.06
9488    35    12   289.25   37.38   3.10
9489    36    12   289.38   37.38   3.14
9490    37    12   289.50   37.38   3.18
9491    38    12   289.62   37.38   3.22
9492    39    12   289.75   37.38   3.26
9493    40    12   289.88   37.38   3.30
9494    41    12   290.00   37.38   3.34
9495    42    12   290.12   37.38   3.37
9496    43    12   290.25   37.38   3.40
9497    44    12   290.38   37.38   3.43
9498    45    12   290.50   37.38   3.45
9499    46    12   290.62   37.38   3.48
9500    47    12   290.75   37.38   3.51
9501    48    12   290.88   37.38   3.54
9502    49    12   291.00   37.38   3.57
9503    50    12   291.12   37.38   3.59
9504    51    12   291.25   37.38   3.63
9505    52    12   291.38   37.38   3.66
9506    53    12   291.50   37.38   3.69
9507    54    12   291.62   37.38   3.72
9508    55    12   291.75   37.38   3.75
9509    56    12   291.88   37.38   3.78
9510    57    12   292.00   37.38   3.80
9511    58    12   292.12   37.38   3.82
9512    59    12   292.25   37.38   3.84
9513    60    12   292.38   37.38   3.86
9514    61    12   292.50   37.38   3.88
9515    62    12   292.62   37.38   3.90
9516    63    12   292.75   37.38   3.92
9517    64    12   292.88   37.38   3.93
9518    65    12   293.00   37.38   3.94
9519    66    12   293.12   37.38   3.95
9520    67    12   293.25   37.38   3.96
9521    68    12   293.38   37.38   3.97
9522    69    12   293.50   37.38   3.98
9523    70    12   293.62   37.38   3.99
9524    71    12   293.75   37.38   4.00
9525    72    12   293.88   37.38   4.01
9526    73    12   294.00   37.38   4.02
9527    74    12   294.12   37.38   4.04
9528    75    12   294.25   37.38   4.05
9529    76    12   294.38   37.38   4.06
9530    77    12   294.50   37.38   4.07
9531    78    12   294.62   37.38   4.08
9532    79    12   294.75   37.38   4.08
9533    80    12   294.88   37.38   4.09
9534    81    12   295.00   37.38   4.09
9535    82    12   295.12   37.38   4.10
9536    83    12   295.25   37.38   4.10
9537    84    12   295.38   37.38   4.11
9538    85    12   295.50   37.38   4.12
9539    86    12   295.62   37.38   4.13
9540    87    12   295.75   37.38   4.14
9541    88    12   295.88   37.38   4.15
9542    89    12   296.00   37.38   4.16
9543    90    12   296.12   37.38   4.16
9544    91    12   296.25   37.38   4.17
9545    92    12   296.38   37.38   4.18
9546    93    12   296.50   37.38   4.19
9547    94    12   296.62   37.38   4.20
9548    95    12   296.75   37.38   4.21
9549    96    12   296.88   37.38   4.21
9550    97    12   297.00   37.38   4.22
9551    98    12   297.12   37.38   4.22
9552    99    12   297.25   37.38   4.22
9553   100    12   297.38   37.38   4.23
9554   101    12   297.50   37.38   4.23
9555   102    12   297.62   37.38   4.23
9556   103    12   297.75   37.38   4.23
9557   104    12   297.88   37.38   4.23
9558   105    12   298.00   37.38   4.22
9559   106    12   298.12   37.38   4.22
9560   107    12   298.25   37.38   4.21
9561   108    12   298.38   37.38   4.20
9562   109    12   298.50   37.38   4.19
9563   110    12   298.62   37.38   4.17
9564   111    12   298.75   37.38   4.15
9565   112    12   298.88   37.38   4.13
9566   113    12   299.00   37.38   4.11
9567   114    12   299.12   37.38   4.08
9568   115    12   299.25   37.38   4.06
9569   116    12   299.38   37.38   4.03
9570   117    12   299.50   37.38   3.99
9571   118    12   299.62   37.38   3.95
9572   119    12   299.75   37.38   3.91
9573   120    12   299.88   37.38   3.87
9574   121    12   300.00   37.38   3.82
9575   122    12   300.12   37.38   3.77
9576   123    12   300.25   37.38   3.72
9577   124    12   300.38   37.38   3.67
9578   125    12   300.50   37.38   3.62
9579   126    12   300.62   37.38   3.58
9580   127    12   300.75   37.38   3.54
9581   128    12   300.88   37.38   3.51
9582   129    12   301.00   37.38   3.49
9583   130    12   301.12   37.38   3.47
9584   131    12   301.25   37.38   3.46
9585   132    12   301.38   37.38   3.46
9586   133    12   301.50   37.38   3.46
9587   134    12   301.62   37.38   3.47
9588   135    12   301.75   37.38   3.48
9589   136    12   301.88   37.38   3.50
9590   137    12   302.00   37.38   NaN
9591     1    11   285.00   37.25   NaN
9592     2    11   285.12   37.25   1.41
9593     3    11   285.25   37.25   1.49
9594     4    11   285.38   37.25   1.54
9595     5    11   285.50   37.25   1.59
9596     6    11   285.62   37.25   1.63
9597     7    11   285.75   37.25   1.67
9598     8    11   285.88   37.25   1.72
9599     9    11   286.00   37.25   1.77
9600    10    11   286.12   37.25   1.83
9601    11    11   286.25   37.25   1.88
9602    12    11   286.38   37.25   1.94
9603    13    11   286.50   37.25   1.99
9604    14    11   286.62   37.25   2.05
9605    15    11   286.75   37.25   2.11
9606    16    11   286.88   37.25   2.16
9607    17    11   287.00   37.25   2.22
9608    18    11   287.12   37.25   2.27
9609    19    11   287.25   37.25   2.32
9610    20    11   287.38   37.25   2.37
9611    21    11   287.50   37.25   2.42
9612    22    11   287.62   37.25   2.47
9613    23    11   287.75   37.25   2.52
9614    24    11   287.88   37.25   2.57
9615    25    11   288.00   37.25   2.62
9616    26    11   288.12   37.25   2.67
9617    27    11   288.25   37.25   2.73
9618    28    11   288.38   37.25   2.78
9619    29    11   288.50   37.25   2.83
9620    30    11   288.62   37.25   2.88
9621    31    11   288.75   37.25   2.93
9622    32    11   288.88   37.25   2.98
9623    33    11   289.00   37.25   3.02
9624    34    11   289.12   37.25   3.06
9625    35    11   289.25   37.25   3.10
9626    36    11   289.38   37.25   3.14
9627    37    11   289.50   37.25   3.18
9628    38    11   289.62   37.25   3.22
9629    39    11   289.75   37.25   3.26
9630    40    11   289.88   37.25   3.30
9631    41    11   290.00   37.25   3.33
9632    42    11   290.12   37.25   3.36
9633    43    11   290.25   37.25   3.39
9634    44    11   290.38   37.25   3.42
9635    45    11   290.50   37.25   3.44
9636    46    11   290.62   37.25   3.47
9637    47    11   290.75   37.25   3.50
9638    48    11   290.88   37.25   3.53
9639    49    11   291.00   37.25   3.56
9640    50    11   291.12   37.25   3.58
9641    51    11   291.25   37.25   3.61
9642    52    11   291.38   37.25   3.64
9643    53    11   291.50   37.25   3.67
9644    54    11   291.62   37.25   3.70
9645    55    11   291.75   37.25   3.73
9646    56    11   291.88   37.25   3.76
9647    57    11   292.00   37.25   3.78
9648    58    11   292.12   37.25   3.80
9649    59    11   292.25   37.25   3.82
9650    60    11   292.38   37.25   3.84
9651    61    11   292.50   37.25   3.86
9652    62    11   292.62   37.25   3.88
9653    63    11   292.75   37.25   3.89
9654    64    11   292.88   37.25   3.91
9655    65    11   293.00   37.25   3.92
9656    66    11   293.12   37.25   3.93
9657    67    11   293.25   37.25   3.95
9658    68    11   293.38   37.25   3.96
9659    69    11   293.50   37.25   3.97
9660    70    11   293.62   37.25   3.98
9661    71    11   293.75   37.25   3.99
9662    72    11   293.88   37.25   4.00
9663    73    11   294.00   37.25   4.01
9664    74    11   294.12   37.25   4.03
9665    75    11   294.25   37.25   4.04
9666    76    11   294.38   37.25   4.06
9667    77    11   294.50   37.25   4.07
9668    78    11   294.62   37.25   4.08
9669    79    11   294.75   37.25   4.09
9670    80    11   294.88   37.25   4.09
9671    81    11   295.00   37.25   4.10
9672    82    11   295.12   37.25   4.11
9673    83    11   295.25   37.25   4.11
9674    84    11   295.38   37.25   4.12
9675    85    11   295.50   37.25   4.13
9676    86    11   295.62   37.25   4.14
9677    87    11   295.75   37.25   4.15
9678    88    11   295.88   37.25   4.16
9679    89    11   296.00   37.25   4.17
9680    90    11   296.12   37.25   4.18
9681    91    11   296.25   37.25   4.19
9682    92    11   296.38   37.25   4.20
9683    93    11   296.50   37.25   4.20
9684    94    11   296.62   37.25   4.21
9685    95    11   296.75   37.25   4.22
9686    96    11   296.88   37.25   4.23
9687    97    11   297.00   37.25   4.23
9688    98    11   297.12   37.25   4.24
9689    99    11   297.25   37.25   4.24
9690   100    11   297.38   37.25   4.24
9691   101    11   297.50   37.25   4.25
9692   102    11   297.62   37.25   4.25
9693   103    11   297.75   37.25   4.26
9694   104    11   297.88   37.25   4.26
9695   105    11   298.00   37.25   4.26
9696   106    11   298.12   37.25   4.25
9697   107    11   298.25   37.25   4.25
9698   108    11   298.38   37.25   4.24
9699   109    11   298.50   37.25   4.23
9700   110    11   298.62   37.25   4.21
9701   111    11   298.75   37.25   4.20
9702   112    11   298.88   37.25   4.18
9703   113    11   299.00   37.25   4.16
9704   114    11   299.12   37.25   4.13
9705   115    11   299.25   37.25   4.10
9706   116    11   299.38   37.25   4.07
9707   117    11   299.50   37.25   4.04
9708   118    11   299.62   37.25   4.00
9709   119    11   299.75   37.25   3.96
9710   120    11   299.88   37.25   3.91
9711   121    11   300.00   37.25   3.86
9712   122    11   300.12   37.25   3.82
9713   123    11   300.25   37.25   3.76
9714   124    11   300.38   37.25   3.72
9715   125    11   300.50   37.25   3.67
9716   126    11   300.62   37.25   3.63
9717   127    11   300.75   37.25   3.59
9718   128    11   300.88   37.25   3.56
9719   129    11   301.00   37.25   3.54
9720   130    11   301.12   37.25   3.52
9721   131    11   301.25   37.25   3.51
9722   132    11   301.38   37.25   3.51
9723   133    11   301.50   37.25   3.51
9724   134    11   301.62   37.25   3.52
9725   135    11   301.75   37.25   3.53
9726   136    11   301.88   37.25   3.54
9727   137    11   302.00   37.25   NaN
9728     1    10   285.00   37.12   NaN
9729     2    10   285.12   37.12   1.44
9730     3    10   285.25   37.12   1.51
9731     4    10   285.38   37.12   1.56
9732     5    10   285.50   37.12   1.61
9733     6    10   285.62   37.12   1.65
9734     7    10   285.75   37.12   1.69
9735     8    10   285.88   37.12   1.74
9736     9    10   286.00   37.12   1.79
9737    10    10   286.12   37.12   1.84
9738    11    10   286.25   37.12   1.89
9739    12    10   286.38   37.12   1.95
9740    13    10   286.50   37.12   2.01
9741    14    10   286.62   37.12   2.07
9742    15    10   286.75   37.12   2.12
9743    16    10   286.88   37.12   2.18
9744    17    10   287.00   37.12   2.23
9745    18    10   287.12   37.12   2.28
9746    19    10   287.25   37.12   2.33
9747    20    10   287.38   37.12   2.38
9748    21    10   287.50   37.12   2.43
9749    22    10   287.62   37.12   2.48
9750    23    10   287.75   37.12   2.53
9751    24    10   287.88   37.12   2.58
9752    25    10   288.00   37.12   2.63
9753    26    10   288.12   37.12   2.68
9754    27    10   288.25   37.12   2.74
9755    28    10   288.38   37.12   2.79
9756    29    10   288.50   37.12   2.84
9757    30    10   288.62   37.12   2.89
9758    31    10   288.75   37.12   2.94
9759    32    10   288.88   37.12   2.98
9760    33    10   289.00   37.12   3.02
9761    34    10   289.12   37.12   3.06
9762    35    10   289.25   37.12   3.10
9763    36    10   289.38   37.12   3.14
9764    37    10   289.50   37.12   3.18
9765    38    10   289.62   37.12   3.21
9766    39    10   289.75   37.12   3.25
9767    40    10   289.88   37.12   3.29
9768    41    10   290.00   37.12   3.32
9769    42    10   290.12   37.12   3.35
9770    43    10   290.25   37.12   3.38
9771    44    10   290.38   37.12   3.41
9772    45    10   290.50   37.12   3.43
9773    46    10   290.62   37.12   3.46
9774    47    10   290.75   37.12   3.49
9775    48    10   290.88   37.12   3.52
9776    49    10   291.00   37.12   3.55
9777    50    10   291.12   37.12   3.57
9778    51    10   291.25   37.12   3.60
9779    52    10   291.38   37.12   3.63
9780    53    10   291.50   37.12   3.66
9781    54    10   291.62   37.12   3.68
9782    55    10   291.75   37.12   3.71
9783    56    10   291.88   37.12   3.73
9784    57    10   292.00   37.12   3.76
9785    58    10   292.12   37.12   3.78
9786    59    10   292.25   37.12   3.80
9787    60    10   292.38   37.12   3.81
9788    61    10   292.50   37.12   3.83
9789    62    10   292.62   37.12   3.85
9790    63    10   292.75   37.12   3.86
9791    64    10   292.88   37.12   3.88
9792    65    10   293.00   37.12   3.89
9793    66    10   293.12   37.12   3.91
9794    67    10   293.25   37.12   3.92
9795    68    10   293.38   37.12   3.93
9796    69    10   293.50   37.12   3.94
9797    70    10   293.62   37.12   3.95
9798    71    10   293.75   37.12   3.97
9799    72    10   293.88   37.12   3.98
9800    73    10   294.00   37.12   3.99
9801    74    10   294.12   37.12   4.01
9802    75    10   294.25   37.12   4.03
9803    76    10   294.38   37.12   4.04
9804    77    10   294.50   37.12   4.06
9805    78    10   294.62   37.12   4.07
9806    79    10   294.75   37.12   4.09
9807    80    10   294.88   37.12   4.10
9808    81    10   295.00   37.12   4.10
9809    82    10   295.12   37.12   4.11
9810    83    10   295.25   37.12   4.12
9811    84    10   295.38   37.12   4.13
9812    85    10   295.50   37.12   4.14
9813    86    10   295.62   37.12   4.15
9814    87    10   295.75   37.12   4.16
9815    88    10   295.88   37.12   4.17
9816    89    10   296.00   37.12   4.18
9817    90    10   296.12   37.12   4.19
9818    91    10   296.25   37.12   4.20
9819    92    10   296.38   37.12   4.21
9820    93    10   296.50   37.12   4.22
9821    94    10   296.62   37.12   4.22
9822    95    10   296.75   37.12   4.23
9823    96    10   296.88   37.12   4.24
9824    97    10   297.00   37.12   4.24
9825    98    10   297.12   37.12   4.25
9826    99    10   297.25   37.12   4.25
9827   100    10   297.38   37.12   4.26
9828   101    10   297.50   37.12   4.27
9829   102    10   297.62   37.12   4.27
9830   103    10   297.75   37.12   4.28
9831   104    10   297.88   37.12   4.28
9832   105    10   298.00   37.12   4.28
9833   106    10   298.12   37.12   4.28
9834   107    10   298.25   37.12   4.28
9835   108    10   298.38   37.12   4.28
9836   109    10   298.50   37.12   4.27
9837   110    10   298.62   37.12   4.26
9838   111    10   298.75   37.12   4.24
9839   112    10   298.88   37.12   4.23
9840   113    10   299.00   37.12   4.21
9841   114    10   299.12   37.12   4.18
9842   115    10   299.25   37.12   4.15
9843   116    10   299.38   37.12   4.12
9844   117    10   299.50   37.12   4.08
9845   118    10   299.62   37.12   4.04
9846   119    10   299.75   37.12   4.00
9847   120    10   299.88   37.12   3.96
9848   121    10   300.00   37.12   3.91
9849   122    10   300.12   37.12   3.87
9850   123    10   300.25   37.12   3.82
9851   124    10   300.38   37.12   3.77
9852   125    10   300.50   37.12   3.72
9853   126    10   300.62   37.12   3.68
9854   127    10   300.75   37.12   3.65
9855   128    10   300.88   37.12   3.62
9856   129    10   301.00   37.12   3.60
9857   130    10   301.12   37.12   3.59
9858   131    10   301.25   37.12   3.58
9859   132    10   301.38   37.12   3.57
9860   133    10   301.50   37.12   3.57
9861   134    10   301.62   37.12   3.58
9862   135    10   301.75   37.12   3.59
9863   136    10   301.88   37.12   3.60
9864   137    10   302.00   37.12   NaN
9865     1     9   285.00   37.00   NaN
9866     2     9   285.12   37.00   1.47
9867     3     9   285.25   37.00   1.53
9868     4     9   285.38   37.00   1.58
9869     5     9   285.50   37.00   1.63
9870     6     9   285.62   37.00   1.67
9871     7     9   285.75   37.00   1.71
9872     8     9   285.88   37.00   1.76
9873     9     9   286.00   37.00   1.80
9874    10     9   286.12   37.00   1.86
9875    11     9   286.25   37.00   1.91
9876    12     9   286.38   37.00   1.97
9877    13     9   286.50   37.00   2.03
9878    14     9   286.62   37.00   2.08
9879    15     9   286.75   37.00   2.14
9880    16     9   286.88   37.00   2.19
9881    17     9   287.00   37.00   2.24
9882    18     9   287.12   37.00   2.29
9883    19     9   287.25   37.00   2.34
9884    20     9   287.38   37.00   2.39
9885    21     9   287.50   37.00   2.44
9886    22     9   287.62   37.00   2.49
9887    23     9   287.75   37.00   2.54
9888    24     9   287.88   37.00   2.59
9889    25     9   288.00   37.00   2.64
9890    26     9   288.12   37.00   2.69
9891    27     9   288.25   37.00   2.75
9892    28     9   288.38   37.00   2.80
9893    29     9   288.50   37.00   2.85
9894    30     9   288.62   37.00   2.89
9895    31     9   288.75   37.00   2.94
9896    32     9   288.88   37.00   2.98
9897    33     9   289.00   37.00   3.01
9898    34     9   289.12   37.00   3.05
9899    35     9   289.25   37.00   3.09
9900    36     9   289.38   37.00   3.13
9901    37     9   289.50   37.00   3.16
9902    38     9   289.62   37.00   3.20
9903    39     9   289.75   37.00   3.24
9904    40     9   289.88   37.00   3.27
9905    41     9   290.00   37.00   3.31
9906    42     9   290.12   37.00   3.34
9907    43     9   290.25   37.00   3.36
9908    44     9   290.38   37.00   3.39
9909    45     9   290.50   37.00   3.42
9910    46     9   290.62   37.00   3.45
9911    47     9   290.75   37.00   3.48
9912    48     9   290.88   37.00   3.51
9913    49     9   291.00   37.00   3.53
9914    50     9   291.12   37.00   3.56
9915    51     9   291.25   37.00   3.58
9916    52     9   291.38   37.00   3.61
9917    53     9   291.50   37.00   3.63
9918    54     9   291.62   37.00   3.66
9919    55     9   291.75   37.00   3.69
9920    56     9   291.88   37.00   3.71
9921    57     9   292.00   37.00   3.73
9922    58     9   292.12   37.00   3.75
9923    59     9   292.25   37.00   3.76
9924    60     9   292.38   37.00   3.78
9925    61     9   292.50   37.00   3.80
9926    62     9   292.62   37.00   3.81
9927    63     9   292.75   37.00   3.83
9928    64     9   292.88   37.00   3.84
9929    65     9   293.00   37.00   3.86
9930    66     9   293.12   37.00   3.88
9931    67     9   293.25   37.00   3.89
9932    68     9   293.38   37.00   3.90
9933    69     9   293.50   37.00   3.92
9934    70     9   293.62   37.00   3.93
9935    71     9   293.75   37.00   3.94
9936    72     9   293.88   37.00   3.96
9937    73     9   294.00   37.00   3.97
9938    74     9   294.12   37.00   3.99
9939    75     9   294.25   37.00   4.01
9940    76     9   294.38   37.00   4.02
9941    77     9   294.50   37.00   4.04
9942    78     9   294.62   37.00   4.06
9943    79     9   294.75   37.00   4.08
9944    80     9   294.88   37.00   4.09
9945    81     9   295.00   37.00   4.10
9946    82     9   295.12   37.00   4.11
9947    83     9   295.25   37.00   4.12
9948    84     9   295.38   37.00   4.13
9949    85     9   295.50   37.00   4.14
9950    86     9   295.62   37.00   4.16
9951    87     9   295.75   37.00   4.17
9952    88     9   295.88   37.00   4.18
9953    89     9   296.00   37.00   4.19
9954    90     9   296.12   37.00   4.20
9955    91     9   296.25   37.00   4.21
9956    92     9   296.38   37.00   4.21
9957    93     9   296.50   37.00   4.22
9958    94     9   296.62   37.00   4.23
9959    95     9   296.75   37.00   4.24
9960    96     9   296.88   37.00   4.24
9961    97     9   297.00   37.00   4.25
9962    98     9   297.12   37.00   4.26
9963    99     9   297.25   37.00   4.27
9964   100     9   297.38   37.00   4.27
9965   101     9   297.50   37.00   4.28
9966   102     9   297.62   37.00   4.28
9967   103     9   297.75   37.00   4.29
9968   104     9   297.88   37.00   4.30
9969   105     9   298.00   37.00   4.30
9970   106     9   298.12   37.00   4.31
9971   107     9   298.25   37.00   4.31
9972   108     9   298.38   37.00   4.31
9973   109     9   298.50   37.00   4.31
9974   110     9   298.62   37.00   4.30
9975   111     9   298.75   37.00   4.29
9976   112     9   298.88   37.00   4.28
9977   113     9   299.00   37.00   4.26
9978   114     9   299.12   37.00   4.23
9979   115     9   299.25   37.00   4.20
9980   116     9   299.38   37.00   4.17
9981   117     9   299.50   37.00   4.13
9982   118     9   299.62   37.00   4.09
9983   119     9   299.75   37.00   4.05
9984   120     9   299.88   37.00   4.01
9985   121     9   300.00   37.00   3.97
9986   122     9   300.12   37.00   3.92
9987   123     9   300.25   37.00   3.87
9988   124     9   300.38   37.00   3.82
9989   125     9   300.50   37.00   3.78
9990   126     9   300.62   37.00   3.75
9991   127     9   300.75   37.00   3.71
9992   128     9   300.88   37.00   3.69
9993   129     9   301.00   37.00   3.67
9994   130     9   301.12   37.00   3.66
9995   131     9   301.25   37.00   3.65
9996   132     9   301.38   37.00   3.64
9997   133     9   301.50   37.00   3.64
9998   134     9   301.62   37.00   3.64
9999   135     9   301.75   37.00   3.65
10000   136     9   301.88   37.00   3.65
10001   137     9   302.00   37.00   NaN
10002     1     8   285.00   36.88   NaN
10003     2     8   285.12   36.88   1.49
10004     3     8   285.25   36.88   1.56
10005     4     8   285.38   36.88   1.60
10006     5     8   285.50   36.88   1.65
10007     6     8   285.62   36.88   1.69
10008     7     8   285.75   36.88   1.73
10009     8     8   285.88   36.88   1.78
10010     9     8   286.00   36.88   1.83
10011    10     8   286.12   36.88   1.88
10012    11     8   286.25   36.88   1.93
10013    12     8   286.38   36.88   1.99
10014    13     8   286.50   36.88   2.05
10015    14     8   286.62   36.88   2.10
10016    15     8   286.75   36.88   2.16
10017    16     8   286.88   36.88   2.21
10018    17     8   287.00   36.88   2.26
10019    18     8   287.12   36.88   2.31
10020    19     8   287.25   36.88   2.35
10021    20     8   287.38   36.88   2.40
10022    21     8   287.50   36.88   2.45
10023    22     8   287.62   36.88   2.50
10024    23     8   287.75   36.88   2.55
10025    24     8   287.88   36.88   2.60
10026    25     8   288.00   36.88   2.65
10027    26     8   288.12   36.88   2.70
10028    27     8   288.25   36.88   2.75
10029    28     8   288.38   36.88   2.80
10030    29     8   288.50   36.88   2.85
10031    30     8   288.62   36.88   2.89
10032    31     8   288.75   36.88   2.93
10033    32     8   288.88   36.88   2.97
10034    33     8   289.00   36.88   3.01
10035    34     8   289.12   36.88   3.04
10036    35     8   289.25   36.88   3.08
10037    36     8   289.38   36.88   3.12
10038    37     8   289.50   36.88   3.15
10039    38     8   289.62   36.88   3.19
10040    39     8   289.75   36.88   3.22
10041    40     8   289.88   36.88   3.26
10042    41     8   290.00   36.88   3.29
10043    42     8   290.12   36.88   3.32
10044    43     8   290.25   36.88   3.35
10045    44     8   290.38   36.88   3.37
10046    45     8   290.50   36.88   3.40
10047    46     8   290.62   36.88   3.43
10048    47     8   290.75   36.88   3.46
10049    48     8   290.88   36.88   3.49
10050    49     8   291.00   36.88   3.51
10051    50     8   291.12   36.88   3.54
10052    51     8   291.25   36.88   3.56
10053    52     8   291.38   36.88   3.58
10054    53     8   291.50   36.88   3.61
10055    54     8   291.62   36.88   3.63
10056    55     8   291.75   36.88   3.66
10057    56     8   291.88   36.88   3.68
10058    57     8   292.00   36.88   3.70
10059    58     8   292.12   36.88   3.71
10060    59     8   292.25   36.88   3.73
10061    60     8   292.38   36.88   3.75
10062    61     8   292.50   36.88   3.76
10063    62     8   292.62   36.88   3.77
10064    63     8   292.75   36.88   3.79
10065    64     8   292.88   36.88   3.81
10066    65     8   293.00   36.88   3.82
10067    66     8   293.12   36.88   3.84
10068    67     8   293.25   36.88   3.86
10069    68     8   293.38   36.88   3.87
10070    69     8   293.50   36.88   3.88
10071    70     8   293.62   36.88   3.90
10072    71     8   293.75   36.88   3.91
10073    72     8   293.88   36.88   3.93
10074    73     8   294.00   36.88   3.95
10075    74     8   294.12   36.88   3.96
10076    75     8   294.25   36.88   3.98
10077    76     8   294.38   36.88   4.00
10078    77     8   294.50   36.88   4.02
10079    78     8   294.62   36.88   4.04
10080    79     8   294.75   36.88   4.06
10081    80     8   294.88   36.88   4.08
10082    81     8   295.00   36.88   4.09
10083    82     8   295.12   36.88   4.10
10084    83     8   295.25   36.88   4.12
10085    84     8   295.38   36.88   4.13
10086    85     8   295.50   36.88   4.14
10087    86     8   295.62   36.88   4.15
10088    87     8   295.75   36.88   4.17
10089    88     8   295.88   36.88   4.18
10090    89     8   296.00   36.88   4.19
10091    90     8   296.12   36.88   4.20
10092    91     8   296.25   36.88   4.21
10093    92     8   296.38   36.88   4.22
10094    93     8   296.50   36.88   4.22
10095    94     8   296.62   36.88   4.23
10096    95     8   296.75   36.88   4.24
10097    96     8   296.88   36.88   4.25
10098    97     8   297.00   36.88   4.26
10099    98     8   297.12   36.88   4.26
10100    99     8   297.25   36.88   4.27
10101   100     8   297.38   36.88   4.28
10102   101     8   297.50   36.88   4.28
10103   102     8   297.62   36.88   4.29
10104   103     8   297.75   36.88   4.30
10105   104     8   297.88   36.88   4.31
10106   105     8   298.00   36.88   4.32
10107   106     8   298.12   36.88   4.33
10108   107     8   298.25   36.88   4.34
10109   108     8   298.38   36.88   4.34
10110   109     8   298.50   36.88   4.34
10111   110     8   298.62   36.88   4.34
10112   111     8   298.75   36.88   4.33
10113   112     8   298.88   36.88   4.32
10114   113     8   299.00   36.88   4.30
10115   114     8   299.12   36.88   4.28
10116   115     8   299.25   36.88   4.25
10117   116     8   299.38   36.88   4.22
10118   117     8   299.50   36.88   4.18
10119   118     8   299.62   36.88   4.14
10120   119     8   299.75   36.88   4.10
10121   120     8   299.88   36.88   4.06
10122   121     8   300.00   36.88   4.02
10123   122     8   300.12   36.88   3.97
10124   123     8   300.25   36.88   3.93
10125   124     8   300.38   36.88   3.89
10126   125     8   300.50   36.88   3.85
10127   126     8   300.62   36.88   3.81
10128   127     8   300.75   36.88   3.78
10129   128     8   300.88   36.88   3.76
10130   129     8   301.00   36.88   3.74
10131   130     8   301.12   36.88   3.73
10132   131     8   301.25   36.88   3.72
10133   132     8   301.38   36.88   3.71
10134   133     8   301.50   36.88   3.71
10135   134     8   301.62   36.88   3.71
10136   135     8   301.75   36.88   3.70
10137   136     8   301.88   36.88   3.70
10138   137     8   302.00   36.88   NaN
10139     1     7   285.00   36.75   NaN
10140     2     7   285.12   36.75   1.51
10141     3     7   285.25   36.75   1.58
10142     4     7   285.38   36.75   1.63
10143     5     7   285.50   36.75   1.67
10144     6     7   285.62   36.75   1.71
10145     7     7   285.75   36.75   1.75
10146     8     7   285.88   36.75   1.80
10147     9     7   286.00   36.75   1.85
10148    10     7   286.12   36.75   1.90
10149    11     7   286.25   36.75   1.96
10150    12     7   286.38   36.75   2.01
10151    13     7   286.50   36.75   2.07
10152    14     7   286.62   36.75   2.12
10153    15     7   286.75   36.75   2.17
10154    16     7   286.88   36.75   2.22
10155    17     7   287.00   36.75   2.27
10156    18     7   287.12   36.75   2.32
10157    19     7   287.25   36.75   2.36
10158    20     7   287.38   36.75   2.41
10159    21     7   287.50   36.75   2.46
10160    22     7   287.62   36.75   2.51
10161    23     7   287.75   36.75   2.56
10162    24     7   287.88   36.75   2.61
10163    25     7   288.00   36.75   2.66
10164    26     7   288.12   36.75   2.71
10165    27     7   288.25   36.75   2.76
10166    28     7   288.38   36.75   2.81
10167    29     7   288.50   36.75   2.85
10168    30     7   288.62   36.75   2.89
10169    31     7   288.75   36.75   2.93
10170    32     7   288.88   36.75   2.96
10171    33     7   289.00   36.75   3.00
10172    34     7   289.12   36.75   3.03
10173    35     7   289.25   36.75   3.07
10174    36     7   289.38   36.75   3.10
10175    37     7   289.50   36.75   3.14
10176    38     7   289.62   36.75   3.17
10177    39     7   289.75   36.75   3.21
10178    40     7   289.88   36.75   3.24
10179    41     7   290.00   36.75   3.27
10180    42     7   290.12   36.75   3.30
10181    43     7   290.25   36.75   3.32
10182    44     7   290.38   36.75   3.35
10183    45     7   290.50   36.75   3.38
10184    46     7   290.62   36.75   3.41
10185    47     7   290.75   36.75   3.44
10186    48     7   290.88   36.75   3.46
10187    49     7   291.00   36.75   3.49
10188    50     7   291.12   36.75   3.51
10189    51     7   291.25   36.75   3.53
10190    52     7   291.38   36.75   3.56
10191    53     7   291.50   36.75   3.58
10192    54     7   291.62   36.75   3.60
10193    55     7   291.75   36.75   3.62
10194    56     7   291.88   36.75   3.64
10195    57     7   292.00   36.75   3.66
10196    58     7   292.12   36.75   3.68
10197    59     7   292.25   36.75   3.69
10198    60     7   292.38   36.75   3.71
10199    61     7   292.50   36.75   3.72
10200    62     7   292.62   36.75   3.73
10201    63     7   292.75   36.75   3.75
10202    64     7   292.88   36.75   3.76
10203    65     7   293.00   36.75   3.78
10204    66     7   293.12   36.75   3.80
10205    67     7   293.25   36.75   3.82
10206    68     7   293.38   36.75   3.83
10207    69     7   293.50   36.75   3.85
10208    70     7   293.62   36.75   3.87
10209    71     7   293.75   36.75   3.88
10210    72     7   293.88   36.75   3.90
10211    73     7   294.00   36.75   3.92
10212    74     7   294.12   36.75   3.94
10213    75     7   294.25   36.75   3.96
10214    76     7   294.38   36.75   3.98
10215    77     7   294.50   36.75   4.00
10216    78     7   294.62   36.75   4.02
10217    79     7   294.75   36.75   4.04
10218    80     7   294.88   36.75   4.06
10219    81     7   295.00   36.75   4.08
10220    82     7   295.12   36.75   4.09
10221    83     7   295.25   36.75   4.11
10222    84     7   295.38   36.75   4.12
10223    85     7   295.50   36.75   4.14
10224    86     7   295.62   36.75   4.15
10225    87     7   295.75   36.75   4.16
10226    88     7   295.88   36.75   4.18
10227    89     7   296.00   36.75   4.19
10228    90     7   296.12   36.75   4.20
10229    91     7   296.25   36.75   4.21
10230    92     7   296.38   36.75   4.22
10231    93     7   296.50   36.75   4.22
10232    94     7   296.62   36.75   4.23
10233    95     7   296.75   36.75   4.24
10234    96     7   296.88   36.75   4.24
10235    97     7   297.00   36.75   4.25
10236    98     7   297.12   36.75   4.26
10237    99     7   297.25   36.75   4.27
10238   100     7   297.38   36.75   4.28
10239   101     7   297.50   36.75   4.29
10240   102     7   297.62   36.75   4.30
10241   103     7   297.75   36.75   4.31
10242   104     7   297.88   36.75   4.33
10243   105     7   298.00   36.75   4.34
10244   106     7   298.12   36.75   4.35
10245   107     7   298.25   36.75   4.36
10246   108     7   298.38   36.75   4.37
10247   109     7   298.50   36.75   4.37
10248   110     7   298.62   36.75   4.37
10249   111     7   298.75   36.75   4.36
10250   112     7   298.88   36.75   4.36
10251   113     7   299.00   36.75   4.34
10252   114     7   299.12   36.75   4.32
10253   115     7   299.25   36.75   4.30
10254   116     7   299.38   36.75   4.27
10255   117     7   299.50   36.75   4.23
10256   118     7   299.62   36.75   4.19
10257   119     7   299.75   36.75   4.15
10258   120     7   299.88   36.75   4.11
10259   121     7   300.00   36.75   4.07
10260   122     7   300.12   36.75   4.03
10261   123     7   300.25   36.75   3.99
10262   124     7   300.38   36.75   3.95
10263   125     7   300.50   36.75   3.92
10264   126     7   300.62   36.75   3.88
10265   127     7   300.75   36.75   3.85
10266   128     7   300.88   36.75   3.83
10267   129     7   301.00   36.75   3.81
10268   130     7   301.12   36.75   3.80
10269   131     7   301.25   36.75   3.79
10270   132     7   301.38   36.75   3.78
10271   133     7   301.50   36.75   3.77
10272   134     7   301.62   36.75   3.77
10273   135     7   301.75   36.75   3.75
10274   136     7   301.88   36.75   3.74
10275   137     7   302.00   36.75   NaN
10276     1     6   285.00   36.62   NaN
10277     2     6   285.12   36.62   1.53
10278     3     6   285.25   36.62   1.60
10279     4     6   285.38   36.62   1.65
10280     5     6   285.50   36.62   1.69
10281     6     6   285.62   36.62   1.74
10282     7     6   285.75   36.62   1.78
10283     8     6   285.88   36.62   1.82
10284     9     6   286.00   36.62   1.87
10285    10     6   286.12   36.62   1.92
10286    11     6   286.25   36.62   1.98
10287    12     6   286.38   36.62   2.03
10288    13     6   286.50   36.62   2.09
10289    14     6   286.62   36.62   2.14
10290    15     6   286.75   36.62   2.19
10291    16     6   286.88   36.62   2.24
10292    17     6   287.00   36.62   2.28
10293    18     6   287.12   36.62   2.33
10294    19     6   287.25   36.62   2.37
10295    20     6   287.38   36.62   2.41
10296    21     6   287.50   36.62   2.46
10297    22     6   287.62   36.62   2.51
10298    23     6   287.75   36.62   2.56
10299    24     6   287.88   36.62   2.62
10300    25     6   288.00   36.62   2.67
10301    26     6   288.12   36.62   2.71
10302    27     6   288.25   36.62   2.76
10303    28     6   288.38   36.62   2.81
10304    29     6   288.50   36.62   2.85
10305    30     6   288.62   36.62   2.89
10306    31     6   288.75   36.62   2.92
10307    32     6   288.88   36.62   2.96
10308    33     6   289.00   36.62   2.99
10309    34     6   289.12   36.62   3.02
10310    35     6   289.25   36.62   3.05
10311    36     6   289.38   36.62   3.09
10312    37     6   289.50   36.62   3.12
10313    38     6   289.62   36.62   3.16
10314    39     6   289.75   36.62   3.19
10315    40     6   289.88   36.62   3.22
10316    41     6   290.00   36.62   3.25
10317    42     6   290.12   36.62   3.27
10318    43     6   290.25   36.62   3.30
10319    44     6   290.38   36.62   3.32
10320    45     6   290.50   36.62   3.35
10321    46     6   290.62   36.62   3.38
10322    47     6   290.75   36.62   3.41
10323    48     6   290.88   36.62   3.43
10324    49     6   291.00   36.62   3.46
10325    50     6   291.12   36.62   3.48
10326    51     6   291.25   36.62   3.50
10327    52     6   291.38   36.62   3.52
10328    53     6   291.50   36.62   3.54
10329    54     6   291.62   36.62   3.56
10330    55     6   291.75   36.62   3.58
10331    56     6   291.88   36.62   3.60
10332    57     6   292.00   36.62   3.62
10333    58     6   292.12   36.62   3.64
10334    59     6   292.25   36.62   3.65
10335    60     6   292.38   36.62   3.66
10336    61     6   292.50   36.62   3.68
10337    62     6   292.62   36.62   3.69
10338    63     6   292.75   36.62   3.71
10339    64     6   292.88   36.62   3.72
10340    65     6   293.00   36.62   3.74
10341    66     6   293.12   36.62   3.76
10342    67     6   293.25   36.62   3.78
10343    68     6   293.38   36.62   3.80
10344    69     6   293.50   36.62   3.81
10345    70     6   293.62   36.62   3.83
10346    71     6   293.75   36.62   3.85
10347    72     6   293.88   36.62   3.87
10348    73     6   294.00   36.62   3.89
10349    74     6   294.12   36.62   3.91
10350    75     6   294.25   36.62   3.93
10351    76     6   294.38   36.62   3.95
10352    77     6   294.50   36.62   3.97
10353    78     6   294.62   36.62   3.99
10354    79     6   294.75   36.62   4.01
10355    80     6   294.88   36.62   4.03
10356    81     6   295.00   36.62   4.05
10357    82     6   295.12   36.62   4.07
10358    83     6   295.25   36.62   4.09
10359    84     6   295.38   36.62   4.11
10360    85     6   295.50   36.62   4.12
10361    86     6   295.62   36.62   4.14
10362    87     6   295.75   36.62   4.15
10363    88     6   295.88   36.62   4.16
10364    89     6   296.00   36.62   4.18
10365    90     6   296.12   36.62   4.19
10366    91     6   296.25   36.62   4.20
10367    92     6   296.38   36.62   4.21
10368    93     6   296.50   36.62   4.21
10369    94     6   296.62   36.62   4.22
10370    95     6   296.75   36.62   4.23
10371    96     6   296.88   36.62   4.24
10372    97     6   297.00   36.62   4.25
10373    98     6   297.12   36.62   4.25
10374    99     6   297.25   36.62   4.26
10375   100     6   297.38   36.62   4.28
10376   101     6   297.50   36.62   4.29
10377   102     6   297.62   36.62   4.30
10378   103     6   297.75   36.62   4.32
10379   104     6   297.88   36.62   4.33
10380   105     6   298.00   36.62   4.34
10381   106     6   298.12   36.62   4.36
10382   107     6   298.25   36.62   4.37
10383   108     6   298.38   36.62   4.38
10384   109     6   298.50   36.62   4.38
10385   110     6   298.62   36.62   4.38
10386   111     6   298.75   36.62   4.38
10387   112     6   298.88   36.62   4.38
10388   113     6   299.00   36.62   4.37
10389   114     6   299.12   36.62   4.35
10390   115     6   299.25   36.62   4.33
10391   116     6   299.38   36.62   4.30
10392   117     6   299.50   36.62   4.27
10393   118     6   299.62   36.62   4.23
10394   119     6   299.75   36.62   4.19
10395   120     6   299.88   36.62   4.16
10396   121     6   300.00   36.62   4.13
10397   122     6   300.12   36.62   4.09
10398   123     6   300.25   36.62   4.06
10399   124     6   300.38   36.62   4.02
10400   125     6   300.50   36.62   3.99
10401   126     6   300.62   36.62   3.95
10402   127     6   300.75   36.62   3.93
10403   128     6   300.88   36.62   3.90
10404   129     6   301.00   36.62   3.88
10405   130     6   301.12   36.62   3.87
10406   131     6   301.25   36.62   3.85
10407   132     6   301.38   36.62   3.84
10408   133     6   301.50   36.62   3.83
10409   134     6   301.62   36.62   3.81
10410   135     6   301.75   36.62   3.78
10411   136     6   301.88   36.62   3.76
10412   137     6   302.00   36.62   NaN
10413     1     5   285.00   36.50   NaN
10414     2     5   285.12   36.50   1.55
10415     3     5   285.25   36.50   1.62
10416     4     5   285.38   36.50   1.67
10417     5     5   285.50   36.50   1.72
10418     6     5   285.62   36.50   1.76
10419     7     5   285.75   36.50   1.80
10420     8     5   285.88   36.50   1.85
10421     9     5   286.00   36.50   1.89
10422    10     5   286.12   36.50   1.95
10423    11     5   286.25   36.50   2.00
10424    12     5   286.38   36.50   2.05
10425    13     5   286.50   36.50   2.11
10426    14     5   286.62   36.50   2.15
10427    15     5   286.75   36.50   2.20
10428    16     5   286.88   36.50   2.25
10429    17     5   287.00   36.50   2.29
10430    18     5   287.12   36.50   2.33
10431    19     5   287.25   36.50   2.37
10432    20     5   287.38   36.50   2.42
10433    21     5   287.50   36.50   2.47
10434    22     5   287.62   36.50   2.52
10435    23     5   287.75   36.50   2.57
10436    24     5   287.88   36.50   2.62
10437    25     5   288.00   36.50   2.67
10438    26     5   288.12   36.50   2.71
10439    27     5   288.25   36.50   2.76
10440    28     5   288.38   36.50   2.80
10441    29     5   288.50   36.50   2.84
10442    30     5   288.62   36.50   2.88
10443    31     5   288.75   36.50   2.91
10444    32     5   288.88   36.50   2.95
10445    33     5   289.00   36.50   2.98
10446    34     5   289.12   36.50   3.01
10447    35     5   289.25   36.50   3.04
10448    36     5   289.38   36.50   3.07
10449    37     5   289.50   36.50   3.11
10450    38     5   289.62   36.50   3.14
10451    39     5   289.75   36.50   3.17
10452    40     5   289.88   36.50   3.20
10453    41     5   290.00   36.50   3.23
10454    42     5   290.12   36.50   3.25
10455    43     5   290.25   36.50   3.27
10456    44     5   290.38   36.50   3.29
10457    45     5   290.50   36.50   3.32
10458    46     5   290.62   36.50   3.34
10459    47     5   290.75   36.50   3.37
10460    48     5   290.88   36.50   3.39
10461    49     5   291.00   36.50   3.42
10462    50     5   291.12   36.50   3.44
10463    51     5   291.25   36.50   3.46
10464    52     5   291.38   36.50   3.48
10465    53     5   291.50   36.50   3.50
10466    54     5   291.62   36.50   3.52
10467    55     5   291.75   36.50   3.54
10468    56     5   291.88   36.50   3.56
10469    57     5   292.00   36.50   3.58
10470    58     5   292.12   36.50   3.59
10471    59     5   292.25   36.50   3.61
10472    60     5   292.38   36.50   3.62
10473    61     5   292.50   36.50   3.63
10474    62     5   292.62   36.50   3.65
10475    63     5   292.75   36.50   3.66
10476    64     5   292.88   36.50   3.68
10477    65     5   293.00   36.50   3.70
10478    66     5   293.12   36.50   3.72
10479    67     5   293.25   36.50   3.74
10480    68     5   293.38   36.50   3.76
10481    69     5   293.50   36.50   3.78
10482    70     5   293.62   36.50   3.80
10483    71     5   293.75   36.50   3.82
10484    72     5   293.88   36.50   3.84
10485    73     5   294.00   36.50   3.86
10486    74     5   294.12   36.50   3.88
10487    75     5   294.25   36.50   3.90
10488    76     5   294.38   36.50   3.92
10489    77     5   294.50   36.50   3.94
10490    78     5   294.62   36.50   3.96
10491    79     5   294.75   36.50   3.98
10492    80     5   294.88   36.50   4.01
10493    81     5   295.00   36.50   4.03
10494    82     5   295.12   36.50   4.05
10495    83     5   295.25   36.50   4.07
10496    84     5   295.38   36.50   4.09
10497    85     5   295.50   36.50   4.10
10498    86     5   295.62   36.50   4.12
10499    87     5   295.75   36.50   4.13
10500    88     5   295.88   36.50   4.15
10501    89     5   296.00   36.50   4.16
10502    90     5   296.12   36.50   4.17
10503    91     5   296.25   36.50   4.18
10504    92     5   296.38   36.50   4.19
10505    93     5   296.50   36.50   4.20
10506    94     5   296.62   36.50   4.21
10507    95     5   296.75   36.50   4.22
10508    96     5   296.88   36.50   4.23
10509    97     5   297.00   36.50   4.24
10510    98     5   297.12   36.50   4.25
10511    99     5   297.25   36.50   4.26
10512   100     5   297.38   36.50   4.27
10513   101     5   297.50   36.50   4.29
10514   102     5   297.62   36.50   4.30
10515   103     5   297.75   36.50   4.32
10516   104     5   297.88   36.50   4.33
10517   105     5   298.00   36.50   4.34
10518   106     5   298.12   36.50   4.36
10519   107     5   298.25   36.50   4.37
10520   108     5   298.38   36.50   4.38
10521   109     5   298.50   36.50   4.38
10522   110     5   298.62   36.50   4.39
10523   111     5   298.75   36.50   4.39
10524   112     5   298.88   36.50   4.38
10525   113     5   299.00   36.50   4.38
10526   114     5   299.12   36.50   4.37
10527   115     5   299.25   36.50   4.35
10528   116     5   299.38   36.50   4.32
10529   117     5   299.50   36.50   4.29
10530   118     5   299.62   36.50   4.26
10531   119     5   299.75   36.50   4.23
10532   120     5   299.88   36.50   4.20
10533   121     5   300.00   36.50   4.18
10534   122     5   300.12   36.50   4.15
10535   123     5   300.25   36.50   4.12
10536   124     5   300.38   36.50   4.09
10537   125     5   300.50   36.50   4.05
10538   126     5   300.62   36.50   4.02
10539   127     5   300.75   36.50   4.00
10540   128     5   300.88   36.50   3.97
10541   129     5   301.00   36.50   3.95
10542   130     5   301.12   36.50   3.93
10543   131     5   301.25   36.50   3.92
10544   132     5   301.38   36.50   3.89
10545   133     5   301.50   36.50   3.87
10546   134     5   301.62   36.50   3.84
10547   135     5   301.75   36.50   3.81
10548   136     5   301.88   36.50   3.77
10549   137     5   302.00   36.50   NaN
10550     1     4   285.00   36.38   NaN
10551     2     4   285.12   36.38   1.57
10552     3     4   285.25   36.38   1.64
10553     4     4   285.38   36.38   1.69
10554     5     4   285.50   36.38   1.74
10555     6     4   285.62   36.38   1.78
10556     7     4   285.75   36.38   1.82
10557     8     4   285.88   36.38   1.87
10558     9     4   286.00   36.38   1.92
10559    10     4   286.12   36.38   1.97
10560    11     4   286.25   36.38   2.02
10561    12     4   286.38   36.38   2.07
10562    13     4   286.50   36.38   2.12
10563    14     4   286.62   36.38   2.17
10564    15     4   286.75   36.38   2.21
10565    16     4   286.88   36.38   2.26
10566    17     4   287.00   36.38   2.30
10567    18     4   287.12   36.38   2.34
10568    19     4   287.25   36.38   2.38
10569    20     4   287.38   36.38   2.42
10570    21     4   287.50   36.38   2.47
10571    22     4   287.62   36.38   2.52
10572    23     4   287.75   36.38   2.57
10573    24     4   287.88   36.38   2.61
10574    25     4   288.00   36.38   2.66
10575    26     4   288.12   36.38   2.71
10576    27     4   288.25   36.38   2.75
10577    28     4   288.38   36.38   2.79
10578    29     4   288.50   36.38   2.83
10579    30     4   288.62   36.38   2.87
10580    31     4   288.75   36.38   2.90
10581    32     4   288.88   36.38   2.93
10582    33     4   289.00   36.38   2.96
10583    34     4   289.12   36.38   2.99
10584    35     4   289.25   36.38   3.02
10585    36     4   289.38   36.38   3.06
10586    37     4   289.50   36.38   3.09
10587    38     4   289.62   36.38   3.12
10588    39     4   289.75   36.38   3.15
10589    40     4   289.88   36.38   3.17
10590    41     4   290.00   36.38   3.20
10591    42     4   290.12   36.38   3.22
10592    43     4   290.25   36.38   3.24
10593    44     4   290.38   36.38   3.26
10594    45     4   290.50   36.38   3.28
10595    46     4   290.62   36.38   3.30
10596    47     4   290.75   36.38   3.33
10597    48     4   290.88   36.38   3.35
10598    49     4   291.00   36.38   3.37
10599    50     4   291.12   36.38   3.39
10600    51     4   291.25   36.38   3.41
10601    52     4   291.38   36.38   3.43
10602    53     4   291.50   36.38   3.45
10603    54     4   291.62   36.38   3.47
10604    55     4   291.75   36.38   3.49
10605    56     4   291.88   36.38   3.51
10606    57     4   292.00   36.38   3.52
10607    58     4   292.12   36.38   3.54
10608    59     4   292.25   36.38   3.56
10609    60     4   292.38   36.38   3.58
10610    61     4   292.50   36.38   3.59
10611    62     4   292.62   36.38   3.60
10612    63     4   292.75   36.38   3.62
10613    64     4   292.88   36.38   3.64
10614    65     4   293.00   36.38   3.66
10615    66     4   293.12   36.38   3.68
10616    67     4   293.25   36.38   3.70
10617    68     4   293.38   36.38   3.72
10618    69     4   293.50   36.38   3.74
10619    70     4   293.62   36.38   3.76
10620    71     4   293.75   36.38   3.78
10621    72     4   293.88   36.38   3.80
10622    73     4   294.00   36.38   3.82
10623    74     4   294.12   36.38   3.84
10624    75     4   294.25   36.38   3.87
10625    76     4   294.38   36.38   3.89
10626    77     4   294.50   36.38   3.91
10627    78     4   294.62   36.38   3.93
10628    79     4   294.75   36.38   3.96
10629    80     4   294.88   36.38   3.98
10630    81     4   295.00   36.38   4.00
10631    82     4   295.12   36.38   4.02
10632    83     4   295.25   36.38   4.04
10633    84     4   295.38   36.38   4.06
10634    85     4   295.50   36.38   4.08
10635    86     4   295.62   36.38   4.10
10636    87     4   295.75   36.38   4.11
10637    88     4   295.88   36.38   4.13
10638    89     4   296.00   36.38   4.14
10639    90     4   296.12   36.38   4.15
10640    91     4   296.25   36.38   4.17
10641    92     4   296.38   36.38   4.18
10642    93     4   296.50   36.38   4.19
10643    94     4   296.62   36.38   4.20
10644    95     4   296.75   36.38   4.21
10645    96     4   296.88   36.38   4.22
10646    97     4   297.00   36.38   4.23
10647    98     4   297.12   36.38   4.24
10648    99     4   297.25   36.38   4.25
10649   100     4   297.38   36.38   4.27
10650   101     4   297.50   36.38   4.28
10651   102     4   297.62   36.38   4.30
10652   103     4   297.75   36.38   4.31
10653   104     4   297.88   36.38   4.33
10654   105     4   298.00   36.38   4.34
10655   106     4   298.12   36.38   4.35
10656   107     4   298.25   36.38   4.36
10657   108     4   298.38   36.38   4.37
10658   109     4   298.50   36.38   4.37
10659   110     4   298.62   36.38   4.38
10660   111     4   298.75   36.38   4.38
10661   112     4   298.88   36.38   4.38
10662   113     4   299.00   36.38   4.37
10663   114     4   299.12   36.38   4.36
10664   115     4   299.25   36.38   4.35
10665   116     4   299.38   36.38   4.33
10666   117     4   299.50   36.38   4.31
10667   118     4   299.62   36.38   4.29
10668   119     4   299.75   36.38   4.26
10669   120     4   299.88   36.38   4.24
10670   121     4   300.00   36.38   4.22
10671   122     4   300.12   36.38   4.20
10672   123     4   300.25   36.38   4.18
10673   124     4   300.38   36.38   4.15
10674   125     4   300.50   36.38   4.12
10675   126     4   300.62   36.38   4.09
10676   127     4   300.75   36.38   4.06
10677   128     4   300.88   36.38   4.03
10678   129     4   301.00   36.38   4.01
10679   130     4   301.12   36.38   3.98
10680   131     4   301.25   36.38   3.96
10681   132     4   301.38   36.38   3.92
10682   133     4   301.50   36.38   3.89
10683   134     4   301.62   36.38   3.85
10684   135     4   301.75   36.38   3.81
10685   136     4   301.88   36.38   3.77
10686   137     4   302.00   36.38   NaN
10687     1     3   285.00   36.25   NaN
10688     2     3   285.12   36.25   1.59
10689     3     3   285.25   36.25   1.66
10690     4     3   285.38   36.25   1.72
10691     5     3   285.50   36.25   1.76
10692     6     3   285.62   36.25   1.80
10693     7     3   285.75   36.25   1.85
10694     8     3   285.88   36.25   1.89
10695     9     3   286.00   36.25   1.94
10696    10     3   286.12   36.25   1.99
10697    11     3   286.25   36.25   2.04
10698    12     3   286.38   36.25   2.08
10699    13     3   286.50   36.25   2.13
10700    14     3   286.62   36.25   2.18
10701    15     3   286.75   36.25   2.22
10702    16     3   286.88   36.25   2.26
10703    17     3   287.00   36.25   2.30
10704    18     3   287.12   36.25   2.34
10705    19     3   287.25   36.25   2.38
10706    20     3   287.38   36.25   2.42
10707    21     3   287.50   36.25   2.47
10708    22     3   287.62   36.25   2.51
10709    23     3   287.75   36.25   2.56
10710    24     3   287.88   36.25   2.61
10711    25     3   288.00   36.25   2.65
10712    26     3   288.12   36.25   2.70
10713    27     3   288.25   36.25   2.74
10714    28     3   288.38   36.25   2.78
10715    29     3   288.50   36.25   2.82
10716    30     3   288.62   36.25   2.85
10717    31     3   288.75   36.25   2.88
10718    32     3   288.88   36.25   2.92
10719    33     3   289.00   36.25   2.95
10720    34     3   289.12   36.25   2.98
10721    35     3   289.25   36.25   3.01
10722    36     3   289.38   36.25   3.03
10723    37     3   289.50   36.25   3.06
10724    38     3   289.62   36.25   3.09
10725    39     3   289.75   36.25   3.12
10726    40     3   289.88   36.25   3.15
10727    41     3   290.00   36.25   3.17
10728    42     3   290.12   36.25   3.19
10729    43     3   290.25   36.25   3.21
10730    44     3   290.38   36.25   3.23
10731    45     3   290.50   36.25   3.24
10732    46     3   290.62   36.25   3.26
10733    47     3   290.75   36.25   3.28
10734    48     3   290.88   36.25   3.30
10735    49     3   291.00   36.25   3.32
10736    50     3   291.12   36.25   3.34
10737    51     3   291.25   36.25   3.36
10738    52     3   291.38   36.25   3.38
10739    53     3   291.50   36.25   3.40
10740    54     3   291.62   36.25   3.41
10741    55     3   291.75   36.25   3.43
10742    56     3   291.88   36.25   3.45
10743    57     3   292.00   36.25   3.47
10744    58     3   292.12   36.25   3.49
10745    59     3   292.25   36.25   3.51
10746    60     3   292.38   36.25   3.53
10747    61     3   292.50   36.25   3.54
10748    62     3   292.62   36.25   3.56
10749    63     3   292.75   36.25   3.58
10750    64     3   292.88   36.25   3.59
10751    65     3   293.00   36.25   3.62
10752    66     3   293.12   36.25   3.64
10753    67     3   293.25   36.25   3.66
10754    68     3   293.38   36.25   3.68
10755    69     3   293.50   36.25   3.70
10756    70     3   293.62   36.25   3.73
10757    71     3   293.75   36.25   3.75
10758    72     3   293.88   36.25   3.77
10759    73     3   294.00   36.25   3.79
10760    74     3   294.12   36.25   3.81
10761    75     3   294.25   36.25   3.83
10762    76     3   294.38   36.25   3.86
10763    77     3   294.50   36.25   3.88
10764    78     3   294.62   36.25   3.90
10765    79     3   294.75   36.25   3.93
10766    80     3   294.88   36.25   3.95
10767    81     3   295.00   36.25   3.98
10768    82     3   295.12   36.25   4.00
10769    83     3   295.25   36.25   4.02
10770    84     3   295.38   36.25   4.04
10771    85     3   295.50   36.25   4.06
10772    86     3   295.62   36.25   4.08
10773    87     3   295.75   36.25   4.09
10774    88     3   295.88   36.25   4.11
10775    89     3   296.00   36.25   4.12
10776    90     3   296.12   36.25   4.14
10777    91     3   296.25   36.25   4.15
10778    92     3   296.38   36.25   4.16
10779    93     3   296.50   36.25   4.17
10780    94     3   296.62   36.25   4.18
10781    95     3   296.75   36.25   4.19
10782    96     3   296.88   36.25   4.20
10783    97     3   297.00   36.25   4.21
10784    98     3   297.12   36.25   4.23
10785    99     3   297.25   36.25   4.24
10786   100     3   297.38   36.25   4.26
10787   101     3   297.50   36.25   4.28
10788   102     3   297.62   36.25   4.29
10789   103     3   297.75   36.25   4.31
10790   104     3   297.88   36.25   4.32
10791   105     3   298.00   36.25   4.33
10792   106     3   298.12   36.25   4.34
10793   107     3   298.25   36.25   4.35
10794   108     3   298.38   36.25   4.36
10795   109     3   298.50   36.25   4.36
10796   110     3   298.62   36.25   4.36
10797   111     3   298.75   36.25   4.36
10798   112     3   298.88   36.25   4.36
10799   113     3   299.00   36.25   4.35
10800   114     3   299.12   36.25   4.35
10801   115     3   299.25   36.25   4.34
10802   116     3   299.38   36.25   4.32
10803   117     3   299.50   36.25   4.31
10804   118     3   299.62   36.25   4.29
10805   119     3   299.75   36.25   4.28
10806   120     3   299.88   36.25   4.26
10807   121     3   300.00   36.25   4.24
10808   122     3   300.12   36.25   4.23
10809   123     3   300.25   36.25   4.21
10810   124     3   300.38   36.25   4.18
10811   125     3   300.50   36.25   4.16
10812   126     3   300.62   36.25   4.13
10813   127     3   300.75   36.25   4.10
10814   128     3   300.88   36.25   4.07
10815   129     3   301.00   36.25   4.04
10816   130     3   301.12   36.25   4.01
10817   131     3   301.25   36.25   3.97
10818   132     3   301.38   36.25   3.93
10819   133     3   301.50   36.25   3.88
10820   134     3   301.62   36.25   3.84
10821   135     3   301.75   36.25   3.79
10822   136     3   301.88   36.25   3.75
10823   137     3   302.00   36.25   NaN
10824     1     2   285.00   36.12   NaN
10825     2     2   285.12   36.12   1.61
10826     3     2   285.25   36.12   1.69
10827     4     2   285.38   36.12   1.74
10828     5     2   285.50   36.12   1.79
10829     6     2   285.62   36.12   1.83
10830     7     2   285.75   36.12   1.87
10831     8     2   285.88   36.12   1.92
10832     9     2   286.00   36.12   1.96
10833    10     2   286.12   36.12   2.01
10834    11     2   286.25   36.12   2.06
10835    12     2   286.38   36.12   2.10
10836    13     2   286.50   36.12   2.14
10837    14     2   286.62   36.12   2.19
10838    15     2   286.75   36.12   2.23
10839    16     2   286.88   36.12   2.27
10840    17     2   287.00   36.12   2.31
10841    18     2   287.12   36.12   2.35
10842    19     2   287.25   36.12   2.38
10843    20     2   287.38   36.12   2.42
10844    21     2   287.50   36.12   2.47
10845    22     2   287.62   36.12   2.51
10846    23     2   287.75   36.12   2.56
10847    24     2   287.88   36.12   2.60
10848    25     2   288.00   36.12   2.64
10849    26     2   288.12   36.12   2.68
10850    27     2   288.25   36.12   2.73
10851    28     2   288.38   36.12   2.76
10852    29     2   288.50   36.12   2.80
10853    30     2   288.62   36.12   2.83
10854    31     2   288.75   36.12   2.86
10855    32     2   288.88   36.12   2.89
10856    33     2   289.00   36.12   2.92
10857    34     2   289.12   36.12   2.95
10858    35     2   289.25   36.12   2.98
10859    36     2   289.38   36.12   3.01
10860    37     2   289.50   36.12   3.04
10861    38     2   289.62   36.12   3.06
10862    39     2   289.75   36.12   3.09
10863    40     2   289.88   36.12   3.11
10864    41     2   290.00   36.12   3.14
10865    42     2   290.12   36.12   3.16
10866    43     2   290.25   36.12   3.17
10867    44     2   290.38   36.12   3.19
10868    45     2   290.50   36.12   3.20
10869    46     2   290.62   36.12   3.22
10870    47     2   290.75   36.12   3.23
10871    48     2   290.88   36.12   3.25
10872    49     2   291.00   36.12   3.27
10873    50     2   291.12   36.12   3.29
10874    51     2   291.25   36.12   3.30
10875    52     2   291.38   36.12   3.32
10876    53     2   291.50   36.12   3.34
10877    54     2   291.62   36.12   3.35
10878    55     2   291.75   36.12   3.37
10879    56     2   291.88   36.12   3.39
10880    57     2   292.00   36.12   3.41
10881    58     2   292.12   36.12   3.43
10882    59     2   292.25   36.12   3.45
10883    60     2   292.38   36.12   3.47
10884    61     2   292.50   36.12   3.48
10885    62     2   292.62   36.12   3.50
10886    63     2   292.75   36.12   3.52
10887    64     2   292.88   36.12   3.54
10888    65     2   293.00   36.12   3.56
10889    66     2   293.12   36.12   3.59
10890    67     2   293.25   36.12   3.61
10891    68     2   293.38   36.12   3.63
10892    69     2   293.50   36.12   3.66
10893    70     2   293.62   36.12   3.68
10894    71     2   293.75   36.12   3.70
10895    72     2   293.88   36.12   3.72
10896    73     2   294.00   36.12   3.75
10897    74     2   294.12   36.12   3.77
10898    75     2   294.25   36.12   3.79
10899    76     2   294.38   36.12   3.82
10900    77     2   294.50   36.12   3.84
10901    78     2   294.62   36.12   3.87
10902    79     2   294.75   36.12   3.89
10903    80     2   294.88   36.12   3.92
10904    81     2   295.00   36.12   3.94
10905    82     2   295.12   36.12   3.96
10906    83     2   295.25   36.12   3.99
10907    84     2   295.38   36.12   4.01
10908    85     2   295.50   36.12   4.03
10909    86     2   295.62   36.12   4.04
10910    87     2   295.75   36.12   4.06
10911    88     2   295.88   36.12   4.08
10912    89     2   296.00   36.12   4.09
10913    90     2   296.12   36.12   4.11
10914    91     2   296.25   36.12   4.12
10915    92     2   296.38   36.12   4.13
10916    93     2   296.50   36.12   4.14
10917    94     2   296.62   36.12   4.16
10918    95     2   296.75   36.12   4.17
10919    96     2   296.88   36.12   4.18
10920    97     2   297.00   36.12   4.19
10921    98     2   297.12   36.12   4.20
10922    99     2   297.25   36.12   4.22
10923   100     2   297.38   36.12   4.23
10924   101     2   297.50   36.12   4.25
10925   102     2   297.62   36.12   4.26
10926   103     2   297.75   36.12   4.27
10927   104     2   297.88   36.12   4.28
10928   105     2   298.00   36.12   4.29
10929   106     2   298.12   36.12   4.30
10930   107     2   298.25   36.12   4.31
10931   108     2   298.38   36.12   4.31
10932   109     2   298.50   36.12   4.31
10933   110     2   298.62   36.12   4.31
10934   111     2   298.75   36.12   4.31
10935   112     2   298.88   36.12   4.30
10936   113     2   299.00   36.12   4.30
10937   114     2   299.12   36.12   4.29
10938   115     2   299.25   36.12   4.28
10939   116     2   299.38   36.12   4.27
10940   117     2   299.50   36.12   4.26
10941   118     2   299.62   36.12   4.25
10942   119     2   299.75   36.12   4.24
10943   120     2   299.88   36.12   4.22
10944   121     2   300.00   36.12   4.21
10945   122     2   300.12   36.12   4.19
10946   123     2   300.25   36.12   4.17
10947   124     2   300.38   36.12   4.15
10948   125     2   300.50   36.12   4.12
10949   126     2   300.62   36.12   4.09
10950   127     2   300.75   36.12   4.06
10951   128     2   300.88   36.12   4.03
10952   129     2   301.00   36.12   4.00
10953   130     2   301.12   36.12   3.96
10954   131     2   301.25   36.12   3.92
10955   132     2   301.38   36.12   3.87
10956   133     2   301.50   36.12   3.83
10957   134     2   301.62   36.12   3.78
10958   135     2   301.75   36.12   3.73
10959   136     2   301.88   36.12   3.68
10960   137     2   302.00   36.12   NaN
10961     1     1   285.00   36.00   NaN
10962     2     1   285.12   36.00   NaN
10963     3     1   285.25   36.00   NaN
10964     4     1   285.38   36.00   NaN
10965     5     1   285.50   36.00   NaN
10966     6     1   285.62   36.00   NaN
10967     7     1   285.75   36.00   NaN
10968     8     1   285.88   36.00   NaN
10969     9     1   286.00   36.00   NaN
10970    10     1   286.12   36.00   NaN
10971    11     1   286.25   36.00   NaN
10972    12     1   286.38   36.00   NaN
10973    13     1   286.50   36.00   NaN
10974    14     1   286.62   36.00   NaN
10975    15     1   286.75   36.00   NaN
10976    16     1   286.88   36.00   NaN
10977    17     1   287.00   36.00   NaN
10978    18     1   287.12   36.00   NaN
10979    19     1   287.25   36.00   NaN
10980    20     1   287.38   36.00   NaN
10981    21     1   287.50   36.00   NaN
10982    22     1   287.62   36.00   NaN
10983    23     1   287.75   36.00   NaN
10984    24     1   287.88   36.00   NaN
10985    25     1   288.00   36.00   NaN
10986    26     1   288.12   36.00   NaN
10987    27     1   288.25   36.00   NaN
10988    28     1   288.38   36.00   NaN
10989    29     1   288.50   36.00   NaN
10990    30     1   288.62   36.00   NaN
10991    31     1   288.75   36.00   NaN
10992    32     1   288.88   36.00   NaN
10993    33     1   289.00   36.00   NaN
10994    34     1   289.12   36.00   NaN
10995    35     1   289.25   36.00   NaN
10996    36     1   289.38   36.00   NaN
10997    37     1   289.50   36.00   NaN
10998    38     1   289.62   36.00   NaN
10999    39     1   289.75   36.00   NaN
11000    40     1   289.88   36.00   NaN
11001    41     1   290.00   36.00   NaN
11002    42     1   290.12   36.00   NaN
11003    43     1   290.25   36.00   NaN
11004    44     1   290.38   36.00   NaN
11005    45     1   290.50   36.00   NaN
11006    46     1   290.62   36.00   NaN
11007    47     1   290.75   36.00   NaN
11008    48     1   290.88   36.00   NaN
11009    49     1   291.00   36.00   NaN
11010    50     1   291.12   36.00   NaN
11011    51     1   291.25   36.00   NaN
11012    52     1   291.38   36.00   NaN
11013    53     1   291.50   36.00   NaN
11014    54     1   291.62   36.00   NaN
11015    55     1   291.75   36.00   NaN
11016    56     1   291.88   36.00   NaN
11017    57     1   292.00   36.00   NaN
11018    58     1   292.12   36.00   NaN
11019    59     1   292.25   36.00   NaN
11020    60     1   292.38   36.00   NaN
11021    61     1   292.50   36.00   NaN
11022    62     1   292.62   36.00   NaN
11023    63     1   292.75   36.00   NaN
11024    64     1   292.88   36.00   NaN
11025    65     1   293.00   36.00   NaN
11026    66     1   293.12   36.00   NaN
11027    67     1   293.25   36.00   NaN
11028    68     1   293.38   36.00   NaN
11029    69     1   293.50   36.00   NaN
11030    70     1   293.62   36.00   NaN
11031    71     1   293.75   36.00   NaN
11032    72     1   293.88   36.00   NaN
11033    73     1   294.00   36.00   NaN
11034    74     1   294.12   36.00   NaN
11035    75     1   294.25   36.00   NaN
11036    76     1   294.38   36.00   NaN
11037    77     1   294.50   36.00   NaN
11038    78     1   294.62   36.00   NaN
11039    79     1   294.75   36.00   NaN
11040    80     1   294.88   36.00   NaN
11041    81     1   295.00   36.00   NaN
11042    82     1   295.12   36.00   NaN
11043    83     1   295.25   36.00   NaN
11044    84     1   295.38   36.00   NaN
11045    85     1   295.50   36.00   NaN
11046    86     1   295.62   36.00   NaN
11047    87     1   295.75   36.00   NaN
11048    88     1   295.88   36.00   NaN
11049    89     1   296.00   36.00   NaN
11050    90     1   296.12   36.00   NaN
11051    91     1   296.25   36.00   NaN
11052    92     1   296.38   36.00   NaN
11053    93     1   296.50   36.00   NaN
11054    94     1   296.62   36.00   NaN
11055    95     1   296.75   36.00   NaN
11056    96     1   296.88   36.00   NaN
11057    97     1   297.00   36.00   NaN
11058    98     1   297.12   36.00   NaN
11059    99     1   297.25   36.00   NaN
11060   100     1   297.38   36.00   NaN
11061   101     1   297.50   36.00   NaN
11062   102     1   297.62   36.00   NaN
11063   103     1   297.75   36.00   NaN
11064   104     1   297.88   36.00   NaN
11065   105     1   298.00   36.00   NaN
11066   106     1   298.12   36.00   NaN
11067   107     1   298.25   36.00   NaN
11068   108     1   298.38   36.00   NaN
11069   109     1   298.50   36.00   NaN
11070   110     1   298.62   36.00   NaN
11071   111     1   298.75   36.00   NaN
11072   112     1   298.88   36.00   NaN
11073   113     1   299.00   36.00   NaN
11074   114     1   299.12   36.00   NaN
11075   115     1   299.25   36.00   NaN
11076   116     1   299.38   36.00   NaN
11077   117     1   299.50   36.00   NaN
11078   118     1   299.62   36.00   NaN
11079   119     1   299.75   36.00   NaN
11080   120     1   299.88   36.00   NaN
11081   121     1   300.00   36.00   NaN
11082   122     1   300.12   36.00   NaN
11083   123     1   300.25   36.00   NaN
11084   124     1   300.38   36.00   NaN
11085   125     1   300.50   36.00   NaN
11086   126     1   300.62   36.00   NaN
11087   127     1   300.75   36.00   NaN
11088   128     1   300.88   36.00   NaN
11089   129     1   301.00   36.00   NaN
11090   130     1   301.12   36.00   NaN
11091   131     1   301.25   36.00   NaN
11092   132     1   301.38   36.00   NaN
11093   133     1   301.50   36.00   NaN
11094   134     1   301.62   36.00   NaN
11095   135     1   301.75   36.00   NaN
11096   136     1   301.88   36.00   NaN
11097   137     1   302.00   36.00   NaN
